{% comment %}
  Product Section
  - Multiple layout options: Default, Grid, Stacked
  - Responsive image gallery
  - Product information with variants
  - Add to cart functionality
{% endcomment %}

<section class="flat-single-product">
  <div class="tf-main-product section-image-zoom">
    <div class="container">
      <div class="row">
        <!-- Product Images -->
        <div class="col-md-6">
          {% if section.settings.layout == 'default' %}
            <div class="tf-product-media-wrap sticky-top">
              <div class="thumbs-slider">
                <div dir="ltr" class="swiper tf-product-media-thumbs other-image-zoom" data-preview="4" data-direction="vertical">
                  <div class="swiper-wrapper stagger-wrap">
                    {% for image in product.images %}
                      <div class="swiper-slide stagger-item" data-color="{{ image.alt | default: 'default' }}">
                        <div class="item">
                          <img class="lazyload"
                            data-src="{{ image | image_url: width: 800 }}"
                            src="{{ image | image_url: width: 400 }}"
                            alt="{{ image.alt | default: product.title }}">
                        </div>
                      </div>
                    {% endfor %}
                  </div>
                </div>
                <div class="flat-wrap-media-product">
                  <div dir="ltr" class="swiper tf-product-media-main" id="gallery-swiper-started">
                    <div class="swiper-wrapper">
                      {% for image in product.images %}
                        <div class="swiper-slide" data-color="{{ image.alt | default: 'default' }}">
                          <a href="{{ image | image_url: width: 1200 }}" target="_blank" class="item" data-pswp-width="552px" data-pswp-height="827px">
                            <img class="tf-image-zoom lazyload"
                              data-zoom="{{ image | image_url: width: 1200 }}"
                              data-src="{{ image | image_url: width: 800 }}"
                              src="{{ image | image_url: width: 400 }}"
                              alt="{{ image.alt | default: product.title }}">
                          </a>
                        </div>
                      {% endfor %}
                    </div>
                  </div>
                  <div class="swiper-button-next nav-swiper thumbs-next"></div>
                  <div class="swiper-button-prev nav-swiper thumbs-prev"></div>
                </div>
              </div>
            </div>
          {% else %}
            <div class="wrapper-gallery-scroll flat-single-grid{% if section.settings.layout == 'stacked' %} flat-single-stacked{% endif %}" id="gallery-started">
              {% for image in product.images %}
                <a href="{{ image | image_url: width: 1200 }}" data-scroll="{{ image.alt | default: 'default' }}" target="_blank" class="item item-scroll-target" data-pswp-width="552px" data-pswp-height="827px">
                  <img class="tf-image-zoom lazyload"
                    data-zoom="{{ image | image_url: width: 1200 }}"
                    data-src="{{ image | image_url: width: 800 }}"
                    src="{{ image | image_url: width: 400 }}"
                    alt="{{ image.alt | default: product.title }}">
                </a>
              {% endfor %}
            </div>
          {% endif %}
        </div>
        <!-- /Product Images -->

        <!-- Product Info -->
        <div class="col-md-6">
          <div class="tf-product-info-wrap sticky-top position-relative">
            <div class="tf-zoom-main"></div>
            <div class="tf-product-info-list other-image-zoom">
              <div class="tf-product-info-heading">
                <h5 class="product-info-name fw-medium">{{ product.title }}</h5>
                <div class="product-info-rate">
                  <div class="list-star">
                    {% for i in (1..5) %}
                      <i class="icon icon-star"></i>
                    {% endfor %}
                  </div>
                  <span class="count-review">({{ product.metafields.reviews.rating_count | default: 'No review' }})</span>
                </div>
                <div class="product-info-price">
                  <div class="display-sm price-new price-on-sale">{{ product.price | money }}</div>
                  {% if product.compare_at_price > product.price %}
                    <div class="display-sm price-old">{{ product.compare_at_price | money }}</div>
                    <span class="badge-sale">{{ product.compare_at_price | minus: product.price | times: 100.0 | divided_by: product.compare_at_price | round }}% Off</span>
                  {% endif %}
                </div>
                {% if section.settings.show_sold_count %}
                  <div class="product-info-sold">
                    <svg class="icon" width="18" height="18" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg">
                      <path d="M15.2759 10.9242C15.2556 10.6149 14.9236 10.4281 14.6488 10.5714C14.4098 10.6961 13.6603 11.0196 13.0698 11.0196C12.6156 11.0196 12.3132 10.8694 12.3132 10.1362C12.3132 8.12636 15.0124 6.52078 12.6056 3.51218C12.3295 3.16719 11.773 3.41746 11.8469 3.85238C11.8484 3.86145 11.9887 4.77182 11.5632 5.27582C11.3635 5.51218 11.061 5.62711 10.6384 5.62711C9.17454 5.62711 9.27646 1.94027 11.1223 0.795793C11.5328 0.541367 11.2702 -0.0948905 10.8012 0.0119845C10.683 0.0387033 7.88684 0.701328 6.39105 3.62798C5.28035 5.80099 5.88191 7.29977 6.32116 8.39418C6.71371 9.3722 6.89283 9.81857 6.01364 10.4273C5.68251 10.6566 5.42618 10.6328 5.42618 10.6328C4.60384 10.6328 3.82489 9.42402 3.59437 8.95879C3.40712 8.57837 2.83721 8.67311 2.78314 9.09372C2.75993 9.27457 2.24057 13.5513 4.51026 16.1312C5.76076 17.5525 7.50054 18.0581 9.40742 17.9948C11.1702 17.9357 12.5768 17.3395 13.5883 16.2228C15.4639 14.152 15.2844 11.0549 15.2759 10.9242Z" fill="#F2721C"/>
                      <path d="M4.44845 10.1357C4.04521 9.74669 3.72761 9.22817 3.59412 8.95877C3.40688 8.57834 2.83696 8.67309 2.78289 9.0937C2.75969 9.27454 2.24032 13.5513 4.51001 16.1312C5.2812 17.0077 6.27795 17.5784 7.48458 17.8379C4.95987 16.3506 4.24181 13.0162 4.44845 10.1357Z" fill="#EA5513"/>
                      <path d="M3.73448 4.51577C3.70506 4.49735 3.66772 4.49735 3.6383 4.51577C2.64745 5.13712 2.64446 6.58633 3.6383 7.20955C3.66723 7.22769 3.70471 7.22825 3.73448 7.20955C4.72533 6.58816 4.72821 5.13898 3.73448 4.51577Z" fill="#F2721C"/>
                      <path d="M4.12025 4.85809C4.01204 4.72502 3.88239 4.60855 3.73448 4.51577C3.70506 4.49735 3.66772 4.49735 3.6383 4.51577C2.64745 5.13712 2.64446 6.58633 3.6383 7.20955C3.66723 7.22769 3.70471 7.22825 3.73448 7.20955C3.88242 7.11677 4.01208 7.00026 4.12029 6.8672C3.64157 6.28237 3.64072 5.44386 4.12025 4.85809Z" fill="#EA5513"/>
                      <path d="M10.8011 0.0119845C10.6829 0.0387033 7.88676 0.701328 6.39096 3.62798C4.90723 6.53083 6.48163 8.24741 6.63386 9.34639L6.63403 9.34629C6.69 9.74974 6.54569 10.0588 6.01356 10.4272C5.69392 10.6486 5.40494 10.6816 5.10034 10.5723V10.5727C5.10034 10.5727 6.17507 11.6058 7.26087 10.8972C8.33686 10.1951 8.02601 9.11809 7.85986 8.63131L7.86025 8.63103C7.46365 7.57951 7.11673 6.19027 8.09319 4.27988C8.67292 3.14557 9.44797 2.35153 10.1868 1.80263C10.426 1.38835 10.7395 1.0331 11.1223 0.795758C11.5326 0.541367 11.2701 -0.0948905 10.8011 0.0119845Z" fill="#EA5513"/>
                    </svg>
                    <span class="text-dark">{{ section.settings.sold_count_text }}</span>
                  </div>
                {% endif %}
                {% if section.settings.show_stock_count %}
                  <div class="product-info-progress-sale">
                    <div class="title-hurry-up">
                      <span class="text-primary fw-medium">HURRY UP!</span> Only <span class="count">{{ product.variants.first.inventory_quantity }}</span> items left!
                    </div>
                    <div class="progress-sold">
                      <div class="value" style="width: {{ product.variants.first.inventory_quantity | times: 100 | divided_by: product.variants.first.inventory_policy | round }}%;" data-progress="70"></div>
                    </div>
                  </div>
                {% endif %}
              </div>

              <div class="tf-product-info-variant">
                {% for option in product.options_with_values %}
                  <div class="variant-picker-item variant-{{ option.name | handle }}">
                    <div class="variant-picker-label">
                      <div>{{ option.name }}:<span class="variant-picker-label-value value-current{{ option.name }}">{{ option.selected_value }}</span></div>
                      {% if option.name == 'Size' and section.settings.show_size_guide %}
                        <a href="#sizeGuide" data-bs-toggle="modal" class="size-guide link">Size Guide</a>
                      {% endif %}
                    </div>
                    <div class="variant-picker-values">
                      {% for value in option.values %}
                        {% if option.name == 'Color' %}
                          <div class="hover-tooltip tooltip-bot color-btn btn-scroll-target{% if value == option.selected_value %} active{% endif %}" 
                               data-scroll="{{ value | handle }}" 
                               data-option="{{ option.name | handle }}"
                               data-value="{{ value | handle }}">
                            <span class="check-color bg-{{ value | handle }}"></span>
                            <span class="tooltip">{{ value }}</span>
                          </div>
                        {% else %}
                          <span class="size-btn{% if value == option.selected_value %} active{% endif %}" 
                                data-size="{{ value | handle }}"
                                data-option="{{ option.name | handle }}"
                                data-value="{{ value | handle }}">{{ value }}</span>
                        {% endif %}
                      {% endfor %}
                    </div>
                  </div>
                {% endfor %}
              </div>

              <div class="tf-product-total-quantity">
                <div class="group-btn">
                  <div class="wg-quantity">
                    <button class="btn-quantity btn-decrease">-</button>
                    <input class="quantity-product" type="text" name="number" value="1">
                    <button class="btn-quantity btn-increase">+</button>
                  </div>
                  <a href="javascript:void(0);" 
                     class="tf-btn hover-primary add-to-cart" 
                     data-variant-id="{{ product.selected_or_first_available_variant.id }}"
                     data-quantity="1"
                     aria-label="Add to cart">Add to cart</a>
                </div>
                <a href="#" class="tf-btn btn-primary w-100 animate-btn">Buy it now</a>
                <a href="/checkout" class="more-choose-payment link">More payment options</a>
              </div>

              {% if section.settings.show_extra_links %}
                <div class="tf-product-info-extra-link">
                  <a href="javascript:void(0);" 
                  class="product-extra-icon link btn-wishlist" 
                  data-wishlist 
                     data-id="{{ product.id }}" 
                     data-action="add"
                     aria-label="Add to wishlist">
                     <span class="wishlist-content add">
                      <i class="icon icon-heart"></i>
                      <span class="text">Add to wishlist</span>
                    </span>
                    <span class="wishlist-content remove">
                      <i class="icon icon-trash"></i>
                      <span class="text">Remove from wishlist</span>
                    </span>
                  </a>
                  <a href="javascript:void(0);" 
                     class="product-extra-icon link" 
                     data-compare 
                     data-id="{{ product.id }}" 
                     data-action="add"
                     aria-label="Add to compare">
                    <i class="icon icon-compare2"></i>Compare
                  </a>
                  <a href="#askQuestion" data-bs-toggle="modal" class="product-extra-icon link"><i class="icon icon-ask"></i>Ask a question</a>
                  <a href="#shareSocial" data-bs-toggle="modal" class="product-extra-icon link"><i class="icon icon-share"></i>Share</a>
                </div>
              {% endif %}

              {% if section.settings.show_trust_seal %}
                <div class="tf-product-info-trust-seal text-center">
                  <p class="text-md text-dark-2 text-seal fw-medium">{{ section.settings.trust_seal_text }}</p>
                  <ul class="list-card">
                    {% for block in section.blocks %}
                      {% if block.type == 'payment_icon' and block.settings.image != blank %}
                        <li class="card-item" {{ block.shopify_attributes }}>
                          <img 
                            src="{{ block.settings.image | image_url: width: 60 }}" 
                            alt="{{ block.settings.image.alt | default: 'Payment method' }}" 
                            loading="lazy"
                            width="60"
                            height="40">
                        </li>
                      {% endif %}
                    {% endfor %}
                  </ul>
                </div>
              {% endif %}

              {% if section.settings.show_delivery_info %}
                <div class="tf-product-info-delivery-return">
                  <div class="product-delivery">
                    <div class="icon icon-car2"></div>
                    <p class="text-md">Estimated delivery time: <span class="fw-medium">{{ section.settings.delivery_time }}</span></p>
                  </div>
                  <div class="product-delivery">
                    <div class="icon icon-shipping3"></div>
                    <p class="text-md">Free shipping on <span class="fw-medium">{{ section.settings.free_shipping_text }}</span></p>
                  </div>
                </div>
              {% endif %}
            </div>

            {% if section.settings.show_fbt %}
              <div class="tf-product-fbt">
                <div class="title text-xl fw-medium">Frequently Bought Together</div>
                <form class="tf-product-form-bundle">
                  <div class="tf-bundle-products">
                    {% for i in (1..3) %}
                      <div class="tf-bundle-product-item item-has-checkbox{% if forloop.first %} check{% endif %}">
                        <div class="bundle-check">
                          <input type="checkbox"{% if forloop.first %} checked="checked"{% endif %} class="tf-check">
                        </div>
                        <a href="#" class="bundle-image">
                          <img src="{{ 'product-' | append: i | append: '.jpg' | asset_url }}" alt="img-product">
                        </a>
                        <div class="bundle-info">
                          <div class="bundle-title text-sm fw-medium">Product {{ i }}</div>
                          <div class="bundle-price text-md fw-medium">
                            <span class="new-price">${{ i | times: 100 | plus: 100 }}.00</span>
                            <span class="old-price">${{ i | times: 100 | plus: 120 }}.00</span>
                          </div>
                          <div class="bundle-variant tf-select">
                            <select>
                              <option selected="selected">Black / S</option>
                              <option>Black / M</option>
                              <option>Black / L</option>
                            </select>
                          </div>
                        </div>
                      </div>
                    {% endfor %}
                  </div>
                  <div class="bundle-total-submit">
                    <div class="text">Total price:</div>
                    <span class="total-price">$51.00 USD</span>
                    <span class="total-price-old">$53.00 USD</span>
                  </div>
                  <button data-bs-target="#shoppingCart" data-bs-toggle="offcanvas" class="btn-submit-total tf-btn btn-out-line-primary">Add selected to cart</button>
                </form>
              </div>
            {% endif %}
          </div>
        </div>
        <!-- /Product Info -->
      </div>
    </div>
  </div>

  {% if section.settings.show_sticky_cart %}
    <div class="tf-sticky-btn-atc">
      <div class="container">
        <div class="tf-height-observer w-100 d-flex align-items-center">
          <div class="tf-sticky-atc-product d-flex align-items-center">
            <div class="tf-sticky-atc-img">
              <img class="lazyload" data-src="{{ product.featured_image | image_url: width: 100 }}" src="{{ product.featured_image | image_url: width: 50 }}" alt="{{ product.title }}">
            </div>
            <div class="tf-sticky-atc-title fw-5 d-xl-block d-none">{{ product.title }}</div>
          </div>
          <div class="tf-sticky-atc-infos">
            <form class="product-form" data-product-id="{{ product.id }}">
              <div class="tf-sticky-atc-variant-price text-center tf-select">
                <select name="id" class="variant-selector">
                  {% for variant in product.variants %}
                    <option value="{{ variant.id }}"{% if variant == product.selected_or_first_available_variant %} selected="selected"{% endif %}>
                      {{ variant.title }} - {{ variant.price | money }}
                    </option>
                  {% endfor %}
                </select>
              </div>
              <div class="tf-sticky-atc-btns">
                <div class="tf-product-info-quantity">
                  <div class="wg-quantity">
                    <button type="button" class="btn-quantity minus-btn">-</button>
                    <input class="quantity-product font-4" type="number" name="quantity" value="1" min="1">
                    <button type="button" class="btn-quantity plus-btn">+</button>
                  </div>
                </div>
                <button type="submit" 
                class="tf-btn hover-primary add-to-cart" 
                data-variant-id="{{ product.selected_or_first_available_variant.id }}"
                data-quantity="1"
                aria-label="Add to cart">Add to cart</button>
              </div>
            </form>
          </div>
        </div>
      </div>
    </div>
  {% endif %}
</section>

<style>
.btn-wishlist .wishlist-content {
  display: none;
}

.btn-wishlist .wishlist-content.add {
  display: inline-flex;
  align-items: center;
}

.btn-wishlist[data-action="remove"] .wishlist-content.add {
  display: none;
}

.btn-wishlist[data-action="remove"] .wishlist-content.remove {
  display: inline-flex;
  align-items: center;
}

.btn-wishlist .icon {
  margin-right: 5px;
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
  {% if section.settings.layout == 'default' %}
    // Default layout with Swiper
    const galleryThumbs = new Swiper('.tf-product-media-thumbs', {
      direction: 'vertical',
      slidesPerView: 4,
      spaceBetween: 10,
      navigation: {
        nextEl: '.thumbs-next',
        prevEl: '.thumbs-prev',
      },
      breakpoints: {
        320: {
          direction: 'horizontal',
          slidesPerView: 4,
        },
        768: {
          direction: 'vertical',
          slidesPerView: 4,
        }
      }
    });

    const galleryMain = new Swiper('.tf-product-media-main', {
      slidesPerView: 1,
      spaceBetween: 10,
      thumbs: {
        swiper: galleryThumbs
      },
      navigation: {
        nextEl: '.thumbs-next',
        prevEl: '.thumbs-prev',
      }
    });
  {% else %}
    // Grid and Stacked layout functionality
    const galleryItems = document.querySelectorAll('.item-scroll-target');
    const colorButtons = document.querySelectorAll('.btn-scroll-target');
    
    colorButtons.forEach(button => {
      button.addEventListener('click', function() {
        const color = this.getAttribute('data-scroll');
        document.querySelectorAll('.btn-scroll-target').forEach(btn => btn.classList.remove('active'));
        this.classList.add('active');
        
        galleryItems.forEach(item => {
          if (item.getAttribute('data-scroll') === color) {
            item.scrollIntoView({ behavior: 'smooth', block: 'center' });
          }
        });
      });
    });
  {% endif %}

  // Store selected options
  let selectedOptions = {
    {% for option in product.options_with_values %}
      '{{ option.name | handle }}': '{{ option.selected_value | handle }}',
    {% endfor %}
  };

  // Function to find variant ID based on selected options
  function findVariantId() {
    const variants = {{ product.variants | json }};
    const options = {{ product.options | json }};
    
    for (const variant of variants) {
      let match = true;
      for (let i = 0; i < options.length; i++) {
        const optionName = options[i].toLowerCase();
        const variantOptionValue = variant.options[i].toLowerCase();
        if (selectedOptions[optionName] !== variantOptionValue) {
          match = false;
          break;
        }
      }
      if (match) {
        return variant.id;
      }
    }
    return null;
  }

  // Handle color variant selection
  document.querySelectorAll('.color-btn').forEach(button => {
    button.addEventListener('click', function() {
      const color = this.getAttribute('data-scroll');
      document.querySelectorAll('.color-btn').forEach(btn => btn.classList.remove('active'));
      this.classList.add('active');
      
      // Update selected options
      selectedOptions['color'] = this.getAttribute('data-value');
      
      // Find and update variant ID
      const variantId = findVariantId();
      if (variantId) {
        const addToCartBtn = document.querySelector('.add-to-cart');
        if (addToCartBtn) {
          addToCartBtn.dataset.variantId = variantId;
        }
      }
    });
  });

  // Handle size variant selection
  document.querySelectorAll('.size-btn').forEach(button => {
    button.addEventListener('click', function() {
      const size = this.getAttribute('data-size');
      document.querySelectorAll('.size-btn').forEach(btn => btn.classList.remove('active'));
      this.classList.add('active');
      
      // Update selected options
      selectedOptions['size'] = this.getAttribute('data-value');
      
      // Find and update variant ID
      const variantId = findVariantId();
      if (variantId) {
        const addToCartBtn = document.querySelector('.add-to-cart');
        if (addToCartBtn) {
          addToCartBtn.dataset.variantId = variantId;
        }
      }
    });
  });

  // Initialize image zoom
  const zoomMain = document.querySelector('.tf-zoom-main');
  const zoomImages = document.querySelectorAll('.tf-image-zoom');
  
  zoomImages.forEach(image => {
    image.addEventListener('mousemove', function(e) {
      const rect = this.getBoundingClientRect();
      const x = e.clientX - rect.left;
      const y = e.clientY - rect.top;
      
      const xPercent = x / rect.width * 100;
      const yPercent = y / rect.height * 100;
      
      zoomMain.style.backgroundImage = `url(${this.getAttribute('data-zoom')})`;
      zoomMain.style.backgroundPosition = `${xPercent}% ${yPercent}%`;
      zoomMain.style.display = 'block';
    });
    
    image.addEventListener('mouseleave', function() {
      zoomMain.style.display = 'none';
    });
  });

  // Handle add to cart
  document.querySelectorAll('.add-to-cart').forEach(button => {
    button.addEventListener('click', async function(e) {
      e.preventDefault();
      
      // Prevent multiple clicks
      if (this.classList.contains('loading')) {
        return;
      }
      
      const variantId = this.dataset.variantId;
      const quantity = parseInt(this.dataset.quantity || 1);
      
      try {
        // Show loading state
        this.classList.add('loading');
        
        // Add item to cart
        if (window.cart) {
          await window.cart.updateQuantity(variantId, quantity, 'add');
          
          // Fetch updated cart data
          const response = await fetch('/cart.js');
          const cartData = await response.json();
          
          // Update cart drawer
          const cartDrawer = document.getElementById('shoppingCart');
          if (cartDrawer) {
            const itemsContainer = cartDrawer.querySelector('.tf-mini-cart-items');
            if (itemsContainer) {
              // Clear existing items
              itemsContainer.innerHTML = '';
              
              // Add all items from cart
              cartData.items.forEach(item => {
                const itemElement = document.createElement('div');
                itemElement.className = 'tf-mini-cart-item';
                itemElement.style.border = 'none';
                itemElement.style.borderBottom = 'none';
                itemElement.innerHTML = `
                  <div class="tf-mini-cart-image">
                    <a href="${item.url}">
                      <img class="lazyload" data-src="${item.image}" src="${item.image}" alt="${item.title}" loading="lazy">
                    </a>
                  </div>
                  <div class="tf-mini-cart-info">
                    <div class="d-flex justify-content-between">
                      <a class="title link text-md fw-medium" href="${item.url}">${item.title}</a>
                      <i class="icon icon-close remove" data-variant-id="${item.variant_id}" aria-label="Remove item"></i>
                    </div>
                    <div class="d-flex gap-10">
                      <div class="text-xs">${item.variant_title || ''}</div>
                      <a href="#" class="link edit"><i class="icon-pen"></i></a>
                    </div>
                    <div class="tf-mini-cart-item_price">
                      <p class="price-wrap text-sm fw-medium">
                        <span class="new-price text-primary">${formatMoney(item.final_price)}</span>
                      </p>
                    </div>
                    <div class="tf-mini-cart-item_quantity">
                      <div class="wg-quantity small">
                        <button class="btn-quantity btn-decrease" data-variant-id="${item.variant_id}">-</button>
                        <input type="text" class="quantity-product" value="${item.quantity}" min="0" data-variant-id="${item.variant_id}">
                        <button class="btn-quantity btn-increase" data-variant-id="${item.variant_id}">+</button>
                      </div>
                    </div>
                  </div>
                `;
                itemsContainer.appendChild(itemElement);
              });
              
              // Add event listeners for quantity buttons
              itemsContainer.querySelectorAll('.btn-decrease').forEach(button => {
                button.addEventListener('click', async function() {
                  const variantId = this.dataset.variantId;
                  const input = this.nextElementSibling;
                  const currentValue = parseInt(input.value);
                  if (currentValue > 1) {
                    await window.cart.updateQuantity(variantId, currentValue - 1, 'update');
                  } else {
                    await window.cart.removeItem(variantId);
                  }
                });
              });
  
              itemsContainer.querySelectorAll('.btn-increase').forEach(button => {
                button.addEventListener('click', async function() {
                  const variantId = this.dataset.variantId;
                  const input = this.previousElementSibling;
                  const currentValue = parseInt(input.value);
                  await window.cart.updateQuantity(variantId, currentValue + 1, 'update');
                });
              });

              itemsContainer.querySelectorAll('.quantity-product').forEach(input => {
                input.addEventListener('change', async function() {
                  const variantId = this.dataset.variantId;
                  const newValue = parseInt(this.value);
                  if (isNaN(newValue) || newValue < 1) {
                    if (newValue <= 0) {
                      await window.cart.removeItem(variantId);
                    } else {
                      this.value = 1;
                      await window.cart.updateQuantity(variantId, 1, 'update');
                    }
                  } else {
                    await window.cart.updateQuantity(variantId, newValue, 'update');
                  }
                });
              });

              // Add event listeners for remove buttons
              itemsContainer.querySelectorAll('.remove').forEach(button => {
                button.addEventListener('click', async function() {
                  const variantId = this.dataset.variantId;
                  await window.cart.removeItem(variantId);
                });
              });
              
              // Update cart total
              const totalElement = cartDrawer.querySelector('.cart-total-price');
              if (totalElement) {
                totalElement.textContent = formatMoney(cartData.total_price);
              }
              
              // Update header cart count
              const headerCount = document.querySelector('.count-box');
              if (headerCount) {
                headerCount.textContent = cartData.item_count;
              }
            }
          }
        }
      } catch (error) {
        console.error('Error adding item to cart:', error);
        alert('Failed to add item to cart. Please try again.');
      } finally {
        // Remove loading state
        this.classList.remove('loading');
      }
    });
  });

  // Initialize wishlist and compare buttons state
  if (window.wishlistCompare) {
    window.wishlistCompare.updateButtonsState();
  }

  // Handle sticky add to cart form
  const stickyForm = document.querySelector('.tf-sticky-btn-atc .product-form');
  if (stickyForm) {
    const variantSelect = stickyForm.querySelector('.variant-selector');
    const quantityInput = stickyForm.querySelector('.quantity-product');
    const addToCartBtn = stickyForm.querySelector('.add-to-cart');
    const minusBtn = stickyForm.querySelector('.minus-btn');
    const plusBtn = stickyForm.querySelector('.plus-btn');

    // Update variant ID when selection changes
    variantSelect.addEventListener('change', function() {
      addToCartBtn.dataset.variantId = this.value;
    });

    // Handle quantity buttons
    minusBtn.addEventListener('click', function() {
      const currentValue = parseInt(quantityInput.value);
      if (currentValue > 1) {
        quantityInput.value = currentValue - 1;
        addToCartBtn.dataset.quantity = quantityInput.value;
      }
    });

    plusBtn.addEventListener('click', function() {
      const currentValue = parseInt(quantityInput.value);
      quantityInput.value = currentValue + 1;
      addToCartBtn.dataset.quantity = quantityInput.value;
    });

    // Handle form submission
    stickyForm.addEventListener('submit', async function(e) {
      e.preventDefault();
      
      // Prevent multiple clicks
      if (addToCartBtn.classList.contains('loading')) {
        return;
      }
      
      const variantId = addToCartBtn.dataset.variantId;
      const quantity = parseInt(quantityInput.value);
      
      try {
        // Show loading state
        addToCartBtn.classList.add('loading');
        
        // Add item to cart
        if (window.cart) {
          await window.cart.updateQuantity(variantId, quantity, 'add');
          
          // Fetch updated cart data
          const response = await fetch('/cart.js');
          const cartData = await response.json();
          
          // Update cart drawer
          const cartDrawer = document.getElementById('shoppingCart');
          if (cartDrawer) {
            const itemsContainer = cartDrawer.querySelector('.tf-mini-cart-items');
            if (itemsContainer) {
              // Clear existing items
              itemsContainer.innerHTML = '';
              
              // Add all items from cart
              cartData.items.forEach(item => {
                const itemElement = document.createElement('div');
                itemElement.className = 'tf-mini-cart-item';
                itemElement.innerHTML = `
                  <div class="tf-mini-cart-item_img">
                    <img src="${item.image}" alt="${item.title}">
                  </div>
                  <div class="tf-mini-cart-info">
                    <div class="d-flex justify-content-between">
                      <a class="title link text-md fw-medium" href="${item.url}">${item.title}</a>
                      <i class="icon icon-close remove" data-variant-id="${item.variant_id}" aria-label="Remove item"></i>
                    </div>
                    <div class="d-flex gap-10">
                      <div class="text-xs">${item.variant_title || ''}</div>
                      <a href="#" class="link edit"><i class="icon-pen"></i></a>
                    </div>
                    <div class="tf-mini-cart-item_price">
                      <p class="price-wrap text-sm fw-medium">
                        <span class="new-price text-primary">${formatMoney(item.final_price)}</span>
                      </p>
                    </div>
                    <div class="tf-mini-cart-item_quantity">
                      <div class="wg-quantity small">
                        <button class="btn-quantity btn-decrease" data-variant-id="${item.variant_id}">-</button>
                        <input type="text" class="quantity-product" value="${item.quantity}" min="0" data-variant-id="${item.variant_id}">
                        <button class="btn-quantity btn-increase" data-variant-id="${item.variant_id}">+</button>
                      </div>
                    </div>
                  </div>
                `;
                itemsContainer.appendChild(itemElement);
              });
              
              // Update cart total
              const totalElement = cartDrawer.querySelector('.cart-total-price');
              if (totalElement) {
                totalElement.textContent = formatMoney(cartData.total_price);
              }
              
              // Update header cart count
              const headerCount = document.querySelector('.count-box');
              if (headerCount) {
                headerCount.textContent = cartData.item_count;
              }
            }
          }
        }
      } catch (error) {
        console.error('Error adding item to cart:', error);
        alert('Failed to add item to cart. Please try again.');
      } finally {
        // Remove loading state
        addToCartBtn.classList.remove('loading');
      }
    });
  }
});

// Helper function to format money
function formatMoney(cents) {
  return new Intl.NumberFormat('en-US', {
    style: 'currency',
    currency: '{{ shop.currency }}'
  }).format(cents / 100);
}
</script>

{% schema %}
{
  "name": "Product",
  "settings": [
    {
      "type": "select",
      "id": "layout",
      "label": "Product Layout",
      "options": [
        {
          "value": "default",
          "label": "Default"
        },
        {
          "value": "grid",
          "label": "Grid"
        },
        {
          "value": "stacked",
          "label": "Stacked"
        }
      ],
      "default": "default"
    },
    {
      "type": "header",
      "content": "Trust Seal Settings"
    },
    {
      "type": "checkbox",
      "id": "show_trust_seal",
      "label": "Show Trust Seal",
      "default": true
    },
    {
      "type": "text",
      "id": "trust_seal_text",
      "label": "Trust Seal Text",
      "default": "Guarantee Safe Checkout:"
    },
    {
      "type": "checkbox",
      "id": "show_sold_count",
      "label": "Show Sold Count",
      "default": true
    },
    {
      "type": "text",
      "id": "sold_count_text",
      "label": "Sold Count Text",
      "default": "30 sold in last 24 hours"
    },
    {
      "type": "checkbox",
      "id": "show_stock_count",
      "label": "Show Stock Count",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_size_guide",
      "label": "Show Size Guide",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_extra_links",
      "label": "Show Extra Links",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_delivery_info",
      "label": "Show Delivery Info",
      "default": true
    },
    {
      "type": "text",
      "id": "delivery_time",
      "label": "Delivery Time",
      "default": "3-5 days international"
    },
    {
      "type": "text",
      "id": "free_shipping_text",
      "label": "Free Shipping Text",
      "default": "all orders over $150"
    },
    {
      "type": "checkbox",
      "id": "show_fbt",
      "label": "Show Frequently Bought Together",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_sticky_cart",
      "label": "Show Sticky Add to Cart",
      "default": true
    }
  ],
  "blocks": [
    {
      "type": "payment_icon",
      "name": "Payment Icon",
      "limit": 7,
      "settings": [
        {
          "type": "image_picker",
          "id": "image",
          "label": "Payment Icon Image",
          "info": "Recommended size: 60x40px"
        },
        {
          "type": "text",
          "id": "title",
          "label": "Payment Method Name",
          "default": "Payment Method"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Product",
      "blocks": [
        {
          "type": "payment_icon"
        },
        {
          "type": "payment_icon"
        },
        {
          "type": "payment_icon"
        }
      ]
    }
  ]
}
{% endschema %}