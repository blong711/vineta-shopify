{%- comment -%}Recently Viewed Section{%- endcomment -%}

{%- comment -%}Get recently viewed products from localStorage via JavaScript{%- endcomment -%}
<section class="flat-spacing" id="recently-viewed-section" style="display: none;">
{% if section.settings.width == 'boxed' %}
  <div class="container">
{% endif %}
    <div class="flat-title wow fadeInUp">
      <h4 class="title">{{ section.settings.title }}</h4>
    </div>
    <div class="hover-sw-nav hover-sw-2 wow wrap-pos-nav sw-over-product fadeInUp">
      <div dir="ltr" class="swiper tf-swiper wrap-sw-over" data-swiper='{
        "slidesPerView": {{ section.settings.slides_per_view_mobile }},
        "spaceBetween": {{ section.settings.space_between }},
        "speed": 800,
        "observer": true,
        "observeParents": true,
        "slidesPerGroup": {{ section.settings.slides_per_view_mobile }},
        "navigation": {
          "clickable": true,
          "nextEl": ".nav-next-viewed",
          "prevEl": ".nav-prev-viewed"
        },
        "pagination": { "el": ".sw-pagination-viewed", "clickable": true },
        "breakpoints": {
          "768": { 
            "slidesPerView": {{ section.settings.slides_per_view_tablet }}, 
            "spaceBetween": {{ section.settings.space_between }}, 
            "slidesPerGroup": {{ section.settings.slides_per_view_tablet }}
          },
          "1200": { 
            "slidesPerView": {{ section.settings.slides_per_view_desktop }}, 
            "spaceBetween": {{ section.settings.space_between }}, 
            "slidesPerGroup": {{ section.settings.slides_per_view_desktop }}
          }
        }
      }'>
        <div class="swiper-wrapper" id="recently-viewed-products">
          <!-- Products will be populated by JavaScript -->
        </div>
        <div class="d-flex d-xl-none sw-dot-default sw-pagination-viewed justify-content-center"></div>
      </div>
      <div class="d-none d-xl-flex swiper-button-next nav-swiper nav-next-viewed"></div>
      <div class="d-none d-xl-flex swiper-button-prev nav-swiper nav-prev-viewed"></div>
    </div>
{% if section.settings.width == 'boxed' %}
  </div>
{% endif %}
</section>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const section = document.getElementById('recently-viewed-section');
  const productsContainer = document.getElementById('recently-viewed-products');
  
  if (!section || !productsContainer) return;
  
  // Function to render recently viewed products
  async function renderRecentlyViewedProducts() {
    if (typeof window.RecentlyViewedManager === 'undefined') {
      console.warn('RecentlyViewedManager not available');
      return;
    }
    
    // Get current product ID to exclude it from the list
    const currentProductId = {{ product.id | default: 'null' }};
    
    // Get recently viewed products (excluding current product)
    const recentlyViewed = window.RecentlyViewedManager.getProductsExcludingCurrent(
      currentProductId, 
      {{ section.settings.products_to_show }}
    );
    
    if (recentlyViewed.length === 0) {
      section.style.display = 'none';
      return;
    }
    
    // Show the section
    section.style.display = 'block';
    
    // Clear existing products
    productsContainer.innerHTML = '';
    
    // Fetch full product data for each recently viewed product
    const productPromises = recentlyViewed.map(async (product) => {
      try {
        const response = await fetch(`/products/${product.handle}.js`);
        if (!response.ok) throw new Error('Failed to fetch product data');
        const fullProduct = await response.json();
        
        // Ensure we have the image field for compare compatibility
        if (!fullProduct.image && fullProduct.featured_image) {
          fullProduct.image = fullProduct.featured_image;
        }
        
        return fullProduct;
      } catch (error) {
        console.error('Error fetching product data for', product.handle, error);
        // Return the basic product data if fetch fails, ensuring image field exists
        if (!product.image && product.featured_image) {
          product.image = product.featured_image;
        }
        return product;
      }
    });
    
    const fullProductData = await Promise.all(productPromises);
    
    // Render each product using the card-product snippet structure
    fullProductData.forEach(function(product) {
      const slide = document.createElement('div');
      slide.className = 'swiper-slide';
      
      // Create product card HTML that matches the card-product snippet structure
      slide.innerHTML = `
        <div class="card-product style-1" data-availability="${product.available ? 'In stock' : 'Out of stock'}" data-brand="${product.vendor || ''}">
          <div class="card-product-wrapper asp-ratio-1">
            <a href="${product.url}" class="product-img">
              ${product.featured_image ? 
                `<img class="img-product lazyloaded" src="${product.featured_image}" alt="${product.title}" loading="lazy">` :
                `<div class="placeholder-svg">${product.title}</div>`
              }
              ${product.images && product.images[1] ? 
                `<img class="img-hover lazyloaded" src="${product.images[1]}" alt="${product.title}" loading="lazy">` : ''
              }
            </a>
            
            ${product.compare_at_price && product.compare_at_price > product.price ? 
              `<div class="on-sale-wrap">
                <span class="on-sale-item">${Math.round((product.compare_at_price - product.price) / product.compare_at_price * 100)}% Off</span>
              </div>` : ''
            }
            
            ${product.available ? `
            <ul class="list-product-btn">
              <li>
                <a href="javascript:void(0);" 
                   class="box-icon hover-tooltip tooltip-left add-to-cart" 
                   data-variant-id="${product.variants ? product.variants[0].id : product.id}"
                   data-quantity="1"
                   aria-label="Add to cart">
                  <i class="icon icon-cart"></i>
                  <span class="tooltip">Add to cart</span>
                </a>
              </li>
              <li class="wishlist">
                <a href="javascript:void(0);" 
                   class="box-icon hover-tooltip tooltip-left" 
                   data-wishlist 
                   data-id="${product.id}" 
                   data-action="add"
                   aria-label="Add to wishlist">
                  <span class="icon icon-heart2"></span>
                  <span class="tooltip">Add to wishlist</span>
                </a>
              </li>
              <li>
                <a href="javascript:void(0);" 
                   class="box-icon hover-tooltip tooltip-left quickview" 
                   data-product-handle="${product.handle}"
                   data-product-id="${product.id}"
                   data-bs-toggle="modal" 
                   data-bs-target="#quickView">
                  <span class="icon icon-view"></span>
                  <span class="tooltip">Quick view</span>
                </a>
              </li>
              <li class="compare">
                <a href="javascript:void(0);" 
                   class="box-icon hover-tooltip tooltip-left" 
                   data-compare 
                   data-id="${product.id}" 
                   data-action="add"
                   aria-label="Add to compare">
                  <span class="icon icon-compare"></span>
                  <span class="tooltip">Add to compare</span>
                </a>
              </li>
            </ul>
            ` : ''}
          </div>
          
          <div class="card-product-info">
            <a href="${product.url}" class="name-product link fw-medium text-md">${product.title}</a>
            <p class="price-wrap fw-medium">
              ${product.compare_at_price && product.compare_at_price > product.price ? 
                `<span class="price-new text-primary">${formatMoney(product.price)}</span>
                 <span class="price-old">${formatMoney(product.compare_at_price)}</span>` :
                `<span class="price-new">${formatMoney(product.price)}</span>`
              }
            </p>
          </div>
        </div>
      `;
      
      productsContainer.appendChild(slide);
    });
    
    // Initialize product card functionality for the newly added products
    if (typeof ProductCard !== 'undefined') {
      try {
        ProductCard.initializeForDynamicProducts(productsContainer);
      } catch (error) {
        console.warn('Error initializing product card functionality for recently viewed products:', error);
      }
    } else {
      console.warn('ProductCard module not available for recently viewed products');
    }
    
    // Initialize quickview functionality for the newly added products
    if (typeof window.initQuickview === 'function') {
      try {
        window.initQuickview();
      } catch (error) {
        console.warn('Error initializing quickview functionality for recently viewed products:', error);
      }
    } else {
      // Fallback: manually initialize quickview for the new products
      const quickviewButtons = productsContainer.querySelectorAll('.quickview');
      quickviewButtons.forEach(button => {
        // Remove existing listeners to prevent duplicates
        const newButton = button.cloneNode(true);
        button.parentNode.replaceChild(newButton, button);
        
        // Add click event listener
        newButton.addEventListener('click', async function(e) {
          e.preventDefault();
          
          const productHandle = this.dataset.productHandle;
          const productId = this.dataset.productId;
          
          if (!productHandle) {
            console.error('No product handle found for quickview');
            return;
          }
          
          // Show modal immediately
          const modal = document.getElementById('quickView');
          if (!modal) {
            console.error('Quickview modal not found');
            return;
          }
          
          try {
            // Fetch product data
            const response = await fetch(`/products/${productHandle}.js`);
            if (!response.ok) throw new Error('Failed to fetch product data');
            const productData = await response.json();
            
            // Update modal content with the fetched product data
            updateQuickviewModal(modal, productData);
            
            // Show the modal using Bootstrap
            if (typeof bootstrap !== 'undefined' && bootstrap.Modal) {
              const bootstrapModal = new bootstrap.Modal(modal);
              bootstrapModal.show();
            } else {
              // Fallback: show modal manually
              modal.style.display = 'block';
              modal.classList.add('show');
              document.body.classList.add('modal-open');
              
              // Add backdrop
              const backdrop = document.createElement('div');
              backdrop.className = 'modal-backdrop fade show';
              document.body.appendChild(backdrop);
              
              // Handle close
              const closeModal = () => {
                modal.style.display = 'none';
                modal.classList.remove('show');
                document.body.classList.remove('modal-open');
                if (backdrop.parentNode) {
                  backdrop.parentNode.removeChild(backdrop);
                }
              };
              
              // Add close event listeners
              modal.querySelector('.icon-close').addEventListener('click', closeModal);
              backdrop.addEventListener('click', closeModal);
            }
            
          } catch (error) {
            console.error('Error loading product data for quickview:', error);
          }
        });
      });
    }
    
    // Reinitialize Swiper if it exists
    if (window.recentlyViewedSwiper) {
      window.recentlyViewedSwiper.update();
    }
  }
  
  // Helper function to format money using Shopify's money format
  function formatMoney(cents) {
    if (typeof cents !== 'number') return '';
    
    // Try to use Shopify's money format if available
    if (typeof window.Shopify !== 'undefined' && window.Shopify.formatMoney) {
      return window.Shopify.formatMoney(cents);
    }
    
    // Fallback to basic formatting
    const dollars = cents / 100;
    return '$' + dollars.toFixed(2);
  }
  
  // Helper function to update quickview modal content
  function updateQuickviewModal(modal, product) {
    // Update product title
    const titleElement = modal.querySelector('.product-info-name');
    if (titleElement) titleElement.textContent = product.title;
    
    // Update price
    const priceContainer = modal.querySelector('.product-info-price');
    if (priceContainer) {
      if (product.compare_at_price > product.price) {
        const discountPercentage = Math.round(((product.compare_at_price - product.price) / product.compare_at_price) * 100);
        priceContainer.innerHTML = `
          <h6 class="price-new price-on-sale">${formatMoney(product.price)}</h6>
          <h6 class="price-old">${formatMoney(product.compare_at_price)}</h6>
          <span class="badge-sale">${discountPercentage}% Off</span>
        `;
      } else {
        priceContainer.innerHTML = `
          <h6 class="price-new">${formatMoney(product.price)}</h6>
        `;
      }
    }
    
    // Update description
    const textElement = modal.querySelector('.text');
    if (textElement) {
      textElement.textContent = product.description.replace(/<[^>]*>/g, '').split(' ').slice(0, 30).join(' ') + '...';
    }
    
    // Update media gallery
    const swiperWrapper = modal.querySelector('.swiper-wrapper');
    if (swiperWrapper && product.media) {
      swiperWrapper.innerHTML = product.media.map(media => `
        <div class="swiper-slide" data-media-id="${media.id}">
          <div class="item">
            ${media.media_type === 'image' 
              ? `<img class="lazyload" data-src="${media.src}" src="${media.src}" alt="${media.alt || product.title}">`
              : `<video controls class="w-100"><source src="${media.sources[0].url}" type="video/mp4"></video>`
            }
          </div>
        </div>
      `).join('');
      
      // Reinitialize Swiper for the quickview modal
      if (window.quickviewSwiper) {
        window.quickviewSwiper.destroy(true, true);
      }
      window.quickviewSwiper = new Swiper('.tf-single-slide', {
        slidesPerView: 1,
        spaceBetween: 0,
        loop: false,
        navigation: {
          nextEl: '.single-slide-next',
          prevEl: '.single-slide-prev',
        }
      });
    }
    
    // Update variant selection if available
    if (product.variants && product.variants.length > 0) {
      const variantSelect = modal.querySelector('select[data-variant-id]');
      if (variantSelect) {
        variantSelect.innerHTML = product.variants.map(variant => 
          `<option value="${variant.id}">${variant.title}</option>`
        ).join('');
        variantSelect.value = product.variants[0].id;
        variantSelect.dataset.variantId = product.variants[0].id;
      }
      
      // Update add to cart button
      const addToCartBtn = modal.querySelector('.add-to-cart');
      if (addToCartBtn) {
        addToCartBtn.dataset.variantId = product.variants[0].id;
        addToCartBtn.dataset.productId = product.id;
      }
      
      // Update buy now button
      const buyNowBtn = modal.querySelector('.buy-now-btn');
      if (buyNowBtn) {
        buyNowBtn.dataset.productId = product.id;
      }
    }
  }
  
  // Initial render
  renderRecentlyViewedProducts();
  
  // Listen for updates to recently viewed products
  window.addEventListener('recentlyViewedUpdated', function() {
    renderRecentlyViewedProducts();
  });
  
  // Re-render when section becomes visible (for lazy loading)
  const observer = new IntersectionObserver(function(entries) {
    entries.forEach(function(entry) {
      if (entry.isIntersecting) {
        renderRecentlyViewedProducts();
      }
    });
  });
  
  observer.observe(section);
});
</script>

{% schema %}
{
  "name": "Recently Viewed",
  "settings": [
    {
      "type": "text",
      "id": "title",
      "label": "Title",
      "default": "Recently Viewed"
    },
    {
      "type": "select",
      "id": "width",
      "label": "Section width",
      "options": [
        {
          "value": "full",
          "label": "Full width"
        },
        {
          "value": "boxed",
          "label": "Boxed"
        }
      ],
      "default": "boxed"
    },
    {
      "type": "range",
      "id": "products_to_show",
      "min": 4,
      "max": 12,
      "step": 2,
      "default": 8,
      "label": "Number of products to show"
    },
    {
      "type": "range",
      "id": "slides_per_view_mobile",
      "min": 1,
      "max": 3,
      "step": 1,
      "default": 2,
      "label": "Slides per view (mobile)"
    },
    {
      "type": "range",
      "id": "slides_per_view_tablet",
      "min": 2,
      "max": 4,
      "step": 1,
      "default": 3,
      "label": "Slides per view (tablet)"
    },
    {
      "type": "range",
      "id": "slides_per_view_desktop",
      "min": 3,
      "max": 6,
      "step": 1,
      "default": 4,
      "label": "Slides per view (desktop)"
    },
    {
      "type": "range",
      "id": "space_between",
      "min": 0,
      "max": 30,
      "step": 2,
      "default": 12,
      "label": "Space between slides"
    }
  ],
  "presets": [
    {
      "name": "Recently Viewed",
      "category": "Product slider"
    }
  ]
}
{% endschema %}