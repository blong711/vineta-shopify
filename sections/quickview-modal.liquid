{%- comment -%}Quickview Modal Section{%- endcomment -%}

<style>
.modal-quick-view {
  z-index: 1060 !important;
}
.modal-quick-view .modal-dialog {
  z-index: 1060 !important;
}
.modal-backdrop {
  z-index: 1055 !important;
}
</style>

<div class="modal fade modalCentered modal-quick-view" id="quickView">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <span class="icon-close icon-close-popup" data-bs-dismiss="modal"></span>
            <div class="tf-product-media-wrap">
                <div dir="ltr" class="swiper tf-single-slide">
                    <div class="swiper-wrapper">
                        {%- for media in product.media -%}
                            <div class="swiper-slide" data-media-id="{{ media.id }}">
                                <div class="item">
                                    {%- if media.media_type == 'image' -%}
                                        <img class="lazyload" 
                                            data-src="{{ media | img_url: 'master' }}"
                                            src="{{ media | img_url: '400x' }}" 
                                            width="{{ media.width }}"
                                            height="{{ media.height }}"
                                            alt="{{ media.alt | escape }}">
                                    {%- elsif media.media_type == 'video' -%}
                                        {{ media | video_tag: controls: true, class: 'w-100' }}
                                    {%- endif -%}
                                </div>
                            </div>
                        {%- endfor -%}
                    </div>
                    <div class="swiper-button-prev nav-swiper arrow-1 nav-prev-cls single-slide-prev"></div>
                    <div class="swiper-button-next nav-swiper arrow-1 nav-next-cls single-slide-next"></div>
                </div>
            </div>
            <div class="tf-product-info-wrap">
                <div class="tf-product-info-inner">
                    <div class="tf-product-info-heading">
                        <h6 class="product-info-name">{{ product.title }}</h6>
                        <div class="product-info-price">
                            {%- if product.compare_at_price > product.price -%}
                                <h6 class="price-new price-on-sale">{{ product.price | money }}</h6>
                                <h6 class="price-old">{{ product.compare_at_price | money }}</h6>
                            {%- else -%}
                                <h6 class="price-new">{{ product.price | money }}</h6>
                            {%- endif -%}
                        </div>
                        <p class="text">{{ product.description | strip_html | truncatewords: 30 }}</p>
                    </div>
                    <div class="tf-product-info-variant">
                        {%- unless product.has_only_default_variant -%}
                            {%- for option in product.options_with_values -%}
                                <div class="variant-picker-item variant-{{ option.name | handle }}">
                                    <div class="variant-picker-label">
                                        {{ option.name }}:<span class="variant-picker-label-value value-current{{ option.name | handle }}">{{ option.selected_value }}</span>
                                    </div>
                                    <div class="variant-picker-values">
                                        {%- for value in option.values -%}
                                            {%- if option.name == 'Color' or option.name == 'Colour' -%}
                                                <div class="hover-tooltip color-btn{% if value == option.selected_value %} active{% endif %}" 
                                                     data-option-name="{{ option.name }}"
                                                     data-option-value="{{ value | escape }}">
                                                    <span class="check-color bg-{{ value | handle }}"></span>
                                                    <span class="tooltip">{{ value }}</span>
                                                </div>
                                            {%- else -%}
                                                <span class="size-btn{% if value == option.selected_value %} active{% endif %}" 
                                                      data-option-name="{{ option.name }}"
                                                      data-option-value="{{ value | escape }}">
                                                    {{ value }}
                                                </span>
                                            {%- endif -%}
                                        {%- endfor -%}
                                    </div>
                                </div>
                            {%- endfor -%}
                        {%- endunless -%}
                    </div>
                    <div class="tf-product-total-quantity">
                        <div class="group-btn">
                            <div class="wg-quantity">
                                <button class="btn-quantity minus-btn">-</button>
                                <input class="quantity-product font-4" type="text" name="quantity" value="1" min="1">
                                <button class="btn-quantity plus-btn">+</button>
                            </div>
                            <button type="button" class="tf-btn hover-primary add-to-cart" data-product-id="{{ product.id }}" data-variant-id="{{ product.variants.first.id }}">
                                Add to cart
                            </button>
                        </div>
                        <button type="button" class="tf-btn w-100 animate-btn buy-now-btn btn-primary" data-product-id="{{ product.id }}">
                            Buy It Now
                        </button>
                        <a href="{{ product.url }}" class="more-choose-payment link">More payment options</a>
                    </div>
                    <a href="{{ product.url }}" class="view-details link">View full details <i class="icon icon-arrow-right"></i></a>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  console.log('DOM Content Loaded');
  let selectedVariant = null;
  let currentProduct = null;
  let productCache = new Map(); // Cache for product data

  // Initialize quickview functionality
  function initQuickview() {
    console.log('Initializing quickview');
    const quickviewButtons = document.querySelectorAll('.quickview');
    console.log('Found quickview buttons:', quickviewButtons.length);

    // Preload product data for all quickview buttons
    quickviewButtons.forEach(button => {
      const productHandle = button.dataset.productHandle;
      if (productHandle && !productCache.has(productHandle)) {
        preloadProductData(productHandle);
      }
    });

    quickviewButtons.forEach(button => {
      button.addEventListener('click', handleQuickviewClick);
    });
  }

  // Preload product data
  async function preloadProductData(productHandle) {
    try {
      const response = await fetch(`/products/${productHandle}.js`);
      const productData = await response.json();
      productCache.set(productHandle, productData);
      console.log('Preloaded product:', productHandle);
    } catch (error) {
      console.error('Error preloading product:', error);
    }
  }

  // Handle quickview button click
  async function handleQuickviewClick(e) {
    e.preventDefault();
    console.log('Quickview button clicked');
    
    const productHandle = this.dataset.productHandle;
    const productId = this.dataset.productId;
    
    // Show modal immediately
    const modal = document.getElementById('quickView');
    if (!modal) {
      console.error('Quickview modal not found');
      return;
    }

    try {
      // Get product data from cache or fetch it
      if (!productCache.has(productHandle)) {
        modal.classList.add('loading');
        await preloadProductData(productHandle);
      }
      
      currentProduct = productCache.get(productHandle);
      if (!currentProduct) {
        throw new Error('Failed to load product data');
      }

      // Set initial selected variant
      selectedVariant = currentProduct.variants[0];
      
      // Update modal content
      updateModalContent(modal);
      
      // Initialize variant selection
      initVariantSelection(modal);
      
    } catch (error) {
      console.error('Error loading product data:', error);
    } finally {
      modal.classList.remove('loading');
    }
  }

  // Update modal content
  function updateModalContent(modal) {
    // Update product title
    modal.querySelector('.product-info-name').textContent = currentProduct.title;
    
    // Update price
    const priceContainer = modal.querySelector('.product-info-price');
    if (selectedVariant.compare_at_price > selectedVariant.price) {
      priceContainer.innerHTML = `
        <h6 class="price-new price-on-sale">${formatMoney(selectedVariant.price)}</h6>
        <h6 class="price-old">${formatMoney(selectedVariant.compare_at_price)}</h6>
      `;
    } else {
      priceContainer.innerHTML = `
        <h6 class="price-new">${formatMoney(selectedVariant.price)}</h6>
      `;
    }
    
    // Update description
    modal.querySelector('.text').textContent = currentProduct.description.replace(/<[^>]*>/g, '').split(' ').slice(0, 30).join(' ') + '...';
    
    // Update media gallery
    const swiperWrapper = modal.querySelector('.swiper-wrapper');
    swiperWrapper.innerHTML = currentProduct.media.map(media => `
      <div class="swiper-slide" data-media-id="${media.id}">
        <div class="item">
          ${media.media_type === 'image' 
            ? `<img class="lazyload" data-src="${media.src}" src="${media.src}" alt="${media.alt || currentProduct.title}">`
            : `<video controls class="w-100"><source src="${media.sources[0].url}" type="video/mp4"></video>`
          }
        </div>
      </div>
    `).join('');
    
    // Update variant options
    const variantContainer = modal.querySelector('.tf-product-info-variant');
    if (!variantContainer) {
      console.error('Variant container not found');
      return;
    }

    if (currentProduct.variants.length > 1) {
      console.log('Product has variants, updating variant options');
      variantContainer.innerHTML = currentProduct.options.map(option => `
        <div class="variant-picker-item variant-${option.name.toLowerCase()}">
          <div class="variant-picker-label">
            ${option.name}:<span class="variant-picker-label-value value-current${option.name.toLowerCase()}">${option.values[0]}</span>
          </div>
          <div class="variant-picker-values">
            ${option.values.map(value => `
              ${option.name.toLowerCase() === 'color' || option.name.toLowerCase() === 'colour'
                ? `<div class="hover-tooltip color-btn${value === option.values[0] ? ' active' : ''}" data-option-name="${option.name}" data-option-value="${value}">
                    <span class="check-color bg-${value.toLowerCase()}"></span>
                    <span class="tooltip">${value}</span>
                  </div>`
                : `<span class="size-btn${value === option.values[0] ? ' active' : ''}" data-option-name="${option.name}" data-option-value="${value}">${value}</span>`
              }
            `).join('')}
          </div>
        </div>
      `).join('');
    } else {
      variantContainer.innerHTML = '';
    }
  }

  // Initialize variant selection
  function initVariantSelection(modal) {
    const variantContainer = modal.querySelector('.tf-product-info-variant');
    if (!variantContainer) return;

    console.log('Initializing variant selection');
    
    // Use event delegation for variant selection
    variantContainer.addEventListener('click', function(e) {
      const button = e.target.closest('.color-btn, .size-btn');
      if (!button) return;
      
      e.preventDefault();
      console.log('Button clicked:', button.dataset.optionName, button.dataset.optionValue);
      
      const optionName = button.dataset.optionName;
      const optionValue = button.dataset.optionValue;
      
      // Update selected value display
      const valueDisplay = variantContainer.querySelector(`.value-current${optionName.toLowerCase()}`);
      if (valueDisplay) {
        valueDisplay.textContent = optionValue;
      }
      
      // Remove active class from all buttons in this option group
      const optionGroup = variantContainer.querySelectorAll(`[data-option-name="${optionName}"]`);
      console.log('Found option group:', optionGroup.length);
      optionGroup.forEach(btn => {
        btn.classList.remove('active');
      });
      
      // Add active class to clicked button
      button.classList.add('active');
      console.log('Added active class to:', button);
      
      // Find matching variant
      const selectedOptions = {};
      variantContainer.querySelectorAll('.variant-picker-item').forEach(item => {
        const name = item.querySelector('.variant-picker-label').textContent.split(':')[0].trim();
        const activeBtn = item.querySelector('.active');
        if (activeBtn) {
          const value = activeBtn.dataset.optionValue;
          selectedOptions[name] = value;
        }
      });
      console.log('Selected options:', selectedOptions);
      
      selectedVariant = currentProduct.variants.find(variant => {
        return Object.keys(selectedOptions).every(option => 
          variant[`option${currentProduct.options.findIndex(o => o.name === option) + 1}`] === selectedOptions[option]
        );
      });
      console.log('Selected variant:', selectedVariant);
      
      // Update price
      if (selectedVariant) {
        const priceContainer = modal.querySelector('.product-info-price');
        if (selectedVariant.compare_at_price > selectedVariant.price) {
          priceContainer.innerHTML = `
            <h6 class="price-new price-on-sale">${formatMoney(selectedVariant.price)}</h6>
            <h6 class="price-old">${formatMoney(selectedVariant.compare_at_price)}</h6>
          `;
        } else {
          priceContainer.innerHTML = `
            <h6 class="price-new">${formatMoney(selectedVariant.price)}</h6>
          `;
        }

        // Update product image if variant has an image
        if (selectedVariant.featured_image) {
          console.log('Variant has featured image:', selectedVariant.featured_image);
          const swiperWrapper = modal.querySelector('.swiper-wrapper');
          const slides = swiperWrapper.querySelectorAll('.swiper-slide');
          
          console.log('Total slides:', slides.length);
          
          // Find the index of the slide with the variant image
          let variantSlideIndex = -1;
          slides.forEach((slide, index) => {
            const mediaId = slide.dataset.mediaId;
            console.log('Checking slide', index, 'with mediaId:', mediaId);
            const matchingMedia = currentProduct.media.find(m => m.id === parseInt(mediaId));
            console.log('Matching media:', matchingMedia);
            if (matchingMedia?.id === selectedVariant.featured_image.id) {
              variantSlideIndex = index;
              console.log('Found matching slide at index:', index);
            }
          });

          console.log('Final variant slide index:', variantSlideIndex);

          if (variantSlideIndex !== -1) {
            // Update swiper to show the variant image
            if (window.swiper) {
              console.log('Sliding to index:', variantSlideIndex);
              window.swiper.slideTo(variantSlideIndex, 300);
            } else {
              console.log('Swiper not found');
            }
          } else {
            console.log('Variant image not found in slides, updating first slide');
            // If variant image not found, update the first slide
            const firstSlide = slides[0];
            if (firstSlide) {
              const images = firstSlide.querySelectorAll('img');
              images.forEach(img => {
                img.setAttribute('data-src', selectedVariant.featured_image.src);
                img.setAttribute('src', selectedVariant.featured_image.src);
                img.setAttribute('alt', selectedVariant.featured_image.alt || currentProduct.title);
              });
              
              // Slide to first slide
              if (window.swiper) {
                console.log('Sliding to first slide');
                window.swiper.slideTo(0, 300);
              } else {
                console.log('Swiper not found');
              }
            }
          }
        } else {
          console.log('Variant has no featured image');
        }
      }
    });
  }

  // Initialize everything
  initQuickview();
});

// Helper function to format money
function formatMoney(cents) {
  return new Intl.NumberFormat('en-US', {
    style: 'currency',
    currency: '{{ shop.currency }}'
  }).format(cents / 100);
}
</script>

{% schema %}    
{
  "name": "Quickview Modal",
  "settings": [],
  "presets": [
    {
      "name": "Quickview Modal"
    }
  ]
}
{% endschema %} 