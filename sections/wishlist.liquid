{%- comment -%}Wishlist Section{%- endcomment -%}
<section class="flat-spacing-13 pb-0">
  <div class="container">
    <div class="row">
      <div class="col-lg-12">
        <div class="wrapper-shop tf-grid-layout tf-col-2 lg-col-3 xl-col-4 style-1" id="gridLayout">
        </div>
      </div>
    </div>
  </div>
</section>

{% schema %}
{
  "name": "Wishlist",
  "settings": [
    {
      "type": "range",
      "id": "products_per_page",
      "min": 4,
      "max": 24,
      "step": 4,
      "label": "Products per page",
      "default": 12
    }
  ]
}
{% endschema %}

<script>
document.addEventListener('DOMContentLoaded', function() {
  const gridLayout = document.getElementById('gridLayout');
  
  function updateWishlistDisplay() {
    const wishlistIds = localStorage.getItem('theme4:wishlist:id') ? localStorage.getItem('theme4:wishlist:id').split(',') : [];
    console.log('Wishlist IDs from localStorage:', wishlistIds);
    
    if (wishlistIds.length === 0) {
      gridLayout.innerHTML = '';
      return;
    }

    // Clean up the IDs and ensure they're numbers
    const cleanWishlistIds = wishlistIds.map(id => id.trim()).filter(id => id);
    console.log('Cleaned wishlist IDs:', cleanWishlistIds);
    
    // Create a map of product IDs for faster lookup
    const wishlistIdMap = new Set(cleanWishlistIds);
    console.log('Wishlist ID Map:', Array.from(wishlistIdMap));
    
    // Function to fetch all products with pagination
    function fetchAllProducts(page = 1, limit = 250) {
      return fetch(`/products.json?page=${page}&limit=${limit}`)
        .then(response => response.json())
        .then(data => {
          const products = data.products;
          if (products.length === limit) {
            // If we got a full page, there might be more
            return fetchAllProducts(page + 1, limit)
              .then(nextProducts => [...products, ...nextProducts]);
          }
          return products;
        });
    }
    
    // Fetch all products
    fetchAllProducts()
      .then(allProducts => {
        console.log('All fetched products:', allProducts);
        
        // Filter to only include wishlist products
        const products = allProducts.filter(product => {
          const productId = product.id.toString();
          const isInWishlist = wishlistIdMap.has(productId);
          console.log(`Product ${productId} (${product.title}) in wishlist:`, isInWishlist);
          return isInWishlist;
        });
        
        console.log('Filtered products:', products);
        console.log('Expected products count:', cleanWishlistIds.length);
        console.log('Actual products count:', products.length);
        
        // Find missing product IDs
        const missingIds = cleanWishlistIds.filter(id => !products.some(p => p.id.toString() === id));
        console.log('Missing product IDs:', missingIds);
        
        if (missingIds.length > 0) {
          // Try to fetch missing products individually
          Promise.all(missingIds.map(id => 
            fetch(`/products.json?ids=${id}`)
              .then(response => response.json())
              .then(data => data.products[0])
          ))
          .then(missingProducts => {
            const allProducts = [...products, ...missingProducts.filter(p => p)];
            displayProducts(allProducts, cleanWishlistIds);
          })
          .catch(error => {
            console.error('Error fetching missing products:', error);
            displayProducts(products, cleanWishlistIds);
          });
        } else {
          displayProducts(products, cleanWishlistIds);
        }
      })
      .catch(error => {
        console.error('Error fetching wishlist products:', error);
        gridLayout.innerHTML = '';
      });
  }

  function displayProducts(products, cleanWishlistIds) {
    if (products.length === 0) {
      console.log('No matching products found');
      gridLayout.innerHTML = '';
      return;
    }
    
    // Sort products to match the order in wishlistIds
    const sortedProducts = products.sort((a, b) => {
      const aIndex = cleanWishlistIds.indexOf(a.id.toString());
      const bIndex = cleanWishlistIds.indexOf(b.id.toString());
      console.log(`Sorting: ${a.id} (${a.title}) at index ${aIndex}, ${b.id} (${b.title}) at index ${bIndex}`);
      return aIndex - bIndex;
    });
    
    console.log('Sorted products:', sortedProducts.map(p => ({ id: p.id, title: p.title })));
    
    const wishlistHTML = sortedProducts.map(product => {
      console.log('Processing product:', product.id, product.title);
      return `
      <div class="card-product grid file-delete style-wishlist style-3 ${!product.variants[0].available ? 'out-of-stock' : ''}" data-product-id="${product.id}">
        <i class="icon icon-close remove" data-wishlist data-id="${product.id}" data-action="remove"></i>
            <div class="card-product-wrapper">
              <a href="/products/${product.handle}" class="product-img">
                <img class="img-product lazyload"
              data-src="${product.featured_image ? product.featured_image.src : product.images[0].src}"
              src="${product.featured_image ? product.featured_image.src : product.images[0].src}"
              alt="${product.title}">
            ${product.images[1] ? `
              <img class="img-hover lazyload"
                data-src="${product.images[1].src}"
                src="${product.images[1].src}"
                  alt="${product.title}">
            ` : ''}
          </a>
          <ul class="list-product-btn">
            <li>
              <a href="javascript:void(0);" 
                 class="box-icon hover-tooltip add-to-cart" 
                 data-variant-id="${product.variants[0].id}"
                 data-quantity="1"
                 aria-label="Add to cart">
                <span class="icon icon-cart2"></span>
                <span class="tooltip">Add to Cart</span>
              </a>
            </li>
            <li>
              <a href="javascript:void(0);" 
                 class="box-icon hover-tooltip quickview" 
                 data-product-handle="${product.handle}"
                 data-product-id="${product.id}"
                 data-bs-toggle="modal" 
                 data-bs-target="#quickView">
                <span class="icon icon-view"></span>
                <span class="tooltip">Quick View</span>
              </a>
            </li>
            <li class="compare">
              <a href="javascript:void(0);" 
                 class="box-icon hover-tooltip tooltip-left" 
                 data-compare 
                 data-id="${product.id}" 
                 data-action="add"
                 aria-label="Add to compare">
                <span class="icon icon-compare"></span>
                <span class="tooltip">Add to Compare</span>
              </a>
            </li>
          </ul>
          ${!product.variants[0].available ? '<div class="sold-out-badge">Sold Out</div>' : ''}
            </div>
            <div class="card-product-info">
              <a href="/products/${product.handle}" class="name-product link fw-medium text-md">${product.title}</a>
              <p class="price-wrap fw-medium">
                <span class="price-new text-primary">${formatMoney(product.variants[0].price * 100)}</span>
                ${product.variants[0].compare_at_price > product.variants[0].price ? 
                  `<span class="price-old">${formatMoney(product.variants[0].compare_at_price * 100)}</span>` : ''}
              </p>
              ${product.variants.length > 1 ? `
                <ul class="list-color-product">
                  ${product.options.map(option => {
                    if (option.name.toLowerCase() === 'color' || option.name.toLowerCase() === 'colour') {
                      return option.values.map(value => {
                        const variant = product.variants.find(v => v.option1 === value);
                        return `
                          <li class="list-color-item color-swatch hover-tooltip tooltip-bot ${value === option.values[0] ? 'active' : ''}"
                              data-variant-id="${variant.id}"
                              data-option-name="${option.name}"
                              data-option-value="${value}">
                            <span class="tooltip color-filter">${value}</span>
                            <span class="swatch-value bg-${value.toLowerCase().replace(/\s+/g, '-')}"></span>
                            ${variant.featured_image ? `
                              <img class="lazyload" 
                                data-src="${variant.featured_image.src}" 
                                src="${variant.featured_image.src}" 
                                alt="${value}"
                                loading="lazy">
                            ` : ''}
                          </li>
                        `;
                      }).join('');
                    }
                    return '';
                  }).join('')}
                </ul>
              ` : ''}
            </div>
        </div>
      `;
    });

    gridLayout.innerHTML = wishlistHTML.join('');
    
    // Add click event listeners to remove buttons
    const removeButtons = gridLayout.querySelectorAll('[data-wishlist][data-action="remove"]');
    removeButtons.forEach(button => {
      button.addEventListener('click', function(e) {
        e.preventDefault();
        const productId = this.getAttribute('data-id');
        const productCard = this.closest('.card-product');
        
        // Remove from localStorage
        const wishlistIds = localStorage.getItem('theme4:wishlist:id') ? localStorage.getItem('theme4:wishlist:id').split(',') : [];
        const updatedIds = wishlistIds.filter(id => id !== productId);
        localStorage.setItem('theme4:wishlist:id', updatedIds.join(','));
        
        // Remove the product card from UI
        productCard.remove();
        
        // Update wishlist count if available
        if (window.wishlistCompare) {
          window.wishlistCompare.updateWishlistCount();
        }
        
        // Show empty state if no products left
        if (updatedIds.length === 0) {
          // Remove all product cards
          const allProductCards = gridLayout.querySelectorAll('.card-product');
          allProductCards.forEach(card => card.remove());
          
          // Remove the event listener to prevent refresh
          document.removeEventListener('wishlist:updated', updateWishlistDisplay);
        } else {
          // Only dispatch event if there are still products
          document.dispatchEvent(new CustomEvent('wishlist:updated'));
        }
      });
    });

    // Clear any existing event listeners on add-to-cart buttons
    document.querySelectorAll('.add-to-cart').forEach(button => {
      // Clone the node to remove all event listeners
      const newButton = button.cloneNode(true);
      button.parentNode.replaceChild(newButton, button);
    });
    
    // Re-attach event listeners for add-to-cart buttons
    document.querySelectorAll('.add-to-cart').forEach(button => {
      button.addEventListener('click', async function(e) {
        e.preventDefault();
        e.stopPropagation(); // Stop event propagation
        
        // Prevent multiple clicks
        if (this.classList.contains('loading')) {
          return;
        }
        
        const variantId = this.dataset.variantId;
        const quantity = parseInt(this.dataset.quantity || 1);
        
        try {
          // Show loading state
          this.classList.add('loading');
          
          // Add item to cart exactly once
          if (window.cart) {
            console.log(`Adding to cart: variant ${variantId}, quantity ${quantity}`);
            await window.cart.updateQuantity(variantId, quantity, 'add');
            
            // Fetch updated cart data
            const response = await fetch('/cart.js');
            const cartData = await response.json();
            
            // Update cart drawer with all items
            const cartDrawer = document.getElementById('shoppingCart');
            if (cartDrawer) {
              const itemsContainer = cartDrawer.querySelector('.tf-mini-cart-items');
              if (itemsContainer) {
                // Clear existing items
                itemsContainer.innerHTML = '';
                
                // Add all items from cart
                cartData.items.forEach(item => {
                  const itemElement = document.createElement('div');
                  itemElement.className = 'tf-mini-cart-item';
                  itemElement.style.border = 'none';
                  itemElement.style.borderBottom = 'none';
                  itemElement.innerHTML = `
                    <div class="tf-mini-cart-image">
                      <a href="${item.url}">
                        <img class="lazyload" data-src="${item.image}" src="${item.image}" alt="${item.title}" loading="lazy">
                      </a>
                    </div>
                    <div class="tf-mini-cart-info">
                      <div class="d-flex justify-content-between">
                        <a class="title link text-md fw-medium" href="${item.url}">${item.title}</a>
                        <i class="icon icon-close remove fs-12" data-variant-id="${item.variant_id}" aria-label="Remove item"></i>
                      </div>
                      <div class="d-flex gap-10">
                        <div class="text-xs">${item.variant_title || ''}</div>
                        <a href="#" class="link edit"><i class="icon-pen"></i></a>
                      </div>
                      <div class="tf-mini-cart-item_price">
                        <p class="price-wrap text-sm fw-medium">
                          <span class="new-price text-primary">${formatMoney(item.final_price)}</span>
                        </p>
                      </div>
                      <div class="tf-mini-cart-item_quantity">
                        <div class="wg-quantity small">
                          <button class="btn-quantity btn-decrease" data-variant-id="${item.variant_id}">-</button>
                          <input type="text" class="quantity-product" value="${item.quantity}" min="0" data-variant-id="${item.variant_id}">
                          <button class="btn-quantity btn-increase" data-variant-id="${item.variant_id}">+</button>
                        </div>
                      </div>
                    </div>
                  `;
                  itemsContainer.appendChild(itemElement);
                });
                
                // Add event listeners for quantity buttons
                itemsContainer.querySelectorAll('.btn-decrease').forEach(button => {
                  button.addEventListener('click', async function() {
                    const variantId = this.dataset.variantId;
                    const input = this.nextElementSibling;
                    const currentValue = parseInt(input.value);
                    if (currentValue > 1) {
                      await window.cart.updateQuantity(variantId, currentValue - 1, 'update');
                    } else {
                      await window.cart.removeItem(variantId);
                    }
                  });
                });

                itemsContainer.querySelectorAll('.btn-increase').forEach(button => {
                  button.addEventListener('click', async function() {
                    const variantId = this.dataset.variantId;
                    const input = this.previousElementSibling;
                    const currentValue = parseInt(input.value);
                    await window.cart.updateQuantity(variantId, currentValue + 1, 'update');
                  });
                });

                itemsContainer.querySelectorAll('.quantity-product').forEach(input => {
                  input.addEventListener('change', async function() {
                    const variantId = this.dataset.variantId;
                    const newValue = parseInt(this.value);
                    if (isNaN(newValue) || newValue < 1) {
                      if (newValue <= 0) {
                        await window.cart.removeItem(variantId);
                      } else {
                        this.value = 1;
                        await window.cart.updateQuantity(variantId, 1, 'update');
                      }
                    } else {
                      await window.cart.updateQuantity(variantId, newValue, 'update');
                    }
                  });
                });

                // Add event listeners for remove buttons
                itemsContainer.querySelectorAll('.remove').forEach(button => {
                  button.addEventListener('click', async function() {
                    const variantId = this.dataset.variantId;
                    await window.cart.removeItem(variantId);
                  });
                });
                
                // Update cart total
                const totalElement = cartDrawer.querySelector('.cart-total-price');
                if (totalElement) {
                  totalElement.textContent = formatMoney(cartData.total_price);
                }
                
                // Update header cart count
                if (window.cart && typeof window.cart.updateHeaderCartCount === 'function') {
                  window.cart.updateHeaderCartCount(cartData.item_count);
                }

                // Update shipping threshold progress bar
                const progressBar = cartDrawer.querySelector('.tf-progress-bar .value');
                if (progressBar) {
                  const threshold = window.theme?.settings?.free_shipping_threshold || 10000; // Default to $100 if not set
                  const progress = Math.min(100, (cartData.total_price / threshold) * 100);
                  progressBar.style.width = `${progress}%`;
                  progressBar.setAttribute('data-progress', progress);
                }

                // Update shipping threshold text
                const thresholdText = cartDrawer.querySelector('.tf-mini-cart-threshold .text');
                if (thresholdText) {
                  const threshold = window.theme?.settings?.free_shipping_threshold || 10000; // Default to $100 if not set
                  const remaining = Math.max(0, threshold - cartData.total_price) / 100;
                  if (cartData.total_price >= threshold) {
                    thresholdText.innerHTML = window.theme?.settings?.free_shipping_message || 'Congratulations! You\'ve unlocked <span class="fw-medium">Free Shipping</span>';
                  } else {
                    const progressMessage = window.theme?.settings?.progress_message || 'Spend <span class="fw-medium">[amount]</span> more to get <span class="fw-medium">Free Shipping</span>';
                    thresholdText.innerHTML = progressMessage.replace('[amount]', `$${remaining.toFixed(2)}`);
                  }
                }
              }
            }
          }
        } catch (error) {
          console.error('Error adding item to cart:', error);
          alert('Failed to add item to cart. Please try again.');
        } finally {
          // Remove loading state
          this.classList.remove('loading');
        }
      }, { once: false }); // Use once:false but with other protections
    });

    // Handle quickview clicks
    document.querySelectorAll('.quickview').forEach(button => {
      button.addEventListener('click', async function(e) {
        e.preventDefault();
        const productHandle = this.dataset.productHandle;
        const productId = this.dataset.productId;
        
        try {
          // Fetch product data
          const response = await fetch(`/products/${productHandle}.js`);
          const product = await response.json();
          
          // Update modal with product data
          const modal = document.getElementById('quickView');
          if (modal) {
            // Wait for modal to be fully initialized
            await new Promise(resolve => setTimeout(resolve, 100));
            
            // Update product title
            const titleElement = modal.querySelector('.product-info-name');
            if (titleElement) titleElement.textContent = product.title;
            
            // Update price
            const priceContainer = modal.querySelector('.product-info-price');
            if (priceContainer) {
              if (product.compare_at_price > product.price) {
                priceContainer.innerHTML = `
                  <h6 class="price-new price-on-sale">${formatMoney(product.price)}</h6>
                  <h6 class="price-old">${formatMoney(product.compare_at_price)}</h6>
                `;
              } else {
                priceContainer.innerHTML = `
                  <h6 class="price-new">${formatMoney(product.price)}</h6>
                `;
              }
            }
            
            // Update description
            const textElement = modal.querySelector('.text');
            if (textElement) {
              textElement.textContent = product.description.replace(/<[^>]*>/g, '').split(' ').slice(0, 30).join(' ') + '...';
            }
            
            // Update media gallery
            const swiperWrapper = modal.querySelector('.swiper-wrapper');
            if (swiperWrapper) {
              swiperWrapper.innerHTML = product.media.map(media => `
                <div class="swiper-slide" data-media-id="${media.id}">
                  <div class="item">
                    ${media.media_type === 'image' 
                      ? `<img class="lazyload" data-src="${media.src}" src="${media.src}" alt="${media.alt || product.title}">`
                      : `<video controls class="w-100"><source src="${media.sources[0].url}" type="video/mp4"></video>`
                    }
                  </div>
                </div>
              `).join('');
            }

            // Update variant information
            const variantContainer = modal.querySelector('.tf-product-info-variant');
            if (variantContainer && product.options) {
              let variantHTML = '<div class="tf-product-variant">';
              
              // Process each option (Color, Size, etc.)
              product.options.forEach((option, optionIndex) => {
                const optionName = option.name.toLowerCase();
                const isColor = optionName === 'color' || optionName === 'colour';
                const isSize = optionName === 'size';
                
                if (isColor) {
                  variantHTML += `
                    <div class="variant-picker-item variant-color">
                      <div class="variant-picker-label">
                        Color:<span class="variant-picker-label-value value-currentColor">${option.values[0]}</span>
                      </div>
                      <div class="variant-picker-values">
                        ${option.values.map((value, index) => {
                          const variant = product.variants.find(v => v.option1 === value);
                          const colorClass = value.toLowerCase().replace(/\s+/g, '-');
                          return `
                            <div class="hover-tooltip color-btn ${index === 0 ? 'active' : ''}" 
                                 data-color="${colorClass}"
                                 data-variant-id="${variant.id}"
                                 data-option-name="${option.name}"
                                 data-option-value="${value}">
                              <span class="check-color bg-${colorClass}"></span>
                              <span class="tooltip">${value}</span>
                              ${variant.featured_image ? `
                                <img class="lazyload" 
                                  data-src="${variant.featured_image.src}" 
                                  src="${variant.featured_image.src}" 
                                  alt="${value}"
                                  loading="lazy"
                                  style="display: none;">
                              ` : ''}
                            </div>
                          `;
                        }).join('')}
                      </div>
                    </div>
                  `;
                } else if (isSize) {
                  variantHTML += `
                    <div class="variant-picker-item variant-size">
                      <div class="variant-picker-label">
                        <div>Size:<span class="variant-picker-label-value value-currentSize">${option.values[0]}</span></div>
                      </div>
                      <div class="variant-picker-values">
                        ${option.values.map((value, index) => `
                          <span class="size-btn ${index === 0 ? 'active' : ''}" 
                                data-size="${value}">${value.charAt(0).toUpperCase()}</span>
                        `).join('')}
                      </div>
                    </div>
                  `;
                }
              });
              
              variantHTML += '</div>';
              variantContainer.innerHTML = variantHTML;
            }
            
            // Update product ID on buttons
            const addToCartBtn = modal.querySelector('.add-to-cart');
            if (addToCartBtn) {
              addToCartBtn.dataset.productId = product.id;
              addToCartBtn.dataset.variantId = product.variants[0].id;
              
              // Add click handler for add to cart button
              addToCartBtn.addEventListener('click', async function(e) {
                e.preventDefault();
                e.stopPropagation();
                
                if (this.classList.contains('loading')) return;
                
                const variantId = this.dataset.variantId;
                const quantityInput = modal.querySelector('.quantity-product');
                const quantity = parseInt(quantityInput ? quantityInput.value : 1);
                
                try {
                  this.classList.add('loading');
                  if (window.cart) {
                    await window.cart.updateQuantity(variantId, quantity, 'add');
                    // Rest of the cart update code...
                  }
                } catch (error) {
                  console.error('Error adding item to cart:', error);
                  alert('Failed to add item to cart. Please try again.');
                } finally {
                  this.classList.remove('loading');
                }
              });
            }
            
            const buyNowBtn = modal.querySelector('.buy-now-btn');
            if (buyNowBtn) {
              buyNowBtn.dataset.productId = product.id;
            }
            
            // Initialize swiper
            if (window.swiper) {
              window.swiper.destroy();
            }
            const modalSwiper = new Swiper('.tf-single-slide', {
              slidesPerView: 1,
              spaceBetween: 0,
              loop: false,
              navigation: {
                nextEl: '.single-slide-next',
                prevEl: '.single-slide-prev',
              }
            });
            // Store the swiper instance on the modal for later reference
            modal.querySelector('.tf-single-slide').swiper = modalSwiper;

            // Add slideChange event to update color swatch active state
            modalSwiper.on('slideChange', function () {
              console.log('[wishlist] Swiper slideChange event fired');
              const modal = document.getElementById('quickView');
              const activeSlide = modal.querySelector('.swiper-slide.swiper-slide-active');
              if (!activeSlide) { console.log('[wishlist] No active slide found'); return; }
              const mediaId = parseInt(activeSlide.getAttribute('data-media-id'));
              console.log('[wishlist] Active slide mediaId:', mediaId);
              // Find the matching variant by featured_image.id
              let matchingVariant = product.variants.find(v => v.featured_image && v.featured_image.id == mediaId);
              console.log('[wishlist] Matching variant by id:', matchingVariant);
              // Fallback: match by image src if not found by id
              if (!matchingVariant) {
                const activeImg = activeSlide.querySelector('img');
                if (activeImg) {
                  const activeSrc = activeImg.getAttribute('src');
                  matchingVariant = product.variants.find(v => v.featured_image && v.featured_image.src === activeSrc);
                  console.log('[wishlist] Fallback matching variant by src:', matchingVariant);
                }
              }
              if (matchingVariant) {
                // Find the color option index
                const colorOptionIndex = product.options.findIndex(
                  o => o.name.toLowerCase() === 'color' || o.name.toLowerCase() === 'colour'
                );
                if (colorOptionIndex !== -1) {
                  const colorOption = product.options[colorOptionIndex];
                  const colorValue = matchingVariant[`option${colorOptionIndex + 1}`];
                  console.log('[wishlist] Color value for this variant:', colorValue);
                  // Update color swatch active state
                  const variantContainer = modal.querySelector('.tf-product-info-variant');
                  if (variantContainer) {
                    variantContainer.querySelectorAll(`[data-option-name="${colorOption.name}"]`).forEach(btn => {
                      if (
                        btn.dataset.optionValue &&
                        btn.dataset.optionValue.toLowerCase().trim() === String(colorValue).toLowerCase().trim()
                      ) {
                        btn.classList.add('active');
                        const label = variantContainer.querySelector('.value-currentColor');
                        if (label) label.textContent = colorValue;
                        console.log('[wishlist] Set color swatch active:', colorValue);
                      } else {
                        btn.classList.remove('active');
                      }
                    });
                  } else {
                    console.log('[wishlist] No variantContainer found');
                  }
                } else {
                  console.log('[wishlist] No color option found');
                }
              } else {
                console.log('[wishlist] No matching variant for this mediaId or src');
              }
            });

            // Add event listeners for size buttons
            modal.querySelectorAll('.size-btn').forEach(sizeBtn => {
              sizeBtn.addEventListener('click', function() {
                console.log('Size button clicked:', this.dataset.size);
                
                const sizeValue = this.dataset.size;
                console.log('Selected size value:', sizeValue);
                
                // Update active state
                this.closest('.variant-picker-values').querySelectorAll('.size-btn').forEach(btn => {
                  btn.classList.remove('active');
                });
                this.classList.add('active');
                
                // Update selected size text
                const selectedSize = modal.querySelector('.value-currentSize');
                if (selectedSize) {
                  selectedSize.textContent = sizeValue.charAt(0).toUpperCase() + sizeValue.slice(1);
                  console.log('Updated size text to:', selectedSize.textContent);
                }
                
                // Get current color selection
                const activeColorBtn = modal.querySelector('.color-btn.active');
                const selectedColor = activeColorBtn ? activeColorBtn.dataset.optionValue : null;
                console.log('Current selected color:', selectedColor);
                
                // Find the correct variant based on both color and size
                const variant = product.variants.find(v => {
                  const matchesColor = !selectedColor || v.option1 === selectedColor;
                  const matchesSize = v.option2 === sizeValue;
                  console.log('Checking variant:', {
                    variantId: v.id,
                    option1: v.option1,
                    option2: v.option2,
                    matchesColor,
                    matchesSize
                  });
                  return matchesColor && matchesSize;
                });
                
                console.log('Found matching variant:', variant);
                
                // Update add to cart button with the correct variant ID
                const addToCartBtn = modal.querySelector('.add-to-cart');
                if (addToCartBtn && variant) {
                  addToCartBtn.dataset.variantId = variant.id;
                  console.log('Updated add to cart button variant ID:', variant.id);
                } else {
                  console.log('Could not update add to cart button:', {
                    hasAddToCartBtn: !!addToCartBtn,
                    hasVariant: !!variant
                  });
                }
              });
            });

            // Add event listeners for color buttons
            modal.querySelectorAll('.color-btn').forEach(colorBtn => {
              colorBtn.addEventListener('click', function() {
                console.log('Color button clicked:', this.dataset.optionValue);
                
                const optionValue = this.dataset.optionValue;
                const colorClass = this.dataset.color;
                
                // Update active state
                this.closest('.variant-picker-values').querySelectorAll('.color-btn').forEach(btn => {
                  btn.classList.remove('active');
                });
                this.classList.add('active');
                
                // Update selected color text
                const selectedColor = modal.querySelector('.value-currentColor');
                if (selectedColor) {
                  selectedColor.textContent = optionValue;
                  console.log('Updated color text to:', optionValue);
                }
                
                // Get current size selection
                const activeSizeBtn = modal.querySelector('.size-btn.active');
                const selectedSize = activeSizeBtn ? activeSizeBtn.dataset.size : null;
                console.log('Current selected size:', selectedSize);
                
                // Find the correct variant based on both color and size
                const variant = product.variants.find(v => {
                  const matchesColor = v.option1 === optionValue;
                  const matchesSize = !selectedSize || v.option2 === selectedSize;
                  console.log('Checking variant:', {
                    variantId: v.id,
                    option1: v.option1,
                    option2: v.option2,
                    matchesColor,
                    matchesSize
                  });
                  return matchesColor && matchesSize;
                });
                
                console.log('Found matching variant:', variant);
                
                // Update add to cart button with the correct variant ID
                const addToCartBtn = modal.querySelector('.add-to-cart');
                if (addToCartBtn && variant) {
                  addToCartBtn.dataset.variantId = variant.id;
                  console.log('Updated add to cart button variant ID:', variant.id);
                } else {
                  console.log('Could not update add to cart button:', {
                    hasAddToCartBtn: !!addToCartBtn,
                    hasVariant: !!variant
                  });
                }
                
                // Update main image if variant has an image
                if (variant && variant.featured_image) {
                  // Find the Swiper instance
                  const swiperInstance = modal.querySelector('.tf-single-slide')?.swiper;
                  console.log('Swiper instance:', swiperInstance);
                  const slides = modal.querySelectorAll('.swiper-slide');
                  console.log('Slides found:', slides.length);
                  console.log('Variant featured_image:', variant.featured_image);
                  let targetIndex = -1;
                  slides.forEach((slide, idx) => {
                    console.log(`Slide ${idx} data-media-id:`, slide.dataset.mediaId);
                    console.log(`Comparing slide ${idx} mediaId (${slide.dataset.mediaId}) with variant.featured_image.id (${variant.featured_image.id})`);
                    if (slide.dataset.mediaId == variant.featured_image.id) {
                      targetIndex = idx;
                      console.log('Match found at index:', idx);
                    }
                  });
                  if (swiperInstance && targetIndex !== -1) {
                    swiperInstance.slideTo(targetIndex, 300);
                  } else if (slides.length > 0) {
                    // Fallback: update all images in all slides
                    slides.forEach((slide, idx) => {
                      const img = slide.querySelector('img');
                      if (img) {
                        img.src = variant.featured_image.src;
                        img.setAttribute('data-src', variant.featured_image.src);
                        console.log(`Updated slide ${idx} image to:`, variant.featured_image.src);
                      }
                    });
                  } else {
                    // Fallback: update the first image as before
                    const mainImage = modal.querySelector('.swiper-slide img');
                    if (mainImage) {
                      mainImage.src = variant.featured_image.src;
                      mainImage.setAttribute('data-src', variant.featured_image.src);
                      console.log('Updated main image to:', variant.featured_image.src);
                    }
                  }
                }
              });
            });

            // Update initial variant selection
            const initialColorBtn = modal.querySelector('.color-btn.active');
            const initialSizeBtn = modal.querySelector('.size-btn.active');
            
            if (initialColorBtn && initialSizeBtn) {
              const selectedColor = initialColorBtn.dataset.optionValue;
              const selectedSize = initialSizeBtn.dataset.size;
              
              const initialVariant = product.variants.find(v => 
                v.option1 === selectedColor && v.option2 === selectedSize
              );
              
              if (initialVariant) {
                const addToCartBtn = modal.querySelector('.add-to-cart');
                if (addToCartBtn) {
                  addToCartBtn.dataset.variantId = initialVariant.id;
                  console.log('Set initial variant ID:', initialVariant.id, 'Size:', selectedSize);
                }
              }
            }

            // Event delegation for quantity buttons (fix double event issue for good)
            const quantityContainer = modal.querySelector('.tf-product-total-quantity');
            if (quantityContainer && !quantityContainer._quantityDelegationAttached) {
              quantityContainer.addEventListener('click', function(e) {
                if (e.target.classList.contains('plus-btn')) {
                  e.preventDefault();
                  e.stopPropagation();
                  const quantityInput = modal.querySelector('.quantity-product');
                  let value = parseInt(quantityInput.value) || 1;
                  value++;
                  quantityInput.value = value;
                  // Update add-to-cart button data-quantity
                  const addToCartBtn = modal.querySelector('.add-to-cart');
                  if (addToCartBtn) {
                    addToCartBtn.dataset.quantity = value;
                  }
                  quantityInput.dispatchEvent(new Event('change'));
                } else if (e.target.classList.contains('minus-btn')) {
                  e.preventDefault();
                  e.stopPropagation();
                  const quantityInput = modal.querySelector('.quantity-product');
                  let value = parseInt(quantityInput.value) || 1;
                  if (value > 1) value--;
                  quantityInput.value = value;
                  // Update add-to-cart button data-quantity
                  const addToCartBtn = modal.querySelector('.add-to-cart');
                  if (addToCartBtn) {
                    addToCartBtn.dataset.quantity = value;
                  }
                  quantityInput.dispatchEvent(new Event('change'));
                }
              }, true);
              quantityContainer._quantityDelegationAttached = true;
            }

            // Also handle direct input changes
            const quantityInput = modal.querySelector('.quantity-product');
            if (quantityInput) {
              quantityInput.addEventListener('change', function() {
                const value = parseInt(this.value) || 1;
                const addToCartBtn = modal.querySelector('.add-to-cart');
                if (addToCartBtn) {
                  addToCartBtn.dataset.quantity = value;
                }
              });
            }
          }
        } catch (error) {
          console.error('Error loading product data:', error);
        }
      });
    });
    
    // Initialize lazy loading
    if (typeof LazyLoad !== 'undefined') {
      new LazyLoad();
    }
    
    // Update buttons state if WishlistCompare is available
    if (window.wishlistCompare) {
      window.wishlistCompare.updateButtonsState();
    }

    // Add color variant selection handlers
    document.querySelectorAll('.list-color-item').forEach(button => {
      button.addEventListener('click', function() {
        const variantId = this.dataset.variantId;
        const productCard = this.closest('.card-product');
        const productId = productCard.dataset.productId;
        
        // Update active state
        productCard.querySelectorAll('.list-color-item').forEach(item => {
          item.classList.remove('active');
        });
        this.classList.add('active');
        
        // Find the product and variant from the sorted products array
        const product = sortedProducts.find(p => p.id.toString() === productId);
        if (product) {
          const variant = product.variants.find(v => v.id.toString() === variantId);
          if (variant) {
            // Update compare button with current variant data
            const compareBtn = productCard.querySelector('[data-compare]');
            if (compareBtn) {
              compareBtn.dataset.variantId = variantId;
              compareBtn.dataset.variantImage = variant.featured_image ? variant.featured_image.src : product.featured_image.src;
              compareBtn.dataset.variantTitle = variant.title;
            }
          }
        }
      });
    });

    // Add compare button click handlers
    document.querySelectorAll('[data-compare]').forEach(button => {
      button.addEventListener('click', function(e) {
        e.preventDefault();
        const productId = this.dataset.id;
        const action = this.dataset.action;

        if (window.wishlistCompare) {
          window.wishlistCompare.handleCompareClick({
            productId,
            action
          });
        }
      });
    });
  }

  // Initial update
  updateWishlistDisplay();

  // Listen for wishlist updates
  document.addEventListener('wishlist:updated', updateWishlistDisplay);
});

// Helper function to format money
function formatMoney(cents) {
  return new Intl.NumberFormat('en-US', {
    style: 'currency',
    currency: '{{ shop.currency }}'
  }).format(cents);
}
</script>