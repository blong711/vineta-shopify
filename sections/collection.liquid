{% comment %}
  Collection Section
  - Includes filter controls, sorting options, layout switching
  - Responsive product grid with list view option
  - Product cards with hover effects and quick actions
{% endcomment %}

{% paginate collection.products by section.settings.products_per_page %}
<section class="flat-spacing-24" style="padding-top: {{ section.settings.padding_top }}px; padding-bottom: {{ section.settings.padding_bottom }}px;">
  {% if section.settings.width == 'boxed' %}
    <div class="container">
  {% endif %}
    
    <!-- Filter Drawer - Always present for mobile/tablet responsive behavior -->
    <div class="offcanvas offcanvas-start canvas-sidebar canvas-filter" id="filterShop">
      <div class="canvas-wrapper">
        <div class="canvas-header">
          <span class="title">Filter</span>
          <button class="icon-close icon-close-popup" data-bs-dismiss="offcanvas" aria-label="Close"></button>
        </div>
        <div class="canvas-body">
          {% render 'filter-content' %}
        </div>
      </div>
    </div>

    {%- case section.settings.filter_type -%}
      {%- when 'drawer' -%}
        <!-- Drawer filter type - no additional sidebar needed -->
      {%- when 'left' -%}
        <!-- Left Sidebar - visible on desktop, hidden on mobile/tablet -->
        <div class="row">
          <div class="col-lg-3 d-none d-lg-block">
            <div class="filter-sidebar filter-left">
              <div class="filter-content">
                {% render 'filter-content' %}
              </div>
            </div>
          </div>
          <div class="col-lg-9 col-12">
      {%- when 'right' -%}
        <!-- Right Sidebar - visible on desktop, hidden on mobile/tablet -->
        <div class="row">
          <div class="col-lg-9 col-12">
      {%- when 'horizontal' -%}
        <!-- Horizontal filter type - no additional sidebar needed -->
    {%- endcase -%}

    {%- if section.settings.filter_type == 'drawer' or section.settings.filter_type == 'left' or section.settings.filter_type == 'right' -%}
      {% if collection.products.size > 0 %}
        <div class="tf-shop-control">
          {%- if section.settings.filter_type == 'drawer' -%}
            <div class="tf-group-filter">
              <a href="#filterShop" data-bs-toggle="offcanvas" aria-controls="filterShop" class="tf-btn-filter">
                <span class="icon icon-filter"></span>
                <span class="text">Filter</span>
              </a>
              <div class="tf-dropdown-sort" data-bs-toggle="dropdown">
                <div class="btn-select">
                  <span class="text-sort-value">{{ collection.sort_by | default: 'best-selling' | replace: '-', ' ' | capitalize }}</span>
                  <span class="icon icon-arr-down"></span>
                </div>
                <div class="dropdown-menu">
                  <div class="select-item{% if collection.sort_by == 'best-selling' %} active{% endif %}" data-sort-value="best-selling">
                    <span class="text-value-item">Best selling</span>
                  </div>
                  <div class="select-item{% if collection.sort_by == 'title-ascending' %} active{% endif %}" data-sort-value="title-ascending">
                    <span class="text-value-item">Alphabetically, A-Z</span>
                  </div>
                  <div class="select-item{% if collection.sort_by == 'title-descending' %} active{% endif %}" data-sort-value="title-descending">
                    <span class="text-value-item">Alphabetically, Z-A</span>
                  </div>
                  <div class="select-item{% if collection.sort_by == 'price-ascending' %} active{% endif %}" data-sort-value="price-ascending">
                    <span class="text-value-item">Price, low to high</span>
                  </div>
                  <div class="select-item{% if collection.sort_by == 'price-descending' %} active{% endif %}" data-sort-value="price-descending">
                    <span class="text-value-item">Price, high to low</span>
                  </div>
                </div>
              </div>
            </div>
          {%- elsif section.settings.filter_type == 'left' or section.settings.filter_type == 'right' -%}
            <div class="tf-group-filter">
              <a href="#filterShop" data-bs-toggle="offcanvas" aria-controls="filterShop" class="tf-btn-filter d-lg-none">
                <span class="icon icon-filter"></span>
                <span class="text">Filter</span>
              </a>
              <div class="tf-dropdown-sort" data-bs-toggle="dropdown">
                <div class="btn-select">
                  <span class="text-sort-value">{{ collection.sort_by | default: 'best-selling' | replace: '-', ' ' | capitalize }}</span>
                  <span class="icon icon-arr-down"></span>
                </div>
                <div class="dropdown-menu">
                  <div class="select-item{% if collection.sort_by == 'best-selling' %} active{% endif %}" data-sort-value="best-selling">
                    <span class="text-value-item">Best selling</span>
                  </div>
                  <div class="select-item{% if collection.sort_by == 'title-ascending' %} active{% endif %}" data-sort-value="title-ascending">
                    <span class="text-value-item">Alphabetically, A-Z</span>
                  </div>
                  <div class="select-item{% if collection.sort_by == 'title-descending' %} active{% endif %}" data-sort-value="title-descending">
                    <span class="text-value-item">Alphabetically, Z-A</span>
                  </div>
                  <div class="select-item{% if collection.sort_by == 'price-ascending' %} active{% endif %}" data-sort-value="price-ascending">
                    <span class="text-value-item">Price, low to high</span>
                  </div>
                  <div class="select-item{% if collection.sort_by == 'price-descending' %} active{% endif %}" data-sort-value="price-descending">
                    <span class="text-value-item">Price, high to low</span>
                  </div>
                </div>
              </div>
            </div>
          {%- endif -%}
          {%- if section.settings.filter_type != 'horizontal' -%}
            <ul class="tf-control-layout">
              <li class="tf-view-layout-switch sw-layout-list list-layout" data-value-layout="list">
                <div class="item icon-list">
                  <span></span>
                  <span></span>
                </div>
              </li>
              <li class="tf-view-layout-switch sw-layout-2" data-value-layout="tf-col-2">
                <div class="item icon-grid-2">
                  <span></span>
                  <span></span>
                </div>
              </li>
              <li class="tf-view-layout-switch sw-layout-3" data-value-layout="tf-col-3">
                <div class="item icon-grid-3">
                  <span></span>
                  <span></span>
                  <span></span>
                </div>
              </li>
              <li class="tf-view-layout-switch sw-layout-4{% if section.settings.default_grid_columns == '4' %} active{% endif %}" data-value-layout="tf-col-4">
                <div class="item icon-grid-4">
                  <span></span>
                  <span></span>
                  <span></span>
                  <span></span>
                </div>
              </li>
            </ul>
          {%- endif -%}
        </div>
      {% endif %}
    {%- endif -%}

    {%- if section.settings.filter_type == 'horizontal' -%}
      {% if collection.products.size > 0 %}
        <div class="tf-shop-control mb1">
          <div class="tf-group-filter">
            <div class="tf-dropdown-sort" data-bs-toggle="dropdown">
              <div class="btn-select">
                <span class="text-sort-value">{{ collection.sort_by | default: 'best-selling' | replace: '-', ' ' | capitalize }}</span>
                <span class="icon icon-arr-down"></span>
              </div>
              <div class="dropdown-menu">
                <div class="select-item{% if collection.sort_by == 'best-selling' %} active{% endif %}" data-sort-value="best-selling">
                  <span class="text-value-item">Best selling</span>
                </div>
                <div class="select-item{% if collection.sort_by == 'title-ascending' %} active{% endif %}" data-sort-value="title-ascending">
                  <span class="text-value-item">Alphabetically, A-Z</span>
                </div>
                <div class="select-item{% if collection.sort_by == 'title-descending' %} active{% endif %}" data-sort-value="title-descending">
                  <span class="text-value-item">Alphabetically, Z-A</span>
                </div>
                <div class="select-item{% if collection.sort_by == 'price-ascending' %} active{% endif %}" data-sort-value="price-ascending">
                  <span class="text-value-item">Price, low to high</span>
                </div>
                <div class="select-item{% if collection.sort_by == 'price-descending' %} active{% endif %}" data-sort-value="price-descending">
                  <span class="text-value-item">Price, high to low</span>
                </div>
              </div>
            </div>
          </div>
          <ul class="tf-control-layout">
          <li class="tf-view-layout-switch sw-layout-list list-layout" data-value-layout="list">
            <div class="item icon-list">
              <span></span>
              <span></span>
            </div>
          </li>
          <li class="tf-view-layout-switch sw-layout-2" data-value-layout="tf-col-2">
            <div class="item icon-grid-2">
              <span></span>
              <span></span>
            </div>
          </li>
          <li class="tf-view-layout-switch sw-layout-3" data-value-layout="tf-col-3">
            <div class="item icon-grid-3">
              <span></span>
              <span></span>
              <span></span>
            </div>
          </li>
          <li class="tf-view-layout-switch sw-layout-4{% if section.settings.default_grid_columns == '4' %} active{% endif %}" data-value-layout="tf-col-4">
            <div class="item icon-grid-4">
              <span></span>
              <span></span>
              <span></span>
              <span></span>
            </div>
          </li>
        </ul>
        </div>
        <div class="tf-filter-dropdown">
          <span class="title-filter">Filter:</span>
          <div class="meta-dropdown-filter">
            <!-- Availability Filter -->
            <div class="dropdown dropdown-filter">
              <div class="dropdown-toggle" id="availability" data-bs-toggle="dropdown" aria-expanded="false" data-bs-auto-close="outside">
                <span class="text-value">Availability</span>
                <span class="icon icon-arr-down"></span>
              </div>
              <div class="dropdown-menu" aria-labelledby="availability">
                <ul class="filter-group-check">
                  <li class="list-item">
                    <input type="checkbox"
                      name="filter.v.availability"
                      value="1"
                      id="Filter-availability-1"
                      {% if current_tags contains 'filter.v.availability:1' %}checked{% endif %}
                      class="filter-checkbox tf-check">
                    <label for="Filter-availability-1" class="label">
                      <span>In stock</span>
                      <span class="count">({{ collection.products | where: "available", true | size }})</span>
                    </label>
                  </li>
                  <li class="list-item">
                    <input type="checkbox"
                      name="filter.v.availability"
                      value="0"
                      id="Filter-availability-2"
                      {% if current_tags contains 'filter.v.availability:0' %}checked{% endif %}
                      class="filter-checkbox tf-check">
                    <label for="Filter-availability-2" class="label">
                      <span>Out of stock</span>
                      <span class="count">({{ collection.products | where: "available", false | size }})</span>
                    </label>
                  </li>
                </ul>
              </div>
            </div>

            <!-- Dynamic Shopify Filters -->
            {%- for filter in collection.filters -%}
              {%- if filter.label != 'Availability' -%}
                <div class="dropdown dropdown-filter">
                  <div class="dropdown-toggle" id="filter-{{ filter.label | handle }}" data-bs-toggle="dropdown" aria-expanded="false" data-bs-auto-close="outside">
                    <span class="text-value">{{ filter.label }}</span>
                    <span class="icon icon-arr-down"></span>
                  </div>
                  <div class="dropdown-menu" aria-labelledby="filter-{{ filter.label | handle }}">
                    {%- case filter.type -%}
                      {%- when 'boolean' or 'list' -%}
                        <ul class="filter-group-check">
                          {%- for filter_value in filter.values -%}
                            <li class="list-item">
                              <input type="checkbox"
                                name="{{ filter_value.param_name }}"
                                value="{{ filter_value.value }}"
                                id="Filter-{{ filter.label | escape }}-{{ forloop.index }}"
                                {% if filter_value.active -%}checked{%- endif %}
                                {% if filter_value.count == 0 and filter_value.active == false -%}disabled{%- endif %}
                                class="filter-checkbox tf-check">
                              <label for="Filter-{{ filter.label | escape }}-{{ forloop.index }}" class="label">
                                <span>{{ filter_value.label }}</span>
                                <span class="count">({{ filter_value.count }})</span>
                              </label>
                            </li>
                          {%- endfor -%}
                        </ul>
                      {%- when 'price_range' -%}
                        <div class="widget-price filter-price">
                          <span class="reset-price">Reset</span>
                          <div class="price-val-range" id="price-value-range" 
                            data-min="{{ filter.min_value.value | default: 0 | money_without_currency | round }}"
                            data-max="{{ filter.max_value.value | default: filter.range_max | money_without_currency | round }}"
                            data-range-min="{{ filter.range_min | money_without_currency | round }}"
                            data-range-max="{{ filter.range_max | money_without_currency | round }}"></div>
                          <div class="box-value-price">
                            <span class="text-sm">Price:</span>
                            <div class="price-box">
                              <div class="price-val" id="price-min-value" data-currency="{{ shop.currency.symbol }}">
                                {{ filter.min_value.value | default: 0 | money_without_currency | round }}
                              </div>
                              <span>-</span>
                              <div class="price-val" id="price-max-value" data-currency="{{ shop.currency.symbol }}">
                                {{ filter.max_value.value | default: filter.range_max | money_without_currency | round }}
                              </div>
                            </div>
                          </div>
                          <input type="hidden" name="filter.v.price.gte" id="price-min-input" value="{{ filter.min_value.value | default: 0 | money_without_currency | round }}">
                          <input type="hidden" name="filter.v.price.lte" id="price-max-input" value="{{ filter.max_value.value | default: filter.range_max | money_without_currency | round }}">
                        </div>
                    {%- endcase -%}
                  </div>
                </div>
              {%- endif -%}
            {%- endfor -%}
          </div>
        </div>
      {% endif %}
    {%- endif -%}

    <div class="wrapper-control-shop" data-pagination-type="{{ section.settings.pagination_type }}">

      <!-- List View Layout -->
      <div class="tf-list-layout wrapper-shop" id="listLayout" style="display: none;">
        {% if collection.products.size > 0 %}
          {% for product in collection.products %}
            <div class="loadItem card-product style-list" data-availability="{{ product.available | default: 'In stock' }}" data-brand="{{ product.vendor }}">
              {% render 'card-product', product: product, show_color_swatches: true, show_size_swatches: true, show_case_type: true, size_swatches: true %}
            </div>
          {% endfor %}
        {% else %}
          <div class="no-products-found">
            <div class="no-products-content">
              <div class="no-products-icon">
                <svg width="64" height="64" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <path d="M9 22H15C20 22 22 20 22 15V9C22 4 20 2 15 2H9C4 2 2 4 2 9V15C2 20 4 22 9 22Z" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                  <path d="M9.5 8.96997C9.5 8.96997 10.5 8.96997 11.5 9.96997C12.5 10.97 12.5 12.97 12.5 12.97" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                  <path d="M14.5 8.96997C14.5 8.96997 13.5 8.96997 12.5 9.96997C11.5 10.97 11.5 12.97 11.5 12.97" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                  <path d="M9.5 15.03C9.5 15.03 10.5 15.03 11.5 16.03C12.5 17.03 12.5 19.03 12.5 19.03" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                  <path d="M14.5 15.03C14.5 15.03 13.5 15.03 12.5 16.03C11.5 17.03 11.5 19.03 11.5 19.03" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                </svg>
              </div>
              <h3 class="no-products-title">No products found</h3>
              <p class="no-products-description">We couldn't find any products matching your criteria. Try adjusting your filters or browse our other collections.</p>
              <div class="no-products-actions">
                <a href="/collections" class="tf-btn btn-out-line-dark2">Browse all collections</a>
              </div>
            </div>
          </div>
        {% endif %}

        {% if section.settings.pagination_type == 'load_more' %}
          {% if paginate.next %}
            <div class="wd-load">
              <button id="loadMoreListBtn" class="tf-btn btn-out-line-dark2 tf-loading loadmore">
                <span class="text">Load more</span>
                <div class="spinner-circle">
                  <span class="spinner-circle1 spinner-child"></span>
                  <span class="spinner-circle2 spinner-child"></span>
                  <span class="spinner-circle3 spinner-child"></span>
                  <span class="spinner-circle4 spinner-child"></span>
                  <span class="spinner-circle5 spinner-child"></span>
                  <span class="spinner-circle6 spinner-child"></span>
                  <span class="spinner-circle7 spinner-child"></span>
                  <span class="spinner-circle8 spinner-child"></span>
                  <span class="spinner-circle9 spinner-child"></span>
                </div>
              </button>
            </div>
          {% endif %}
        {% else %}
          {% if paginate.pages > 1 %}
            <ul class="wg-pagination">
              {% if paginate.previous %}
                <li>
                  <a href="{{ paginate.previous.url }}" class="pagination-item"><i class="icon-arr-left"></i></a>
                </li>
              {% endif %}
              
              {% for part in paginate.parts %}
                {% if part.is_link %}
                  <li>
                    <a href="{{ part.url }}" class="pagination-item">{{ part.title }}</a>
                  </li>
                {% else %}
                  <li class="{% if part.title == paginate.current_page %}active{% endif %}">
                    <div class="pagination-item">{{ part.title }}</div>
                  </li>
                {% endif %}
              {% endfor %}

              {% if paginate.next %}
                <li>
                  <a href="{{ paginate.next.url }}" class="pagination-item"><i class="icon-arr-right2"></i></a>
                </li>
              {% endif %}
            </ul>
          {% endif %}
        {% endif %}
      </div>

      <!-- Grid View Layout -->
      <div class="wrapper-shop{% if collection.products.size > 0 %} tf-grid-layout tf-col-{{ section.settings.default_grid_columns }}{% endif %}" id="gridLayout" data-default-columns="{{ section.settings.default_grid_columns }}">
        {% if collection.products.size > 0 %}
          {% for product in collection.products %}
            <div class="loadItem card-product grid style-1{% if product.options contains 'Size' %} card-product-size{% endif %}" 
                 data-availability="{{ product.available | default: 'In stock' }}" 
                 data-brand="{{ product.vendor }}">
              {% render 'card-product', product: product, show_color_swatches: true, show_size_swatches: true, show_case_type: true, size_swatches: true %}
            </div>
          {% endfor %}
        {% else %}
          <div class="no-products-found">
            <div class="no-products-content">
              <div class="no-products-icon">
                <svg width="64" height="64" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <path d="M9 22H15C20 22 22 20 22 15V9C22 4 20 2 15 2H9C4 2 2 4 2 9V15C2 20 4 22 9 22Z" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                  <path d="M9.5 8.96997C9.5 8.96997 10.5 8.96997 11.5 9.96997C12.5 10.97 12.5 12.97 12.5 12.97" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                  <path d="M14.5 8.96997C14.5 8.96997 13.5 8.96997 12.5 9.96997C11.5 10.97 11.5 12.97 11.5 12.97" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                  <path d="M9.5 15.03C9.5 15.03 10.5 15.03 11.5 16.03C12.5 17.03 12.5 19.03 12.5 19.03" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                  <path d="M14.5 15.03C14.5 15.03 13.5 15.03 12.5 16.03C11.5 17.03 11.5 19.03 11.5 19.03" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                </svg>
              </div>
              <h3 class="no-products-title">No products found</h3>
              <p class="no-products-description">We couldn't find any products matching your criteria. Try adjusting your filters or browse our other collections.</p>
              <div class="no-products-actions">
                <a href="/collections" class="tf-btn btn-out-line-dark2">Browse all collections</a>
              </div>
            </div>
          </div>
        {% endif %}

        {% if section.settings.pagination_type == 'load_more' %}
          {% if paginate.next %}
            <div class="wd-load d-flex justify-content-center">
              <button id="loadMoreGridBtn" class="tf-btn btn-out-line-dark2 tf-loading loadmore">
                <span class="text">Load more</span>
                <div class="spinner-circle">
                  <span class="spinner-circle1 spinner-child"></span>
                  <span class="spinner-circle2 spinner-child"></span>
                  <span class="spinner-circle3 spinner-child"></span>
                  <span class="spinner-circle4 spinner-child"></span>
                  <span class="spinner-circle5 spinner-child"></span>
                  <span class="spinner-circle6 spinner-child"></span>
                  <span class="spinner-circle7 spinner-child"></span>
                  <span class="spinner-circle8 spinner-child"></span>
                  <span class="spinner-circle9 spinner-child"></span>
                </div>
              </button>
            </div>
          {% endif %}
        {% elsif section.settings.pagination_type == 'pagination' %}
          {% if paginate.pages > 1 %}
            <ul class="wg-pagination">
              {% if paginate.previous %}
                <li>
                  <a href="{{ paginate.previous.url }}" class="pagination-item"><i class="icon-arr-left"></i></a>
                </li>
              {% endif %}
              
              {% for part in paginate.parts %}
                {% if part.is_link %}
                  <li>
                    <a href="{{ part.url }}" class="pagination-item">{{ part.title }}</a>
                  </li>
                {% else %}
                  <li class="{% if part.title == paginate.current_page %}active{% endif %}">
                    <div class="pagination-item">{{ part.title }}</div>
                  </li>
                {% endif %}
              {% endfor %}

              {% if paginate.next %}
                <li>
                  <a href="{{ paginate.next.url }}" class="pagination-item"><i class="icon-arr-right2"></i></a>
                </li>
              {% endif %}
            </ul>
          {% endif %}
        {% else %}
          {% if paginate.next %}
            <div class="wd-load d-flex justify-content-center" id="infiniteScrollLoader" style="display: none;">
              <button class="tf-btn btn-dark2 tf-loading animate-btn animate-dark">
                <div class="spinner-circle">
                  <span class="spinner-circle1 spinner-child"></span>
                  <span class="spinner-circle2 spinner-child"></span>
                  <span class="spinner-circle3 spinner-child"></span>
                  <span class="spinner-circle4 spinner-child"></span>
                  <span class="spinner-circle5 spinner-child"></span>
                  <span class="spinner-circle6 spinner-child"></span>
                  <span class="spinner-circle7 spinner-child"></span>
                  <span class="spinner-circle8 spinner-child"></span>
                  <span class="spinner-circle9 spinner-child"></span>
                </div>
              </button>
            </div>
          {% endif %}
        {% endif %}
      </div>
    </div>

    {%- if section.settings.filter_type == 'left' or section.settings.filter_type == 'right' -%}
      </div>
      {%- if section.settings.filter_type == 'right' -%}
        <div class="col-lg-3">
          <div class="filter-sidebar filter-right">
            <div class="filter-content">
              {% render 'filter-content' %}
            </div>
          </div>
        </div>
      {%- endif -%}
      </div>
    {%- endif -%}
  {% if section.settings.width == 'boxed' %}
    </div>
  {% endif %}
</section>
{% endpaginate %}

<script>
  // Add CSS styles for no products found message
  const noProductsStyles = `
    <style>
      .no-products-found {
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 400px;
        width: 100%;
        padding: 40px 20px;
      }
      
      .no-products-content {
        text-align: center;
        max-width: 500px;
      }
      
      .no-products-icon {
        margin-bottom: 24px;
        color: #6b7280;
      }
      
      .no-products-icon svg {
        width: 64px;
        height: 64px;
      }
      
      .no-products-title {
        font-size: 24px;
        font-weight: 600;
        margin-bottom: 12px;
        color: #1f2937;
      }
      
      .no-products-description {
        font-size: 16px;
        line-height: 1.5;
        color: #6b7280;
        margin-bottom: 32px;
      }
      
      .no-products-actions {
        display: flex;
        gap: 12px;
        justify-content: center;
        flex-wrap: wrap;
      }
      
      .no-products-actions .tf-btn {
        min-width: 140px;
      }
      
      @media (max-width: 768px) {
        .no-products-found {
          min-height: 300px;
          padding: 20px;
        }
        
        .no-products-title {
          font-size: 20px;
        }
        
        .no-products-description {
          font-size: 14px;
        }
        
        .no-products-actions {
          flex-direction: column;
          align-items: center;
        }
        
        .no-products-actions .tf-btn {
          width: 100%;
          max-width: 200px;
        }
      }
    </style>
  `;
  
  // Inject styles into head
  document.head.insertAdjacentHTML('beforeend', noProductsStyles);

  document.addEventListener('DOMContentLoaded', function() {
    // Global variables for state management
    let isLoading = false;
    let currentPage = 1;
    let currentSort = '{{ collection.sort_by | default: "best-selling" }}';
    let currentFilters = new URLSearchParams(window.location.search);
    
    // Cache DOM elements
    const productGrid = document.querySelector('.tf-grid-layout');
    const productList = document.querySelector('.tf-list-layout');
    const sortDropdown = document.querySelector('.tf-dropdown-sort');
    const sortValueDisplay = document.querySelector('.text-sort-value');
    const filterForm = document.getElementById('collection-filters-form');
    const appliedFiltersContainer = document.getElementById('applied-filters');
    const productCountGrid = document.getElementById('product-count-grid');
    const productCountList = document.getElementById('product-count-list');

    // Initialize filter state from URL parameters
    function initializeFilterState() {
      const urlParams = new URLSearchParams(window.location.search);
      
      // Set checkboxes based on URL parameters
      const checkboxes = document.querySelectorAll('.filter-checkbox');
      checkboxes.forEach(checkbox => {
        const paramName = checkbox.name;
        const paramValue = checkbox.value;
        
        if (urlParams.has(paramName)) {
          const urlValue = urlParams.get(paramName);
          if (urlValue === paramValue || urlValue.includes(paramValue)) {
            checkbox.checked = true;
          }
        }
      });

      // Set price range if exists - wait for noUiSlider to be available
      const priceRange = document.getElementById('price-value-range');
      if (priceRange) {
        const minPrice = urlParams.get('filter.v.price.gte');
        const maxPrice = urlParams.get('filter.v.price.lte');
        
        if (minPrice && maxPrice && priceRange.noUiSlider) {
          priceRange.noUiSlider.set([parseInt(minPrice), parseInt(maxPrice)]);
        } else if (minPrice && maxPrice) {
          // Wait for noUiSlider to be initialized
          const checkSlider = setInterval(() => {
            if (priceRange.noUiSlider) {
              priceRange.noUiSlider.set([parseInt(minPrice), parseInt(maxPrice)]);
              clearInterval(checkSlider);
            }
          }, 100);
        }
      }

      // Update applied filters display
      updateAppliedFiltersDisplay();
    }

    // Initialize price range slider
    function initializePriceRangeSlider() {
      const priceRange = document.getElementById('price-value-range');
      if (!priceRange || priceRange.noUiSlider) return;

      // Check if noUiSlider is available
      if (typeof noUiSlider === 'undefined') {
        console.warn('noUiSlider not available, retrying in 500ms...');
        setTimeout(initializePriceRangeSlider, 500);
        return;
      }

      const minValue = document.getElementById('price-min-value');
      const maxValue = document.getElementById('price-max-value');
      const minInput = document.getElementById('price-min-input');
      const maxInput = document.getElementById('price-max-input');
      
      if (!minValue || !maxValue) return;

      const currency = minValue.dataset.currency || '$';
      const rangeMin = parseInt(priceRange.dataset.rangeMin) || 0;
      const rangeMax = parseInt(priceRange.dataset.rangeMax) || 1000;
      const currentMin = parseInt(priceRange.dataset.min) || rangeMin;
      const currentMax = parseInt(priceRange.dataset.max) || rangeMax;

      try {
        noUiSlider.create(priceRange, {
          start: [currentMin, currentMax],
          connect: true,
          range: {
            'min': rangeMin,
            'max': rangeMax
          },
          step: 1
        });

        // Update display values
        priceRange.noUiSlider.on('update', function(values) {
          if (minValue) minValue.textContent = currency + Math.round(values[0]);
          if (maxValue) maxValue.textContent = currency + Math.round(values[1]);
          if (minInput) minInput.value = Math.round(values[0]);
          if (maxInput) maxInput.value = Math.round(values[1]);
        });

        // Handle change event
        priceRange.noUiSlider.on('change', function(values) {
          const filters = {
            'filter.v.price.gte': Math.round(values[0]),
            'filter.v.price.lte': Math.round(values[1])
          };
          
          // Add other active filters
          const checkboxes = document.querySelectorAll('.filter-checkbox');
          checkboxes.forEach(cb => {
            if (cb.checked) {
              filters[cb.name] = cb.value;
            }
          });
          
          updateProducts(filters, currentSort);
        });

      } catch (error) {
        console.error('Error initializing price range slider:', error);
      }
    }

    // Update applied filters display
    function updateAppliedFiltersDisplay() {
      if (!appliedFiltersContainer) return;
      
      appliedFiltersContainer.innerHTML = '';
      const urlParams = new URLSearchParams(window.location.search);
      const appliedFilters = [];

      // Check availability filters
      const availability = urlParams.get('filter.v.availability');
      if (availability) {
        const label = availability === '1' ? 'In stock' : 'Out of stock';
        appliedFilters.push({
          type: 'availability',
          label: `Availability: ${label}`,
          param: 'filter.v.availability',
          value: availability
        });
      }

      // Check other filters
      for (const [param, value] of urlParams.entries()) {
        if (param.startsWith('filter.v.') && param !== 'filter.v.availability' && param !== 'filter.v.price.gte' && param !== 'filter.v.price.lte') {
          const checkbox = document.querySelector(`input[name="${param}"][value="${value}"]`);
          if (checkbox) {
            const labelElement = checkbox.closest('label');
            const labelText = labelElement ? labelElement.querySelector('span').textContent : value;
            appliedFilters.push({
              type: param,
              label: labelText,
              param: param,
              value: value
            });
          }
        }
      }

      // Check price range
      const minPrice = urlParams.get('filter.v.price.gte');
      const maxPrice = urlParams.get('filter.v.price.lte');
      if (minPrice && maxPrice) {
        const currency = document.querySelector('#price-min-value')?.dataset.currency || '$';
        appliedFilters.push({
          type: 'price',
          label: `Price: ${currency}${minPrice} - ${currency}${maxPrice}`,
          param: 'price',
          value: `${minPrice}-${maxPrice}`
        });
      }

      // Render applied filters
      appliedFilters.forEach(filter => {
        const filterTag = document.createElement('span');
        filterTag.className = 'filter-tag';
        filterTag.innerHTML = `
          ${filter.label}
          <i class="icon icon-close" data-filter-type="${filter.type}" data-param="${filter.param}" data-value="${filter.value}"></i>
        `;
        appliedFiltersContainer.appendChild(filterTag);
      });

      // Show/hide clear all button
      const clearAllBtn = document.getElementById('remove-all');
      if (clearAllBtn) {
        clearAllBtn.style.display = appliedFilters.length > 0 ? 'block' : 'none';
      }
    }

    // Main function to update products with filters and sort
    async function updateProducts(filters = null, sort = null, page = 1) {
      if (isLoading) return;
      isLoading = true;

      try {
        // Show loading state
        if (productGrid) {
          productGrid.style.opacity = '0.6';
          productGrid.style.pointerEvents = 'none';
        }
        if (productList) {
          productList.style.opacity = '0.6';
          productList.style.pointerEvents = 'none';
        }

        // Add loading indicator
        const loadingIndicator = document.createElement('div');
        loadingIndicator.className = 'loading-indicator';
        loadingIndicator.innerHTML = `
          <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
          </div>
        `;
        loadingIndicator.style.cssText = `
          position: fixed;
          top: 50%;
          left: 50%;
          transform: translate(-50%, -50%);
          z-index: 9999;
          background: rgba(255, 255, 255, 0.9);
          padding: 20px;
          border-radius: 8px;
          box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        `;
        document.body.appendChild(loadingIndicator);

        const url = new URL(window.location.href);
        
        // Update filters
        if (filters) {
          // Clear existing filter parameters
          for (const param of url.searchParams.keys()) {
            if (param.startsWith('filter.v.')) {
              url.searchParams.delete(param);
            }
          }
          
          // Add new filter parameters
          for (const [key, value] of Object.entries(filters)) {
            if (value !== null && value !== undefined && value !== '') {
              url.searchParams.set(key, value);
            }
          }
        }

        // Update sort
        if (sort) {
          url.searchParams.set('sort_by', sort);
          currentSort = sort;
        }

        // Update page
        if (page > 1) {
          url.searchParams.set('page', page);
        } else {
          url.searchParams.delete('page');
        }

        // Fetch updated content
        const response = await fetch(url.toString());
        if (!response.ok) throw new Error('Network response was not ok');
        
        const html = await response.text();
        const parser = new DOMParser();
        const doc = parser.parseFromString(html, 'text/html');

        // Update product grids
        const newGrid = doc.querySelector('.tf-grid-layout');
        const newList = doc.querySelector('.tf-list-layout');
        
        if (newGrid && productGrid) {
          if (page > 1) {
            // Append for pagination
            const loadMoreContainer = productGrid.querySelector('.wd-load');
            if (loadMoreContainer) {
              const newProducts = newGrid.querySelectorAll('.loadItem');
              newProducts.forEach(product => {
                productGrid.insertBefore(product, loadMoreContainer);
              });
            }
          } else {
            // Replace for filtering/sorting
            productGrid.innerHTML = newGrid.innerHTML;
          }
        }
        
        if (newList && productList) {
          if (page > 1) {
            // Append for pagination
            const loadMoreContainer = productList.querySelector('.wd-load');
            if (loadMoreContainer) {
              const newProducts = newList.querySelectorAll('.loadItem');
              newProducts.forEach(product => {
                productList.insertBefore(product, loadMoreContainer);
              });
            }
          } else {
            // Replace for filtering/sorting
            productList.innerHTML = newList.innerHTML;
          }
        }

        // Check if no products were found and show appropriate message
        const gridProducts = productGrid ? productGrid.querySelectorAll('.loadItem') : [];
        const listProducts = productList ? productList.querySelectorAll('.loadItem') : [];
        
        if (gridProducts.length === 0 && listProducts.length === 0 && page === 1) {
          // No products found - show no products message
          const noProductsHTML = `
            <div class="no-products-found">
              <div class="no-products-content">
                <div class="no-products-icon">
                  <svg width="64" height="64" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M9 22H15C20 22 22 20 22 15V9C22 4 20 2 15 2H9C4 2 2 4 2 9V15C2 20 4 22 9 22Z" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                    <path d="M9.5 8.96997C9.5 8.96997 10.5 8.96997 11.5 9.96997C12.5 10.97 12.5 12.97 12.5 12.97" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                    <path d="M14.5 8.96997C14.5 8.96997 13.5 8.96997 12.5 9.96997C11.5 10.97 11.5 12.97 11.5 12.97" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                    <path d="M9.5 15.03C9.5 15.03 10.5 15.03 11.5 16.03C12.5 17.03 12.5 19.03 12.5 19.03" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                    <path d="M14.5 15.03C14.5 15.03 13.5 15.03 12.5 16.03C11.5 17.03 11.5 19.03 11.5 19.03" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                  </svg>
                </div>
                <h3 class="no-products-title">No products found</h3>
                <p class="no-products-description">We couldn't find any products matching your criteria. Try adjusting your filters or browse our other collections.</p>
                <div class="no-products-actions">
                  <a href="/collections" class="tf-btn btn-out-line-dark2">Browse all collections</a>
                </div>
              </div>
            </div>
          `;
          
          if (productGrid) {
            productGrid.innerHTML = noProductsHTML;
            // Remove grid layout classes when no products
            productGrid.className = 'wrapper-shop';
          }
          if (productList) {
            productList.innerHTML = noProductsHTML;
          }
          
          // Hide shop controls when no products found
          const shopControl = document.querySelector('.tf-shop-control');
          const metaFilterShop = document.querySelector('.meta-filter-shop');
          if (shopControl) shopControl.style.display = 'none';
          if (metaFilterShop) metaFilterShop.style.display = 'none';
        } else {
          // Show shop controls when products are found
          const shopControl = document.querySelector('.tf-shop-control');
          const metaFilterShop = document.querySelector('.meta-filter-shop');
          if (shopControl) shopControl.style.display = '';
          if (metaFilterShop) metaFilterShop.style.display = '';
          
          // Restore grid layout classes when products are found
          if (productGrid && !productGrid.classList.contains('tf-grid-layout')) {
            const defaultColumns = productGrid.dataset.defaultColumns || '4';
            productGrid.className = `wrapper-shop tf-grid-layout tf-col-${defaultColumns}`;
          }
        }

        // Update product counts
        const newCountGrid = doc.getElementById('product-count-grid');
        const newCountList = doc.getElementById('product-count-list');
        if (newCountGrid && productCountGrid) productCountGrid.innerHTML = newCountGrid.innerHTML;
        if (newCountList && productCountList) productCountList.innerHTML = newCountList.innerHTML;

        // Update URL without reload
        window.history.pushState({}, '', url.toString());
        
        // Update current filters
        currentFilters = new URLSearchParams(url.search);
        
        // Update applied filters display
        updateAppliedFiltersDisplay();
        
        // Update sort display
        if (sortValueDisplay && sort) {
          sortValueDisplay.textContent = sort.replace(/-/g, ' ').replace(/\b\w/g, l => l.toUpperCase());
        }

        // Reinitialize event listeners
        initializeProductEvents();
        
        // Check if there are more pages
        const hasNextPage = doc.querySelector('.wd-load');
        if (!hasNextPage && page > 1) {
          // Remove load more buttons if no more products
          const loadMoreBtns = document.querySelectorAll('.wd-load');
          loadMoreBtns.forEach(btn => btn.remove());
        }

      } catch (error) {
        console.error('Error updating products:', error);
        // Show error message to user
        const errorMessage = document.createElement('div');
        errorMessage.className = 'alert alert-danger';
        errorMessage.textContent = 'An error occurred while updating the products. Please try again.';
        errorMessage.style.cssText = `
          position: fixed;
          top: 20px;
          right: 20px;
          z-index: 9999;
          max-width: 300px;
        `;
        document.body.appendChild(errorMessage);
        setTimeout(() => errorMessage.remove(), 5000);
      } finally {
        isLoading = false;
        // Restore opacity and pointer events
        if (productGrid) {
          productGrid.style.opacity = '1';
          productGrid.style.pointerEvents = 'auto';
        }
        if (productList) {
          productList.style.opacity = '1';
          productList.style.pointerEvents = 'auto';
        }
        // Remove loading indicator
        const loadingIndicator = document.querySelector('.loading-indicator');
        if (loadingIndicator) {
          loadingIndicator.remove();
        }
      }
    }

    // Handle sort selection
    const sortItems = document.querySelectorAll('.select-item');
    sortItems.forEach(item => {
      item.addEventListener('click', function() {
        const sortValue = this.dataset.sortValue;
        
        // Update active state
        sortItems.forEach(s => s.classList.remove('active'));
        this.classList.add('active');
        
        // Update products
        updateProducts(null, sortValue);
        
        // Close dropdown
        if (sortDropdown) {
          const dropdown = bootstrap.Dropdown.getInstance(sortDropdown);
          if (dropdown) dropdown.hide();
        }
      });
    });

    // Handle layout switching
    const layoutSwitches = document.querySelectorAll('.tf-view-layout-switch');
    const listLayout = document.getElementById('listLayout');
    const gridLayout = document.getElementById('gridLayout');

    layoutSwitches.forEach(switchEl => {
      switchEl.addEventListener('click', function() {
        const layout = this.dataset.valueLayout;
        
        // Update active state
        layoutSwitches.forEach(s => s.classList.remove('active'));
        this.classList.add('active');

        // Show/hide layouts
        if (listLayout && gridLayout) {
          const hasProducts = gridLayout.querySelector('.card-product');

          listLayout.style.display = layout === 'list' ? 'block' : 'none';
          gridLayout.style.display = layout === 'list' ? 'none' : '';
          
          if (layout !== 'list' && hasProducts) {
            gridLayout.classList.remove('tf-col-2', 'tf-col-3', 'tf-col-4');
            if (!gridLayout.classList.contains('tf-grid-layout')) {
              gridLayout.classList.add('tf-grid-layout');
            }
            gridLayout.classList.add(layout);
          }
        }
      });
    });

    // Handle filter checkbox changes
    const filterCheckboxes = document.querySelectorAll('.filter-checkbox');
    filterCheckboxes.forEach(checkbox => {
      checkbox.addEventListener('change', function() {
        // Handle availability filters - make them mutually exclusive
        if (this.name === 'filter.v.availability') {
          const availabilityCheckboxes = document.querySelectorAll('input[name="filter.v.availability"]');
          availabilityCheckboxes.forEach(cb => {
            if (cb !== this) {
              cb.checked = false;
            }
          });
        }
        
        const filters = {};
        
        // Collect all checked filter values
        const checkboxes = document.querySelectorAll('.filter-checkbox');
        checkboxes.forEach(cb => {
          if (cb.checked) {
            filters[cb.name] = cb.value;
          }
        });
        
        // Add price filters if they exist
        const minPrice = document.getElementById('price-min-input')?.value;
        const maxPrice = document.getElementById('price-max-input')?.value;
        if (minPrice && maxPrice) {
          filters['filter.v.price.gte'] = minPrice;
          filters['filter.v.price.lte'] = maxPrice;
        }
        
        // Update products with new filters
        updateProducts(filters, currentSort);
      });
    });

    // Handle reset price button
    const resetPriceBtn = document.querySelector('.reset-price');
    if (resetPriceBtn) {
      resetPriceBtn.addEventListener('click', function() {
        const priceRange = document.getElementById('price-value-range');
        if (priceRange && priceRange.noUiSlider) {
          const minPrice = parseInt(priceRange.dataset.rangeMin);
          const maxPrice = parseInt(priceRange.dataset.rangeMax);
          priceRange.noUiSlider.set([minPrice, maxPrice]);
          
          const filters = {};
          // Add other active filters (excluding price)
          const checkboxes = document.querySelectorAll('.filter-checkbox');
          checkboxes.forEach(cb => {
            if (cb.checked) {
              filters[cb.name] = cb.value;
            }
          });
          
          updateProducts(filters, currentSort);
        }
      });
    }

    // Handle filter tag removal
    document.addEventListener('click', function(e) {
      if (e.target.closest('.filter-tag .icon-close')) {
        const icon = e.target.closest('.icon-close');
        const filterType = icon.dataset.filterType;
        const param = icon.dataset.param;
        const value = icon.dataset.value;
        
        // Remove specific filter
        if (filterType === 'price') {
          // Reset price range
          const priceRange = document.getElementById('price-value-range');
          if (priceRange && priceRange.noUiSlider) {
            const minPrice = parseInt(priceRange.dataset.rangeMin);
            const maxPrice = parseInt(priceRange.dataset.rangeMax);
            priceRange.noUiSlider.set([minPrice, maxPrice]);
          }
        } else {
          // Uncheck corresponding checkbox
          const checkbox = document.querySelector(`input[name="${param}"][value="${value}"]`);
          if (checkbox) {
            checkbox.checked = false;
          }
        }
        
        // Update products
        const filters = {};
        const checkboxes = document.querySelectorAll('.filter-checkbox');
        checkboxes.forEach(cb => {
          if (cb.checked) {
            filters[cb.name] = cb.value;
          }
        });
        
        // Add price if not being reset
        if (filterType !== 'price') {
          const minPrice = document.getElementById('price-min-input')?.value;
          const maxPrice = document.getElementById('price-max-input')?.value;
          if (minPrice && maxPrice) {
            filters['filter.v.price.gte'] = minPrice;
            filters['filter.v.price.lte'] = maxPrice;
          }
        }
        
        updateProducts(filters, currentSort);
      }
    });

    // Handle clear all filters
    const clearAllBtn = document.getElementById('remove-all');
    if (clearAllBtn) {
      clearAllBtn.addEventListener('click', function() {
        // Uncheck all checkboxes
        const checkboxes = document.querySelectorAll('.filter-checkbox');
        checkboxes.forEach(cb => {
          cb.checked = false;
        });
        
        // Reset price range
        const priceRange = document.getElementById('price-value-range');
        if (priceRange && priceRange.noUiSlider) {
          const minPrice = parseInt(priceRange.dataset.rangeMin);
          const maxPrice = parseInt(priceRange.dataset.rangeMax);
          priceRange.noUiSlider.set([minPrice, maxPrice]);
        }
        
        // Update products with no filters
        updateProducts({}, currentSort);
      });
    }

    // Handle load more functionality
    const loadMoreListBtn = document.getElementById('loadMoreListBtn');
    const loadMoreGridBtn = document.getElementById('loadMoreGridBtn');

    async function loadMoreProducts(layout) {
      if (isLoading) return;
      
      currentPage++;
      
      const filters = {};
      const checkboxes = document.querySelectorAll('.filter-checkbox');
      checkboxes.forEach(cb => {
        if (cb.checked) {
          filters[cb.name] = cb.value;
        }
      });
      
      // Add price filters
      const minPrice = document.getElementById('price-min-input')?.value;
      const maxPrice = document.getElementById('price-max-input')?.value;
      if (minPrice && maxPrice) {
        filters['filter.v.price.gte'] = minPrice;
        filters['filter.v.price.lte'] = maxPrice;
      }
      
      await updateProducts(filters, currentSort, currentPage);
    }

    if (loadMoreListBtn) {
      loadMoreListBtn.addEventListener('click', () => loadMoreProducts('list'));
    }

    if (loadMoreGridBtn) {
      loadMoreGridBtn.addEventListener('click', () => loadMoreProducts('grid'));
    }

    // Initialize infinite scroll if enabled
    function initializeInfiniteScroll() {
      const paginationType = document.querySelector('.wrapper-control-shop')?.dataset.paginationType;
      if (paginationType !== 'infinite_scroll') return;

      const options = {
        root: null,
        rootMargin: '100px',
        threshold: 0.1
      };

      const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting && !isLoading) {
            const layout = listLayout.style.display === 'block' ? 'list' : 'grid';
            loadMoreProducts(layout);
          }
        });
      }, options);

      // Observe the last product
      function observeLastProduct() {
        const layout = listLayout.style.display === 'block' ? listLayout : gridLayout;
        const products = layout.querySelectorAll('.loadItem');
        if (products.length > 0) {
          observer.observe(products[products.length - 1]);
        }
      }

      observeLastProduct();
    }

    // Initialize product-specific event listeners
    function initializeProductEvents() {
      // Add any product-specific event listeners here
      // For example, quick view, add to cart, etc.
      
      // Re-observe for infinite scroll
      if (document.querySelector('[data-pagination-type="infinite_scroll"]')) {
        initializeInfiniteScroll();
      }
    }

    // Initialize everything
    function initializeAll() {
      // Initialize price range slider first
      initializePriceRangeSlider();
      
      // Initialize filter state
      initializeFilterState();
      
      // Initialize product events
      initializeProductEvents();
      
      // Initialize infinite scroll
      initializeInfiniteScroll();
    }

    // Wait for DOM and dependencies to be ready
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', initializeAll);
    } else {
      // DOM is already ready, but wait a bit for noUiSlider to be available
      setTimeout(initializeAll, 100);
    }
  });
</script>

{% schema %}
{
  "name": "Collection",
  "settings": [
    {
      "type": "select",
      "id": "width",
      "label": "Section width",
      "options": [
        {
          "value": "full",
          "label": "Full width"
        },
        {
          "value": "boxed",
          "label": "Boxed"
        }
      ],
      "default": "boxed"
    },
    {
      "type": "range",
      "id": "padding_top",
      "label": "Padding top",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "default": 36
    },
    {
      "type": "range",
      "id": "padding_bottom",
      "label": "Padding bottom",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "default": 36
    },
    {
      "type": "select",
      "id": "filter_type",
      "label": "Filter Type",
      "options": [
        {
          "value": "drawer",
          "label": "Drawer"
        },
        {
          "value": "left",
          "label": "Left Sidebar"
        },
        {
          "value": "right",
          "label": "Right Sidebar"
        },
        {
          "value": "horizontal",
          "label": "Horizontal"
        }
      ],
      "default": "drawer"
    },
    {
      "type": "select",
      "id": "card_style",
      "label": "Product Card Style",
      "options": [
        {
          "value": "style-1",
          "label": "Style 1"
        },
        {
          "value": "style-2",
          "label": "Style 2"
        },
        {
          "value": "style-3",
          "label": "Style 3"
        }
      ],
      "default": "style-1"
    },
    {
      "type": "select",
      "id": "default_grid_columns",
      "label": "Default Grid Columns",
      "options": [
        {
          "value": "3",
          "label": "3 Columns"
        },
        {
          "value": "4",
          "label": "4 Columns"
        }
      ],
      "default": "4"
    },
    {
      "type": "range",
      "id": "products_per_page",
      "label": "Products per page",
      "min": 8,
      "max": 48,
      "step": 4,
      "default": 12
    },
    {
      "type": "select",
      "id": "default_view",
      "label": "Default view",
      "options": [
        {
          "value": "grid",
          "label": "Grid view"
        },
        {
          "value": "list",
          "label": "List view"
        }
      ],
      "default": "grid"
    },
    {
      "type": "select",
      "id": "default_sort",
      "label": "Default sort",
      "options": [
        {
          "value": "best-selling",
          "label": "Best selling"
        },
        {
          "value": "title-ascending",
          "label": "Alphabetically, A-Z"
        },
        {
          "value": "title-descending",
          "label": "Alphabetically, Z-A"
        },
        {
          "value": "price-ascending",
          "label": "Price, low to high"
        },
        {
          "value": "price-descending",
          "label": "Price, high to low"
        }
      ],
      "default": "best-selling"
    },
    {
      "type": "select",
      "id": "pagination_type",
      "label": "Pagination Type",
      "options": [
        {
          "value": "pagination",
          "label": "Pagination"
        },
        {
          "value": "load_more",
          "label": "Load More"
        },
        {
          "value": "infinite_scroll",
          "label": "Infinite Scroll"
        }
      ],
      "default": "pagination"
    },
    {
      "type": "header",
      "content": "On Sale Section"
    },
    {
      "type": "checkbox",
      "id": "show_on_sale",
      "label": "Show On Sale Section",
      "default": true
    },
    {
      "type": "text",
      "id": "on_sale_title",
      "label": "On Sale Title",
      "default": "On sale"
    },
    {
      "type": "header",
      "content": "Banner Section"
    },
    {
      "type": "checkbox",
      "id": "show_banner",
      "label": "Show Banner",
      "default": true
    },
    {
      "type": "image_picker",
      "id": "filter_banner",
      "label": "Banner Image"
    },
    {
      "type": "text",
      "id": "banner_title",
      "label": "Banner Title",
      "default": "Elevate\nYour Style"
    },
    {
      "type": "text",
      "id": "banner_button_text",
      "label": "Button Text",
      "default": "Shop Now"
    },
    {
      "type": "url",
      "id": "banner_button_url",
      "label": "Button Link"
    },
    {
      "type": "header",
      "content": "Filter collections"
    },
    {
      "type": "text",
      "id": "collections_title",
      "label": "Collections Title",
      "default": "Collections",
      "info": "Not show if blank"
    },
    {
      "type": "radio",
      "id": "categories_mode",
      "label": "Show all / Show a link list",
      "options": [
        { "value": "all", "label": "Show all" },
        { "value": "link_list", "label": "Show link list" }
      ],
      "default": "all"
    },
    {
      "type": "link_list",
      "id": "categories_link_list",
      "label": "Choose link list"
    },
    {
      "type": "checkbox",
      "id": "categories_show_count",
      "label": "Show count",
      "default": false
    }
  ],
  "presets": [
    {
      "name": "Collection",
      "category": "Collection",
      "settings": {
        "width": "boxed",
        "padding_top": 36,
        "padding_bottom": 36,
        "filter_type": "drawer",
        "card_style": "style-1",
        "default_grid_columns": "4",
        "products_per_page": 12,
        "default_view": "grid",
        "default_sort": "best-selling",
        "pagination_type": "pagination",
        "collections_title": "Collections",
        "show_on_sale": true,
        "on_sale_title": "On sale",
        "show_banner": true,
        "banner_title": "Elevate\nYour Style",
        "banner_button_text": "Shop Now"
      }
    }
  ]
}
{% endschema %}