{% comment %}
  Collection Section
  - Includes filter controls, sorting options, layout switching
  - Responsive product grid with list view option
  - Product cards with hover effects and quick actions
{% endcomment %}

{% paginate collection.products by section.settings.products_per_page %}
<section class="flat-spacing-24" style="padding-top: {{ section.settings.padding_top }}px; padding-bottom: {{ section.settings.padding_bottom }}px;">
  {% if section.settings.width == 'boxed' %}
    <div class="container">
  {% endif %}
    {%- case section.settings.filter_type -%}
      {%- when 'drawer' -%}
        <!-- Filter Drawer -->
        <div class="offcanvas offcanvas-start canvas-sidebar canvas-filter" id="filterShop">
          <div class="canvas-wrapper">
            <div class="canvas-header">
              <span class="title">Filter</span>
              <button class="icon-close icon-close-popup" data-bs-dismiss="offcanvas" aria-label="Close"></button>
            </div>
            <div class="canvas-body">
              {% render 'filter-content' %}
            </div>
          </div>
        </div>
      {%- when 'left' -%}
        <!-- Left Sidebar -->
        <div class="row">
          <div class="col-lg-3">
            <div class="filter-sidebar filter-left">
              <div class="filter-content">
                {% render 'filter-content' %}
              </div>
            </div>
          </div>
          <div class="col-lg-9">
      {%- when 'right' -%}
        <!-- Right Sidebar -->
        <div class="row">
          <div class="col-lg-9">
        {%- when 'drawer' -%}
          <div class="tf-shop-control">
            {%- if section.settings.filter_type == 'drawer' -%}
              <div class="tf-group-filter">
                <a href="#filterShop" data-bs-toggle="offcanvas" aria-controls="filterShop" class="tf-btn-filter">
                  <span class="icon icon-filter"></span>
                  <span class="text">Filter</span>
                </a>
            {%- endif -%}
            <div class="tf-dropdown-sort" data-bs-toggle="dropdown">
              <div class="btn-select">
                <span class="text-sort-value">{{ collection.sort_by | default: 'best-selling' | replace: '-', ' ' | capitalize }}</span>
                <span class="icon icon-arr-down"></span>
              </div>
              <div class="dropdown-menu">
                <div class="select-item{% if collection.sort_by == 'best-selling' %} active{% endif %}" data-sort-value="best-selling">
                  <span class="text-value-item">Best selling</span>
                </div>
                <div class="select-item{% if collection.sort_by == 'title-ascending' %} active{% endif %}" data-sort-value="title-ascending">
                  <span class="text-value-item">Alphabetically, A-Z</span>
                </div>
                <div class="select-item{% if collection.sort_by == 'title-descending' %} active{% endif %}" data-sort-value="title-descending">
                  <span class="text-value-item">Alphabetically, Z-A</span>
                </div>
                <div class="select-item{% if collection.sort_by == 'price-ascending' %} active{% endif %}" data-sort-value="price-ascending">
                  <span class="text-value-item">Price, low to high</span>
                </div>
                <div class="select-item{% if collection.sort_by == 'price-descending' %} active{% endif %}" data-sort-value="price-descending">
                  <span class="text-value-item">Price, high to low</span>
                </div>
              </div>
            </div>
            {%- if section.settings.filter_type == 'drawer' -%}
              </div>
            {%- endif -%}
            <ul class="tf-control-layout">
              {% comment %} <li class="tf-view-layout-switch sw-layout-list list-layout" data-value-layout="list">
                <div class="item icon-list">
                  <span></span>
                  <span></span>
                </div>
              </li> {% endcomment %}
              <li class="tf-view-layout-switch sw-layout-2" data-value-layout="tf-col-2">
                <div class="item icon-grid-2">
                  <span></span>
                  <span></span>
                </div>
              </li>
              <li class="tf-view-layout-switch sw-layout-3" data-value-layout="tf-col-3">
                <div class="item icon-grid-3">
                  <span></span>
                  <span></span>
                  <span></span>
                </div>
              </li>
              <li class="tf-view-layout-switch sw-layout-4{% if section.settings.default_grid_columns == '4' %} active{% endif %}" data-value-layout="tf-col-4">
                <div class="item icon-grid-4">
                  <span></span>
                  <span></span>
                  <span></span>
                  <span></span>
                </div>
              </li>
            </ul>
          </div>
      
      {%- when 'horizontal' -%}
        <div class="tf-shop-control">
          <div class="tf-dropdown-sort" data-bs-toggle="dropdown">
            <div class="btn-select">
              <span class="text-sort-value">{{ collection.sort_by | default: 'best-selling' | replace: '-', ' ' | capitalize }}</span>
              <span class="icon icon-arr-down"></span>
            </div>
            <div class="dropdown-menu">
              <div class="select-item{% if collection.sort_by == 'best-selling' %} active{% endif %}" data-sort-value="best-selling">
                <span class="text-value-item">Best selling</span>
              </div>
              <div class="select-item{% if collection.sort_by == 'title-ascending' %} active{% endif %}" data-sort-value="title-ascending">
                <span class="text-value-item">Alphabetically, A-Z</span>
              </div>
              <div class="select-item{% if collection.sort_by == 'title-descending' %} active{% endif %}" data-sort-value="title-descending">
                <span class="text-value-item">Alphabetically, Z-A</span>
              </div>
              <div class="select-item{% if collection.sort_by == 'price-ascending' %} active{% endif %}" data-sort-value="price-ascending">
                <span class="text-value-item">Price, low to high</span>
              </div>
              <div class="select-item{% if collection.sort_by == 'price-descending' %} active{% endif %}" data-sort-value="price-descending">
                <span class="text-value-item">Price, high to low</span>
              </div>
            </div>
          </div>
          {%- if section.settings.filter_type == 'drawer' -%}
            </div>
          {%- endif -%}
          <ul class="tf-control-layout">
            {% comment %} <li class="tf-view-layout-switch sw-layout-list list-layout" data-value-layout="list">
              <div class="item icon-list">
                <span></span>
                <span></span>
              </div>
            </li> {% endcomment %}
            <li class="tf-view-layout-switch sw-layout-2" data-value-layout="tf-col-2">
              <div class="item icon-grid-2">
                <span></span>
                <span></span>
              </div>
            </li>
            <li class="tf-view-layout-switch sw-layout-3" data-value-layout="tf-col-3">
              <div class="item icon-grid-3">
                <span></span>
                <span></span>
                <span></span>
              </div>
            </li>
            <li class="tf-view-layout-switch sw-layout-4{% if section.settings.default_grid_columns == '4' %} active{% endif %}" data-value-layout="tf-col-4">
              <div class="item icon-grid-4">
                <span></span>
                <span></span>
                <span></span>
                <span></span>
              </div>
            </li>
          </ul>
        </div>
        <!-- Horizontal Filter -->
        <div class="tf-filter-dropdown">
          <span class="title-filter">Filter:</span>
          <div class="meta-dropdown-filter">
            <div class="dropdown dropdown-filter">
              <div class="dropdown-toggle" id="availability" data-bs-toggle="dropdown" aria-expanded="false" data-bs-auto-close="outside">
                <span class="text-value">Availability</span>
                <span class="icon icon-arr-down"></span>
              </div>
              <div class="dropdown-menu" aria-labelledby="availability">
                <ul class="filter-group-check">
                  <li class="list-item">
                    <input type="radio" name="availability" class="tf-check" id="inStock">
                    <label for="inStock" class="label"><span>In stock</span>&nbsp;<span class="count">({{ collection.products | where: "available", true | size }})</span></label>
                  </li>
                  <li class="list-item">
                    <input type="radio" name="availability" class="tf-check" id="outStock">
                    <label for="outStock" class="label"><span>Out of stock</span>&nbsp;<span class="count">({{ collection.products | where: "available", false | size }})</span></label>
                  </li>
                </ul>
              </div>
            </div>
            <div class="dropdown dropdown-filter">
              <div class="dropdown-toggle" id="price" data-bs-toggle="dropdown" aria-expanded="false" data-bs-auto-close="outside">
                <span class="text-value">Price</span>
                <span class="icon icon-arr-down"></span>
              </div>
              <div class="dropdown-menu" aria-labelledby="price">
                <div class="widget-price filter-price">
                  <div class="price-val-range" id="price-value-range" data-min="0" data-max="500"></div>
                  <div class="box-value-price">
                    <span class="text-sm">Price:</span>
                    <div class="price-box">
                      <div class="price-val" id="price-min-value" data-currency="$"></div>
                      <span>-</span>
                      <div class="price-val" id="price-max-value" data-currency="$"></div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div class="dropdown dropdown-filter">
              <div class="dropdown-toggle" id="color" data-bs-toggle="dropdown" aria-expanded="false" data-bs-auto-close="outside">
                <span class="text-value">Color</span>
                <span class="icon icon-arr-down"></span>
              </div>
              <div class="dropdown-menu" aria-labelledby="color">
                <div class="filter-color-box flat-check-list">
                  <div class="check-item color-item color-check"><span class="color bg-yellow"></span><span class="color-text">Yellow</span></div>
                  <div class="check-item color-item color-check"><span class="color bg-dark"></span><span class="color-text">Black</span></div>
                  <div class="check-item color-item color-check line"><span class="color bg-white"></span><span class="color-text">White</span></div>
                  <div class="check-item color-item color-check"><span class="color bg-purple-3"></span><span class="color-text">Purple</span></div>
                  <div class="check-item color-item color-check"><span class="color bg-light-orange"></span><span class="color-text">Light Orange</span></div>
                  <div class="check-item color-item color-check"><span class="color bg-light-pink-4"></span><span class="color-text">Light Pink</span></div>
                  <div class="check-item color-item color-check"><span class="color bg-pink"></span><span class="color-text">Pink</span></div>
                  <div class="check-item color-item color-check"><span class="color bg-dark-green"></span><span class="color-text">Dark Green</span></div>
                  <div class="check-item color-item color-check"><span class="color bg-grey-4"></span><span class="color-text">Grey</span></div>
                </div>
              </div>
            </div>
            <div class="dropdown dropdown-filter">
              <div class="dropdown-toggle" id="size" data-bs-toggle="dropdown" aria-expanded="false" data-bs-auto-close="outside">
                <span class="text-value">Size</span>
                <span class="icon icon-arr-down"></span>
              </div>
              <div class="dropdown-menu" aria-labelledby="size">
                <div class="filter-size-box flat-check-list">
                  <div class="check-item size-item size-check"><span class="size">XS</span>&nbsp;<span class="count">(10)</span></div>
                  <div class="check-item size-item size-check"><span class="size">S</span>&nbsp;<span class="count">(8)</span></div>
                  <div class="check-item size-item size-check"><span class="size">L</span>&nbsp;<span class="count">(20)</span></div>
                  <div class="check-item size-item size-check"><span class="size">M</span>&nbsp;<span class="count">(10)</span></div>
                  <div class="check-item size-item size-check"><span class="size">XL</span>&nbsp;<span class="count">(20)</span></div>
                </div>
              </div>
            </div>
            <div class="dropdown dropdown-filter">
              <div class="dropdown-toggle" id="brand" data-bs-toggle="dropdown" aria-expanded="false" data-bs-auto-close="outside">
                <span class="text-value">Brand</span>
                <span class="icon icon-arr-down"></span>
              </div>
              <div class="dropdown-menu" aria-labelledby="brand">
                <ul class="filter-group-check">
                  <li class="list-item">
                    <input type="radio" name="brand" class="tf-check" id="Vineta">
                    <label for="Vineta" class="label"><span>Vineta</span>&nbsp;<span class="count">(11)</span></label>
                  </li>
                  <li class="list-item">
                    <input type="radio" name="brand" class="tf-check" id="Zotac">
                    <label for="Zotac" class="label"><span>Zotac</span>&nbsp;<span class="count">(20)</span></label>
                  </li>
                </ul>
              </div>
            </div>
          </div>
        </div>
    {%- endcase -%}

    <div class="wrapper-control-shop" data-pagination-type="{{ section.settings.pagination_type }}">
      <div class="meta-filter-shop">
        <div id="product-count-grid" class="count-text"></div>
        <div id="product-count-list" class="count-text"></div>
        <div id="applied-filters">
          {% if current_tags.size > 0 %}
            {% for tag in current_tags %}
              <span class="filter-tag">{{ tag }} <i class="icon icon-close"></i></span>
            {% endfor %}
          {% endif %}
        </div>
        {% if current_tags.size > 0 %}
          <button id="remove-all" class="remove-all-filters"><i class="icon icon-close"></i> Clear all filter</button>
        {% endif %}
      </div>

      <!-- List View Layout -->
      <div class="tf-list-layout wrapper-shop" id="listLayout" style="display: none;">
        {% for product in collection.products %}
          <div class="loadItem card-product style-list" data-availability="{{ product.available | default: 'In stock' }}" data-brand="{{ product.vendor }}">
            {% render 'card-product', product: product, show_color_swatches: true, show_size_swatches: true, show_case_type: true, size_swatches: true %}
          </div>
        {% endfor %}

        {% if section.settings.pagination_type == 'load_more' %}
          {% if paginate.next %}
            <div class="wd-load">
              <button id="loadMoreListBtn" class="tf-btn btn-out-line-dark2 tf-loading loadmore">
                <span class="text">Load more</span>
                <div class="spinner-circle">
                  <span class="spinner-circle1 spinner-child"></span>
                  <span class="spinner-circle2 spinner-child"></span>
                  <span class="spinner-circle3 spinner-child"></span>
                  <span class="spinner-circle4 spinner-child"></span>
                  <span class="spinner-circle5 spinner-child"></span>
                  <span class="spinner-circle6 spinner-child"></span>
                  <span class="spinner-circle7 spinner-child"></span>
                  <span class="spinner-circle8 spinner-child"></span>
                  <span class="spinner-circle9 spinner-child"></span>
                </div>
              </button>
            </div>
          {% endif %}
        {% else %}
          {% if paginate.pages > 1 %}
            <ul class="wg-pagination">
              {% if paginate.previous %}
                <li>
                  <a href="{{ paginate.previous.url }}" class="pagination-item"><i class="icon-arr-left"></i></a>
                </li>
              {% endif %}
              
              {% for part in paginate.parts %}
                {% if part.is_link %}
                  <li>
                    <a href="{{ part.url }}" class="pagination-item">{{ part.title }}</a>
                  </li>
                {% else %}
                  <li class="{% if part.title == paginate.current_page %}active{% endif %}">
                    <div class="pagination-item">{{ part.title }}</div>
                  </li>
                {% endif %}
              {% endfor %}

              {% if paginate.next %}
                <li>
                  <a href="{{ paginate.next.url }}" class="pagination-item"><i class="icon-arr-right2"></i></a>
                </li>
              {% endif %}
            </ul>
          {% endif %}
        {% endif %}
      </div>

      <!-- Grid View Layout -->
      <div class="wrapper-shop tf-grid-layout tf-col-{{ section.settings.default_grid_columns }}" id="gridLayout">
        {% for product in collection.products %}
          <div class="loadItem card-product grid style-1{% if product.options contains 'Size' %} card-product-size{% endif %}" 
               data-availability="{{ product.available | default: 'In stock' }}" 
               data-brand="{{ product.vendor }}">
            {% render 'card-product', product: product, show_color_swatches: true, show_size_swatches: true, show_case_type: true, size_swatches: true %}
          </div>
        {% endfor %}

        {% if section.settings.pagination_type == 'load_more' %}
          {% if paginate.next %}
            <div class="wd-load d-flex justify-content-center">
              <button id="loadMoreGridBtn" class="tf-btn btn-out-line-dark2 tf-loading loadmore">
                <span class="text">Load more</span>
                <div class="spinner-circle">
                  <span class="spinner-circle1 spinner-child"></span>
                  <span class="spinner-circle2 spinner-child"></span>
                  <span class="spinner-circle3 spinner-child"></span>
                  <span class="spinner-circle4 spinner-child"></span>
                  <span class="spinner-circle5 spinner-child"></span>
                  <span class="spinner-circle6 spinner-child"></span>
                  <span class="spinner-circle7 spinner-child"></span>
                  <span class="spinner-circle8 spinner-child"></span>
                  <span class="spinner-circle9 spinner-child"></span>
                </div>
              </button>
            </div>
          {% endif %}
        {% elsif section.settings.pagination_type == 'pagination' %}
          {% if paginate.pages > 1 %}
            <ul class="wg-pagination">
              {% if paginate.previous %}
                <li>
                  <a href="{{ paginate.previous.url }}" class="pagination-item"><i class="icon-arr-left"></i></a>
                </li>
              {% endif %}
              
              {% for part in paginate.parts %}
                {% if part.is_link %}
                  <li>
                    <a href="{{ part.url }}" class="pagination-item">{{ part.title }}</a>
                  </li>
                {% else %}
                  <li class="{% if part.title == paginate.current_page %}active{% endif %}">
                    <div class="pagination-item">{{ part.title }}</div>
                  </li>
                {% endif %}
              {% endfor %}

              {% if paginate.next %}
                <li>
                  <a href="{{ paginate.next.url }}" class="pagination-item"><i class="icon-arr-right2"></i></a>
                </li>
              {% endif %}
            </ul>
          {% endif %}
        {% else %}
          {% if paginate.next %}
            <div class="wd-load d-flex justify-content-center" id="infiniteScrollLoader" style="display: none;">
              <button class="tf-btn btn-dark2 tf-loading animate-btn animate-dark">
                <div class="spinner-circle">
                  <span class="spinner-circle1 spinner-child"></span>
                  <span class="spinner-circle2 spinner-child"></span>
                  <span class="spinner-circle3 spinner-child"></span>
                  <span class="spinner-circle4 spinner-child"></span>
                  <span class="spinner-circle5 spinner-child"></span>
                  <span class="spinner-circle6 spinner-child"></span>
                  <span class="spinner-circle7 spinner-child"></span>
                  <span class="spinner-circle8 spinner-child"></span>
                  <span class="spinner-circle9 spinner-child"></span>
                </div>
              </button>
            </div>
          {% endif %}
        {% endif %}
      </div>
    </div>

    {%- if section.settings.filter_type == 'left' or section.settings.filter_type == 'right' -%}
      </div>
      {%- if section.settings.filter_type == 'right' -%}
        <div class="col-lg-3">
          <div class="filter-sidebar filter-right">
            <div class="filter-content">
              {% render 'filter-content' %}
            </div>
          </div>
        </div>
      {%- endif -%}
      </div>
    {%- endif -%}
  {% if section.settings.width == 'boxed' %}
    </div>
  {% endif %}
</section>
{% endpaginate %}

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Handle sort selection
    const sortItems = document.querySelectorAll('.select-item');
    const sortDropdown = document.querySelector('.tf-dropdown-sort');
    const sortValueDisplay = document.querySelector('.text-sort-value');
    const productGrid = document.querySelector('.tf-grid-layout');
    const productList = document.querySelector('.tf-list-layout');

    // Function to update products with new sort
    async function updateProductsWithSort(sortValue) {
      const url = new URL(window.location.href);
      // Preserve all existing parameters
      const existingParams = new URLSearchParams(url.search);
      // Update or set sort parameter
      existingParams.set('sort_by', sortValue);
      
      try {
        const response = await fetch(url.pathname + '?' + existingParams.toString());
        const html = await response.text();
        const parser = new DOMParser();
        const doc = parser.parseFromString(html, 'text/html');

        // Update product grids
        const newGrid = doc.querySelector('.tf-grid-layout');
        const newList = doc.querySelector('.tf-list-layout');
        if (newGrid && productGrid) productGrid.innerHTML = newGrid.innerHTML;
        if (newList && productList) productList.innerHTML = newList.innerHTML;

        // Update sort value display
        if (sortValueDisplay) {
          sortValueDisplay.textContent = sortValue.replace(/-/g, ' ').replace(/\b\w/g, l => l.toUpperCase());
        }

        // Update active state
        sortItems.forEach(item => {
          item.classList.toggle('active', item.dataset.sortValue === sortValue);
        });

        // Update URL without reload, preserving all parameters
        window.history.pushState({}, '', url.pathname + '?' + existingParams.toString());

        // Reinitialize any necessary event listeners
        initializeProductEvents();
      } catch (error) {
        console.error('Error updating products:', error);
      }
    }

    // Function to initialize product-specific event listeners
    function initializeProductEvents() {
      // Add any product-specific event listeners here
      // For example, quick view, add to cart, etc.
    }

    // Handle sort selection
    sortItems.forEach(item => {
      item.addEventListener('click', function() {
        const sortValue = this.dataset.sortValue;
        updateProductsWithSort(sortValue);
        
        // Close dropdown after selection
        if (sortDropdown) {
          const dropdown = bootstrap.Dropdown.getInstance(sortDropdown);
          if (dropdown) {
            dropdown.hide();
          }
        }
      });
    });

    // Handle layout switching
    const layoutSwitches = document.querySelectorAll('.tf-view-layout-switch');
    const listLayout = document.getElementById('listLayout');
    const gridLayout = document.getElementById('gridLayout');

    layoutSwitches.forEach(switchEl => {
      switchEl.addEventListener('click', function() {
        const layout = this.dataset.valueLayout;
        
        // Update active state
        layoutSwitches.forEach(s => s.classList.remove('active'));
        this.classList.add('active');

        // Show/hide layouts
        listLayout.style.display = layout === 'list' ? 'block' : 'none';
        gridLayout.style.display = layout === 'list' ? 'none' : '';
        if (layout !== 'list') {
          gridLayout.className = `wrapper-shop tf-grid-layout ${layout}`;
        }
      });
    });

    // Handle filter tag removal
    const filterTags = document.querySelectorAll('.filter-tag');
    filterTags.forEach(tag => {
      tag.addEventListener('click', function() {
        const tagText = this.textContent.trim();
        const url = new URL(window.location.href);
        const tags = url.searchParams.get('filter.v.tag')?.split(',') || [];
        const newTags = tags.filter(t => t !== tagText);
        
        if (newTags.length > 0) {
          url.searchParams.set('filter.v.tag', newTags.join(','));
        } else {
          url.searchParams.delete('filter.v.tag');
        }
        
        updateProductsWithSort(url.searchParams.get('sort_by') || 'best-selling');
      });
    });

    // Handle clear all filters
    const clearAllBtn = document.getElementById('remove-all');
    if (clearAllBtn) {
      clearAllBtn.addEventListener('click', function() {
        const url = new URL(window.location.href);
        // Remove all filter parameters
        for (const param of url.searchParams.keys()) {
          if (param.startsWith('filter.v.')) {
            url.searchParams.delete(param);
          }
        }
        updateProductsWithSort(url.searchParams.get('sort_by') || 'best-selling');
      });
    }

    // Handle load more functionality
    const loadMoreListBtn = document.getElementById('loadMoreListBtn');
    const loadMoreGridBtn = document.getElementById('loadMoreGridBtn');
    let currentPage = 1;
    let isLoading = false;

    async function loadMoreProducts(layout) {
      if (isLoading) return;
      isLoading = true;

      // Show spinner if infinite scroll is enabled
      const infiniteScrollLoader = document.getElementById('infiniteScrollLoader');
      if (infiniteScrollLoader) {
        infiniteScrollLoader.style.display = 'flex';
      }

      const url = new URL(window.location.href);
      currentPage++;
      url.searchParams.set('page', currentPage);

      try {
        const response = await fetch(url);
        const html = await response.text();
        const parser = new DOMParser();
        const doc = parser.parseFromString(html, 'text/html');

        const newProducts = layout === 'list' 
          ? doc.querySelectorAll('.tf-list-layout .loadItem')
          : doc.querySelectorAll('.tf-grid-layout .loadItem');

        const targetContainer = layout === 'list' ? listLayout : gridLayout;
        
        newProducts.forEach(product => {
          targetContainer.insertBefore(product, targetContainer.querySelector('.wd-load'));
        });

        // Check if there are more products to load
        const hasNextPage = doc.querySelector('.tf-list-layout .wd-load, .tf-grid-layout .wd-load');
        if (!hasNextPage) {
          // Remove load more button if no more products
          const loadMoreBtn = layout === 'list' ? loadMoreListBtn : loadMoreGridBtn;
          if (loadMoreBtn) {
            loadMoreBtn.closest('.wd-load').remove();
          }
          // Remove infinite scroll loader if no more products
          if (infiniteScrollLoader) {
            infiniteScrollLoader.remove();
          }
        }

        // Only update URL for regular pagination
        const paginationType = document.querySelector('.wrapper-control-shop').dataset.paginationType;
        if (paginationType === 'pagination') {
          window.history.pushState({}, '', url.toString());
        }

        // Reinitialize any necessary event listeners
        initializeProductEvents();
      } catch (error) {
        console.error('Error loading more products:', error);
      } finally {
        isLoading = false;
        // Hide spinner after loading is complete
        if (infiniteScrollLoader) {
          infiniteScrollLoader.style.display = 'none';
        }
      }
    }

    // Infinite scroll functionality
    function initializeInfiniteScroll() {
      const options = {
        root: null,
        rootMargin: '0px',
        threshold: 0.1
      };

      const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting && !isLoading) {
            const layout = listLayout.style.display === 'block' ? 'list' : 'grid';
            loadMoreProducts(layout);
          }
        });
      }, options);

      // Observe the last product in the grid/list
      function observeLastProduct() {
        const layout = listLayout.style.display === 'block' ? listLayout : gridLayout;
        const products = layout.querySelectorAll('.loadItem');
        if (products.length > 0) {
          observer.observe(products[products.length - 1]);
        }
      }

      // Initial observation
      observeLastProduct();

      // Re-observe after new products are loaded
      const originalLoadMoreProducts = loadMoreProducts;
      loadMoreProducts = async function(layout) {
        await originalLoadMoreProducts(layout);
        observeLastProduct();
      };
    }

    // Initialize infinite scroll if enabled
    if (document.querySelector('[data-pagination-type="infinite_scroll"]')) {
      initializeInfiniteScroll();
    }

    if (loadMoreListBtn) {
      loadMoreListBtn.addEventListener('click', () => loadMoreProducts('list'));
    }

    if (loadMoreGridBtn) {
      loadMoreGridBtn.addEventListener('click', () => loadMoreProducts('grid'));
    }

    // Initialize product events
    initializeProductEvents();

    // Handle availability filter
    const availabilityInputs = document.querySelectorAll('input[name="availability"]');
    availabilityInputs.forEach(input => {
      input.addEventListener('change', async function() {
        const url = new URL(window.location.href);
        if (this.checked) {
          const value = this.id === 'inStock' ? '1' : '0';
          url.searchParams.set('filter.v.availability', value);
        } else {
          url.searchParams.delete('filter.v.availability');
        }

        try {
          const response = await fetch(url);
          const html = await response.text();
          const parser = new DOMParser();
          const doc = parser.parseFromString(html, 'text/html');

          // Update product grids
          const newGrid = doc.querySelector('.tf-grid-layout');
          const newList = doc.querySelector('.tf-list-layout');
          if (newGrid && productGrid) productGrid.innerHTML = newGrid.innerHTML;
          if (newList && productList) productList.innerHTML = newList.innerHTML;

          // Update URL without reload
          window.history.pushState({}, '', url.toString());

          // Reinitialize any necessary event listeners
          initializeProductEvents();
        } catch (error) {
          console.error('Error updating products:', error);
        }
      });
    });

    // Handle brand filter
    const brandInputs = document.querySelectorAll('input[name="brand"]');
    brandInputs.forEach(input => {
      input.addEventListener('change', async function() {
        const url = new URL(window.location.href);
        if (this.checked) {
          url.searchParams.set('filter.v.option.brand', this.id);
        } else {
          url.searchParams.delete('filter.v.option.brand');
        }

        try {
          const response = await fetch(url);
          const html = await response.text();
          const parser = new DOMParser();
          const doc = parser.parseFromString(html, 'text/html');

          // Update product grids
          const newGrid = doc.querySelector('.tf-grid-layout');
          const newList = doc.querySelector('.tf-list-layout');
          if (newGrid && productGrid) productGrid.innerHTML = newGrid.innerHTML;
          if (newList && productList) productList.innerHTML = newList.innerHTML;

          // Update URL without reload
          window.history.pushState({}, '', url.toString());

          // Reinitialize any necessary event listeners
          initializeProductEvents();
        } catch (error) {
          console.error('Error updating products:', error);
        }
      });
    });

    // Initialize price range slider
    const priceRange = document.getElementById('price-value-range');
    if (priceRange) {
      const minPrice = parseInt(priceRange.dataset.min);
      const maxPrice = parseInt(priceRange.dataset.max);
      const rangeMin = parseInt(priceRange.dataset.rangeMin);
      const rangeMax = parseInt(priceRange.dataset.rangeMax);
      
      noUiSlider.create(priceRange, {
        start: [minPrice, maxPrice],
        connect: true,
        range: {
          'min': rangeMin,
          'max': rangeMax
        }
      });

      const minValue = document.getElementById('price-min-value');
      const maxValue = document.getElementById('price-max-value');
      const currency = minValue.dataset.currency;

      priceRange.noUiSlider.on('update', function(values) {
        minValue.textContent = currency + Math.round(values[0]);
        maxValue.textContent = currency + Math.round(values[1]);
      });
    }

    // Handle filter form submission
    const filterForm = document.getElementById('collection-filters-form');
    if (filterForm) {
      filterForm.addEventListener('submit', async function(e) {
        e.preventDefault();
        const formData = new FormData(filterForm);
        const url = new URL(window.location.href);
        
        // Clear existing filter parameters
        for (const param of url.searchParams.keys()) {
          if (param.startsWith('filter.v.')) {
            url.searchParams.delete(param);
          }
        }
        
        // Add new filter parameters
        for (const [key, value] of formData.entries()) {
          if (value) {
            url.searchParams.set(key, value);
          }
        }
        
        try {
          const response = await fetch(url);
          const html = await response.text();
          const parser = new DOMParser();
          const doc = parser.parseFromString(html, 'text/html');
          
          // Update product grids
          const newGrid = doc.querySelector('.tf-grid-layout');
          const newList = doc.querySelector('.tf-list-layout');
          const productGrid = document.querySelector('.tf-grid-layout');
          const productList = document.querySelector('.tf-list-layout');
          
          if (newGrid && productGrid) productGrid.innerHTML = newGrid.innerHTML;
          if (newList && productList) productList.innerHTML = newList.innerHTML;
          
          // Update URL without reload
          window.history.pushState({}, '', url.toString());
          
          // Reinitialize any necessary event listeners
          initializeProductEvents();
        } catch (error) {
          console.error('Error updating products:', error);
        }
      });
    }

    // Handle checkbox changes
    const filterCheckboxes = document.querySelectorAll('.filter-checkbox');
    filterCheckboxes.forEach(checkbox => {
      checkbox.addEventListener('change', function() {
        filterForm.dispatchEvent(new Event('submit'));
      });
    });

    // Handle price range changes
    const priceRange = document.getElementById('price-value-range');
    if (priceRange) {
      const minInput = document.getElementById('price-min-input');
      const maxInput = document.getElementById('price-max-input');
      
      priceRange.noUiSlider.on('change', function(values) {
        if (minInput) minInput.value = Math.round(values[0]);
        if (maxInput) maxInput.value = Math.round(values[1]);
        filterForm.dispatchEvent(new Event('submit'));
      });
    }

    // Handle reset price button
    const resetPriceBtn = document.querySelector('.reset-price');
    if (resetPriceBtn) {
      resetPriceBtn.addEventListener('click', function() {
        const minPrice = parseInt(priceRange.dataset.rangeMin);
        const maxPrice = parseInt(priceRange.dataset.rangeMax);
        priceRange.noUiSlider.set([minPrice, maxPrice]);
        filterForm.dispatchEvent(new Event('submit'));
      });
    }
  });
</script>

{% schema %}
{
  "name": "Collection",
  "settings": [
    {
      "type": "select",
      "id": "width",
      "label": "Section width",
      "options": [
        {
          "value": "full",
          "label": "Full width"
        },
        {
          "value": "boxed",
          "label": "Boxed"
        }
      ],
      "default": "boxed"
    },
    {
      "type": "range",
      "id": "padding_top",
      "label": "Padding top",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "default": 36
    },
    {
      "type": "range",
      "id": "padding_bottom",
      "label": "Padding bottom",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "default": 36
    },
    {
      "type": "select",
      "id": "filter_type",
      "label": "Filter Type",
      "options": [
        {
          "value": "drawer",
          "label": "Drawer"
        },
        {
          "value": "left",
          "label": "Left Sidebar"
        },
        {
          "value": "right",
          "label": "Right Sidebar"
        },
        {
          "value": "horizontal",
          "label": "Horizontal"
        }
      ],
      "default": "drawer"
    },
    {
      "type": "select",
      "id": "card_style",
      "label": "Product Card Style",
      "options": [
        {
          "value": "style-1",
          "label": "Style 1"
        },
        {
          "value": "style-2",
          "label": "Style 2"
        },
        {
          "value": "style-3",
          "label": "Style 3"
        }
      ],
      "default": "style-1"
    },
    {
      "type": "select",
      "id": "default_grid_columns",
      "label": "Default Grid Columns",
      "options": [
        {
          "value": "3",
          "label": "3 Columns"
        },
        {
          "value": "4",
          "label": "4 Columns"
        }
      ],
      "default": "4"
    },
    {
      "type": "range",
      "id": "products_per_page",
      "label": "Products per page",
      "min": 8,
      "max": 48,
      "step": 4,
      "default": 12
    },
    {
      "type": "select",
      "id": "default_view",
      "label": "Default view",
      "options": [
        {
          "value": "grid",
          "label": "Grid view"
        },
        {
          "value": "list",
          "label": "List view"
        }
      ],
      "default": "grid"
    },
    {
      "type": "select",
      "id": "default_sort",
      "label": "Default sort",
      "options": [
        {
          "value": "best-selling",
          "label": "Best selling"
        },
        {
          "value": "title-ascending",
          "label": "Alphabetically, A-Z"
        },
        {
          "value": "title-descending",
          "label": "Alphabetically, Z-A"
        },
        {
          "value": "price-ascending",
          "label": "Price, low to high"
        },
        {
          "value": "price-descending",
          "label": "Price, high to low"
        }
      ],
      "default": "best-selling"
    },
    {
      "type": "select",
      "id": "pagination_type",
      "label": "Pagination Type",
      "options": [
        {
          "value": "pagination",
          "label": "Pagination"
        },
        {
          "value": "load_more",
          "label": "Load More"
        },
        {
          "value": "infinite_scroll",
          "label": "Infinite Scroll"
        }
      ],
      "default": "pagination"
    },
    {
      "type": "header",
      "content": "On Sale Section"
    },
    {
      "type": "checkbox",
      "id": "show_on_sale",
      "label": "Show On Sale Section",
      "default": true
    },
    {
      "type": "text",
      "id": "on_sale_title",
      "label": "On Sale Title",
      "default": "On sale"
    },
    {
      "type": "header",
      "content": "Banner Section"
    },
    {
      "type": "checkbox",
      "id": "show_banner",
      "label": "Show Banner",
      "default": true
    },
    {
      "type": "image_picker",
      "id": "filter_banner",
      "label": "Banner Image"
    },
    {
      "type": "text",
      "id": "banner_title",
      "label": "Banner Title",
      "default": "Elevate\nYour Style"
    },
    {
      "type": "text",
      "id": "banner_button_text",
      "label": "Button Text",
      "default": "Shop Now"
    },
    {
      "type": "url",
      "id": "banner_button_url",
      "label": "Button Link"
    },
    {
      "type": "header",
      "content": "Filter collections"
    },
    {
      "type": "text",
      "id": "collections_title",
      "label": "Collections Title",
      "default": "Collections",
      "info": "Not show if blank"
    },
    {
      "type": "radio",
      "id": "categories_mode",
      "label": "Show all / Show a link list",
      "options": [
        { "value": "all", "label": "Show all" },
        { "value": "link_list", "label": "Show link list" }
      ],
      "default": "all"
    },
    {
      "type": "link_list",
      "id": "categories_link_list",
      "label": "Choose link list"
    },
    {
      "type": "checkbox",
      "id": "categories_show_count",
      "label": "Show count",
      "default": false
    }
  ],
  "presets": [
    {
      "name": "Collection",
      "category": "Collection",
      "settings": {
        "width": "boxed",
        "padding_top": 36,
        "padding_bottom": 36,
        "filter_type": "drawer",
        "card_style": "style-1",
        "default_grid_columns": "4",
        "products_per_page": 12,
        "default_view": "grid",
        "default_sort": "best-selling",
        "pagination_type": "pagination",
        "collections_title": "Collections",
        "show_on_sale": true,
        "on_sale_title": "On sale",
        "show_banner": true,
        "banner_title": "Elevate\nYour Style",
        "banner_button_text": "Shop Now"
      }
    }
  ]
}
{% endschema %}