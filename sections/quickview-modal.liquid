{%- comment -%}Quickview Modal Section{%- endcomment -%}

<style>
.modal-quick-view {
  z-index: 1060 !important;
}
.modal-quick-view .modal-dialog {
  z-index: 1060 !important;
}
.modal-backdrop {
  z-index: 1055 !important;
}
</style>

<div class="modal fade modalCentered modal-quick-view" id="quickView">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <span class="icon-close icon-close-popup" data-bs-dismiss="modal"></span>
            <div class="tf-product-media-wrap">
                <div dir="ltr" class="swiper tf-single-slide">
                    <div class="swiper-wrapper">
                        {%- for media in product.media -%}
                            <div class="swiper-slide" data-media-id="{{ media.id }}">
                                <div class="item">
                                    {%- if media.media_type == 'image' -%}
                                        <img class="lazyload" 
                                            data-src="{{ media | img_url: 'master' }}"
                                            src="{{ media | img_url: '400x' }}" 
                                            width="{{ media.width }}"
                                            height="{{ media.height }}"
                                            alt="{{ media.alt | escape }}">
                                    {%- elsif media.media_type == 'video' -%}
                                        {{ media | video_tag: controls: true, class: 'w-100' }}
                                    {%- endif -%}
                                </div>
                            </div>
                        {%- endfor -%}
                    </div>
                    <div class="swiper-button-prev nav-swiper arrow-1 nav-prev-cls single-slide-prev"></div>
                    <div class="swiper-button-next nav-swiper arrow-1 nav-next-cls single-slide-next"></div>
                </div>
            </div>
            <div class="tf-product-info-wrap">
                <div class="tf-product-info-inner">
                    <div class="tf-product-info-heading">
                        <h6 class="product-info-name">{{ product.title }}</h6>
                        <div class="product-info-price">
                            {%- if product.compare_at_price > product.price -%}
                                <h6 class="price-new price-on-sale">{{ product.price | money }}</h6>
                                <h6 class="price-old">{{ product.compare_at_price | money }}</h6>
                            {%- else -%}
                                <h6 class="price-new">{{ product.price | money }}</h6>
                            {%- endif -%}
                        </div>
                        <p class="text">{{ product.description | strip_html | truncatewords: 30 }}</p>
                    </div>
                    <div class="tf-product-info-variant">
                        {%- unless product.has_only_default_variant -%}
                            <div class="info-variant">
                                <select class="text-xs" data-variant-id="{{ product.selected_or_first_available_variant.id }}">
                                    {%- for variant in product.variants -%}
                                        <option value="{{ variant.id }}" {% if variant.id == product.selected_or_first_available_variant.id %}selected{% endif %}>
                                            {{ variant.title }}
                                        </option>
                                    {%- endfor -%}
                                </select>
                                <i class="icon-pen edit"></i>
                            </div>
                        {%- endunless -%}
                    </div>
                    <div class="tf-product-total-quantity">
                        <div class="group-btn">
                            <div class="wg-quantity">
                                <button class="btn-quantity btn-decrease" data-variant-id="{{ product.selected_or_first_available_variant.id }}">-</button>
                                <input class="quantity-product font-4" type="text" name="quantity" value="1" min="1" data-variant-id="{{ product.selected_or_first_available_variant.id }}">
                                <button class="btn-quantity btn-increase" data-variant-id="{{ product.selected_or_first_available_variant.id }}">+</button>
                            </div>
                            <button type="button" class="tf-btn hover-primary add-to-cart" data-product-id="{{ product.id }}" data-variant-id="{{ product.variants.first.id }}">
                                Add to cart
                            </button>
                        </div>
                        <button type="button" class="tf-btn w-100 animate-btn buy-now-btn btn-primary" data-product-id="{{ product.id }}">
                            Buy It Now
                        </button>
                        <a href="{{ product.url }}" class="more-choose-payment link">More payment options</a>
                    </div>
                    <a href="{{ product.url }}" class="view-details link">View full details <i class="icon icon-arrow-right"></i></a>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
let quickviewSwiper = null;
document.addEventListener('DOMContentLoaded', function() {
  console.log('DOM Content Loaded');
  let selectedVariant = null;
  let currentProduct = null;
  let productCache = new Map(); // Cache for product data

  // Initialize quickview functionality
  function initQuickview() {
    console.log('Initializing quickview');
    const quickviewButtons = document.querySelectorAll('.quickview');
    console.log('Found quickview buttons:', quickviewButtons.length);

    // Preload product data for all quickview buttons
    quickviewButtons.forEach(button => {
      const productHandle = button.dataset.productHandle;
      if (productHandle && !productCache.has(productHandle)) {
        preloadProductData(productHandle);
      }
    });

    quickviewButtons.forEach(button => {
      button.addEventListener('click', handleQuickviewClick);
    });
  }

  // Preload product data
  async function preloadProductData(productHandle) {
    try {
      const productResponse = await fetch(`/products/${productHandle}.js`);
      if (productResponse.ok) {
        const productData = await productResponse.json();
        // Cache the product data
        productCache.set(productHandle, productData);
        console.log('Preloaded product:', productHandle);
      }
    } catch (error) {
      console.error(`Error fetching product data for ${productHandle}:`, error);
    }
  }

  // Handle quickview button click
  async function handleQuickviewClick(e) {
    e.preventDefault();
    console.log('Quickview button clicked');
    
    const productHandle = this.dataset.productHandle;
    const productId = this.dataset.productId;
    
    // Show modal immediately
    const modal = document.getElementById('quickView');
    if (!modal) {
      console.error('Quickview modal not found');
      return;
    }

    try {
      // Get product data from cache or fetch it
      if (!productCache.has(productHandle)) {
        modal.classList.add('loading');
        await preloadProductData(productHandle);
      }
      
      currentProduct = productCache.get(productHandle);
      if (!currentProduct) {
        throw new Error('Failed to load product data');
      }

      // Set initial selected variant
      selectedVariant = currentProduct.variants[0];
      
      // Update modal content
      updateModalContent(modal);
      
      // Initialize variant selection
      initVariantSelection(modal);
      
    } catch (error) {
      console.error('Error loading product data:', error);
    } finally {
      modal.classList.remove('loading');
    }
  }

  // Update modal content
  function updateModalContent(modal) {
    console.log('updateModalContent called');
    // Update product title
    modal.querySelector('.product-info-name').textContent = currentProduct.title;
    
    // Update price
    const priceContainer = modal.querySelector('.product-info-price');
    if (selectedVariant.compare_at_price > selectedVariant.price) {
      priceContainer.innerHTML = `
        <h6 class="price-new price-on-sale">${formatMoney(selectedVariant.price)}</h6>
        <h6 class="price-old">${formatMoney(selectedVariant.compare_at_price)}</h6>
      `;
    } else {
      priceContainer.innerHTML = `
        <h6 class="price-new">${formatMoney(selectedVariant.price)}</h6>
      `;
    }
    
    // Update description
    modal.querySelector('.text').textContent = currentProduct.description.replace(/<[^>]*>/g, '').split(' ').slice(0, 30).join(' ') + '...';
    
    // Update media gallery
    const swiperWrapper = modal.querySelector('.swiper-wrapper');
    swiperWrapper.innerHTML = currentProduct.media.map(media => `
      <div class="swiper-slide" data-media-id="${media.id}">
        <div class="item">
          ${media.media_type === 'image' 
            ? `<img class="lazyload" data-src="${media.src}" src="${media.src}" alt="${media.alt || currentProduct.title}">`
            : `<video controls class="w-100"><source src="${media.sources[0].url}" type="video/mp4"></video>`
          }
        </div>
      </div>
    `).join('');
    
    // (Re-)initialize Swiper for the quickview modal
    if (quickviewSwiper) {
      quickviewSwiper.destroy(true, true);
    }
    quickviewSwiper = new Swiper('.tf-single-slide', {
      slidesPerView: 1,
      spaceBetween: 0,
      loop: false,
      navigation: {
        nextEl: '.single-slide-next',
        prevEl: '.single-slide-prev',
      }
    });
    console.log('Swiper initialized:', quickviewSwiper);
    quickviewSwiper.on('slideChange', function () {
      console.log('Swiper slideChange event fired');
      const modal = document.getElementById('quickView');
      const activeSlide = modal.querySelector('.swiper-slide.swiper-slide-active');
      if (!activeSlide) return;
      const mediaId = parseInt(activeSlide.getAttribute('data-media-id'));
      console.log('Active slide mediaId:', mediaId);
      // Log all product media and all variant featured_images
      console.log('currentProduct.media:', currentProduct.media);
      console.log('All variant featured_images:', currentProduct.variants.map(v => v.featured_image));
      // Try to match by id first, then by src
      let matchingVariant = currentProduct.variants.find(v => v.featured_image && v.featured_image.id == mediaId);
      if (!matchingVariant) {
        // Fallback: match by image src
        const activeSlideImg = activeSlide.querySelector('img');
        if (activeSlideImg) {
          const slideSrc = activeSlideImg.getAttribute('src');
          matchingVariant = currentProduct.variants.find(
            v => v.featured_image && v.featured_image.src === slideSrc
          );
          if (matchingVariant) {
            console.log('Found matching variant by src:', matchingVariant);
          }
        }
      }
      console.log('matchingVariant:', matchingVariant);
      if (!matchingVariant) {
        console.log('No matching variant for mediaId:', mediaId);
      }
      if (matchingVariant) {
        selectedVariant = matchingVariant;
        // Update only the color/image option in the variant picker UI
        const variantContainer = modal.querySelector('.tf-product-info-variant');
        if (variantContainer) {
          // Find the color option index
          const colorOptionIndex = currentProduct.options.findIndex(
            o => o.name.toLowerCase() === 'color' || o.name.toLowerCase() === 'colour'
          );
          if (colorOptionIndex !== -1) {
            const colorOption = currentProduct.options[colorOptionIndex];
            const colorValue = matchingVariant[`option${colorOptionIndex + 1}`];
            variantContainer.querySelectorAll(`[data-option-name="${colorOption.name}"]`).forEach(btn => {
              if (
                btn.dataset.optionValue &&
                btn.dataset.optionValue.toLowerCase().trim() === String(colorValue).toLowerCase().trim()
              ) {
                btn.classList.add('active');
                const label = variantContainer.querySelector(`.value-current${colorOption.name.toLowerCase()}`);
                if (label) label.textContent = colorValue;
              } else {
                btn.classList.remove('active');
              }
            });
          }
        }
        // Update price and add-to-cart button
        const priceContainer = modal.querySelector('.product-info-price');
        if (priceContainer) {
          if (selectedVariant.compare_at_price > selectedVariant.price) {
            priceContainer.innerHTML = `
              <h6 class="price-new price-on-sale">${formatMoney(selectedVariant.price)}</h6>
              <h6 class="price-old">${formatMoney(selectedVariant.compare_at_price)}</h6>
            `;
          } else {
            priceContainer.innerHTML = `
              <h6 class="price-new">${formatMoney(selectedVariant.price)}</h6>
            `;
          }
        }
        const addToCartBtn = modal.querySelector('.add-to-cart');
        if (addToCartBtn) {
          addToCartBtn.dataset.variantId = selectedVariant.id;
        }
      }
    });
    console.log('slideChange event handler attached');
    
    // Update variant options
    const variantContainer = modal.querySelector('.tf-product-info-variant');
    if (!variantContainer) {
      console.error('Variant container not found');
      return;
    }

    if (currentProduct.variants.length > 1) {
      console.log('Product has variants, updating variant options');
      variantContainer.innerHTML = currentProduct.options.map(option => `
        <div class="variant-picker-item variant-${option.name.toLowerCase()}">
          <div class="variant-picker-label">
            <div>
              ${option.name}:<span class="variant-picker-label-value value-current${option.name.toLowerCase()}">{{ option.values[0] }}</span>
            </div>
          </div>
          <div class="variant-picker-values">
            ${option.values.map(value => `
              ${option.name.toLowerCase() === 'color' || option.name.toLowerCase() === 'colour'
                ? `<div class="hover-tooltip color-btn${value === option.values[0] ? ' active' : ''}" data-option-name="${option.name}" data-option-value="${value}">
                    <span class="check-color bg-${value.toLowerCase()}"></span>
                    <span class="tooltip">${value}</span>
                  </div>`
                : `<span class="size-btn${value === option.values[0] ? ' active' : ''}" data-option-name="${option.name}" data-option-value="${value}">${value}</span>`
              }
            `).join('')}
          </div>
        </div>
      `).join('');
    } else {
      variantContainer.innerHTML = '';
    }

    // Add-to-cart button logic (like card-product)
    const addToCartBtn = modal.querySelector('.add-to-cart');
    if (addToCartBtn) {
      // Remove previous event listeners by cloning
      const newBtn = addToCartBtn.cloneNode(true);
      addToCartBtn.parentNode.replaceChild(newBtn, addToCartBtn);
      newBtn.addEventListener('click', async function(e) {
        e.preventDefault();
        e.stopPropagation();
        if (this.classList.contains('loading')) return;
        // Use selectedVariant if available, else fallback to data-variant-id
        const variantId = (selectedVariant && selectedVariant.id) || this.dataset.variantId;
        const quantityInput = modal.querySelector('.quantity-product');
        const quantity = parseInt(quantityInput ? quantityInput.value : 1);

        try {
          this.classList.add('loading');
          if (window.cart) {
            await window.cart.updateQuantity(variantId, quantity, 'add');
            // Fetch updated cart data
            const response = await fetch('/cart.js');
            const cartData = await response.json();
            // Update cart drawer with all items
            const cartDrawer = document.getElementById('shoppingCart');
            if (cartDrawer) {
              const itemsContainer = cartDrawer.querySelector('.tf-mini-cart-items');
              if (itemsContainer) {
                itemsContainer.innerHTML = '';
                cartData.items.forEach(item => {
                  const itemElement = document.createElement('div');
                  itemElement.className = 'tf-mini-cart-item';
                  itemElement.style.border = 'none';
                  itemElement.style.borderBottom = 'none';
                  itemElement.innerHTML = `
                    <div class="tf-mini-cart-image">
                      <a href="${item.url}">
                        <img class="lazyload" data-src="${item.image}" src="${item.image}" alt="${item.title}" loading="lazy">
                      </a>
                    </div>
                    <div class="tf-mini-cart-info">
                      <div class="d-flex justify-content-between">
                        <a class="title link text-md fw-medium" href="${item.url}">${item.title}</a>
                        <i class="icon icon-close remove fs-12" data-variant-id="${item.variant_id}" aria-label="Remove item"></i>
                      </div>
                      <div class="d-flex gap-10">
                        <div class="info-variant">
                          <select class="text-xs" data-variant-id="${item.variant_id}">
                            ${currentProduct.variants.map(variant => 
                              `<option value="${variant.id}" ${variant.id === item.variant_id ? 'selected' : ''}>
                                ${variant.title === 'Default Title' ? 'Default' : variant.title}
                              </option>`
                            ).join('')}
                          </select>
                          <i class="icon-pen edit"></i>
                        </div>
                      </div>
                      <div class="tf-mini-cart-item_price">
                        <p class="price-wrap text-sm fw-medium">
                          <span class="new-price text-primary">${formatMoney(item.final_price)}</span>
                        </p>
                      </div>
                      <div class="tf-mini-cart-item_quantity">
                        <div class="wg-quantity small">
                          <button class="btn-quantity btn-decrease" data-variant-id="${item.variant_id}">-</button>
                          <input type="text" class="quantity-product" value="${item.quantity}" min="0" data-variant-id="${item.variant_id}">
                          <button class="btn-quantity btn-increase" data-variant-id="${item.variant_id}">+</button>
                        </div>
                      </div>
                    </div>
                  `;
                  itemsContainer.appendChild(itemElement);
                });
                // Add event listeners for quantity buttons
                itemsContainer.querySelectorAll('.btn-decrease').forEach(button => {
                  button.addEventListener('click', async function() {
                    const variantId = this.dataset.variantId;
                    const input = this.nextElementSibling;
                    const currentValue = parseInt(input.value);
                    if (currentValue > 1) {
                      await window.cart.updateQuantity(variantId, currentValue - 1, 'update');
                    } else {
                      await window.cart.removeItem(variantId);
                    }
                  });
                });
                itemsContainer.querySelectorAll('.btn-increase').forEach(button => {
                  button.addEventListener('click', async function() {
                    const variantId = this.dataset.variantId;
                    const input = this.previousElementSibling;
                    const currentValue = parseInt(input.value);
                    await window.cart.updateQuantity(variantId, currentValue + 1, 'update');
                  });
                });
                itemsContainer.querySelectorAll('.quantity-product').forEach(input => {
                  input.addEventListener('change', async function() {
                    const variantId = this.dataset.variantId;
                    const newValue = parseInt(this.value);
                    if (isNaN(newValue) || newValue < 1) {
                      if (newValue <= 0) {
                        await window.cart.removeItem(variantId);
                      } else {
                        this.value = 1;
                        await window.cart.updateQuantity(variantId, 1, 'update');
                      }
                    } else {
                      await window.cart.updateQuantity(variantId, newValue, 'update');
                    }
                  });
                });
                // Add event listeners for remove buttons
                itemsContainer.querySelectorAll('.remove').forEach(button => {
                  button.addEventListener('click', async function() {
                    const variantId = this.dataset.variantId;
                    await window.cart.removeItem(variantId);
                  });
                });
                // Update cart total
                const totalElement = cartDrawer.querySelector('.cart-total-price');
                if (totalElement) {
                  totalElement.textContent = formatMoney(cartData.total_price);
                }
                // Update header cart count
                const headerCount = document.querySelector('.count-box');
                if (headerCount) {
                  headerCount.textContent = cartData.item_count;
                }
                // Update shipping threshold progress bar
                const progressBar = cartDrawer.querySelector('.tf-progress-bar .value');
                if (progressBar) {
                  const threshold = 100 * 100; // $100 in cents
                  const progress = Math.min(100, (cartData.total_price / threshold) * 100);
                  progressBar.style.width = `${progress}%`;
                  progressBar.setAttribute('data-progress', progress);
                }
                // Update shipping threshold text
                const thresholdText = cartDrawer.querySelector('.tf-mini-cart-threshold .text');
                if (thresholdText) {
                  const threshold = 100 * 100; // $100 in cents
                  const remaining = Math.max(0, threshold - cartData.total_price) / 100;
                  if (cartData.total_price >= threshold) {
                    thresholdText.innerHTML = 'Congratulations! You\'ve unlocked <span class="fw-medium">Free Shipping</span>';
                  } else {
                    thresholdText.innerHTML = `Spend <span class="fw-medium">$${remaining.toFixed(2)}</span> more to get <span class="fw-medium">Free Shipping</span>`;
                  }
                }
              }
            }
          }
        } catch (error) {
          console.error('Error adding item to cart:', error);
          alert('Failed to add item to cart. Please try again.');
        } finally {
          this.classList.remove('loading');
        }
      });
    }

    // Buy Now button logic
    const buyNowBtn = modal.querySelector('.buy-now-btn');
    if (buyNowBtn) {
      // Remove previous event listeners by cloning
      const newBuyNowBtn = buyNowBtn.cloneNode(true);
      buyNowBtn.parentNode.replaceChild(newBuyNowBtn, buyNowBtn);
      newBuyNowBtn.addEventListener('click', async function(e) {
        e.preventDefault();
        e.stopPropagation();
        if (this.classList.contains('loading')) return;
        const variantId = (selectedVariant && selectedVariant.id) || this.dataset.variantId;
        const quantityInput = modal.querySelector('.quantity-product');
        const quantity = parseInt(quantityInput ? quantityInput.value : 1);
        try {
          this.classList.add('loading');
          // Optionally clear the cart for a true "Buy It Now" experience
          await fetch('/cart/clear.js', { method: 'POST', headers: { 'Content-Type': 'application/json' } });
          // Add the selected variant to the cart
          await fetch('/cart/add.js', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ id: variantId, quantity: quantity })
          });
          // Redirect to checkout
          window.location.href = '/checkout';
        } catch (error) {
          console.error('Error with Buy It Now:', error);
          alert('Failed to process Buy It Now. Please try again.');
        } finally {
          this.classList.remove('loading');
        }
      });
    }

    // More payment options link logic
    const morePaymentBtn = modal.querySelector('.more-choose-payment');
    if (morePaymentBtn) {
      // Remove previous event listeners by cloning
      const newMorePaymentBtn = morePaymentBtn.cloneNode(true);
      morePaymentBtn.parentNode.replaceChild(newMorePaymentBtn, morePaymentBtn);
      newMorePaymentBtn.addEventListener('click', function(e) {
        e.preventDefault();
        window.location.href = '/checkout';
      });
    }

    // Update 'View full details' link to product detail page
    const viewDetailsBtn = modal.querySelector('.view-details');
    if (viewDetailsBtn && currentProduct && currentProduct.url) {
      viewDetailsBtn.setAttribute('href', currentProduct.url);
    }
  }

  // Initialize variant selection
  function initVariantSelection(modal) {
    const variantContainer = modal.querySelector('.tf-product-info-variant');
    if (!variantContainer) return;

    console.log('Initializing variant selection');
    
    // Use event delegation for variant selection
    variantContainer.addEventListener('click', function(e) {
      const button = e.target.closest('.color-btn, .size-btn');
      if (!button) return;
      
      e.preventDefault();
      console.log('Button clicked:', button.dataset.optionName, button.dataset.optionValue);
      
      const optionName = button.dataset.optionName;
      const optionValue = button.dataset.optionValue;
      
      // Update selected value display
      const valueDisplay = variantContainer.querySelector(`.value-current${optionName.toLowerCase()}`);
      if (valueDisplay) {
        valueDisplay.textContent = optionValue;
      }
      
      // Remove active class from all buttons in this option group
      const optionGroup = variantContainer.querySelectorAll(`[data-option-name="${optionName}"]`);
      console.log('Found option group:', optionGroup.length);
      optionGroup.forEach(btn => {
        btn.classList.remove('active');
      });
      
      // Add active class to clicked button
      button.classList.add('active');
      console.log('Added active class to:', button);
      
      // Find matching variant
      const selectedOptions = {};
      variantContainer.querySelectorAll('.variant-picker-item').forEach(item => {
        const name = item.querySelector('.variant-picker-label').textContent.split(':')[0].trim();
        const activeBtn = item.querySelector('.active');
        if (activeBtn) {
          const value = activeBtn.dataset.optionValue;
          selectedOptions[name] = value;
        }
      });
      console.log('Selected options:', selectedOptions);
      
      selectedVariant = currentProduct.variants.find(variant => {
        return Object.keys(selectedOptions).every(option => 
          variant[`option${currentProduct.options.findIndex(o => o.name === option) + 1}`] === selectedOptions[option]
        );
      });
      console.log('Selected variant:', selectedVariant);
      
      // Update add-to-cart button with selected variant id
      const addToCartBtn = modal.querySelector('.add-to-cart');
      if (addToCartBtn && selectedVariant) {
        addToCartBtn.dataset.variantId = selectedVariant.id;
      }
      
      // Update price
      if (selectedVariant) {
        const priceContainer = modal.querySelector('.product-info-price');
        if (selectedVariant.compare_at_price > selectedVariant.price) {
          priceContainer.innerHTML = `
            <h6 class="price-new price-on-sale">${formatMoney(selectedVariant.price)}</h6>
            <h6 class="price-old">${formatMoney(selectedVariant.compare_at_price)}</h6>
          `;
        } else {
          priceContainer.innerHTML = `
            <h6 class="price-new">${formatMoney(selectedVariant.price)}</h6>
          `;
        }

        // Update product image if variant has an image
        if (selectedVariant.featured_image) {
          console.log('Variant has featured image:', selectedVariant.featured_image);
          const swiperWrapper = modal.querySelector('.swiper-wrapper');
          const slides = swiperWrapper.querySelectorAll('.swiper-slide');
          
          console.log('Total slides:', slides.length);
          
          // Find the index of the slide with the variant image
          let variantSlideIndex = -1;
          slides.forEach((slide, index) => {
            const mediaId = slide.dataset.mediaId;
            const matchingMedia = currentProduct.media.find(m => m.id === parseInt(mediaId));
            if (matchingMedia?.id === selectedVariant.featured_image.id) {
              variantSlideIndex = index;
            }
          });

          console.log('Final variant slide index:', variantSlideIndex);

          if (variantSlideIndex !== -1) {
            // For loop mode, find the correct looped slide index
            if (quickviewSwiper) {
              let targetIndex = variantSlideIndex;
              quickviewSwiper.slides.forEach((slide, idx) => {
                if (slide.getAttribute('data-media-id') == selectedVariant.featured_image.id) {
                  targetIndex = idx;
                }
              });
              console.log('Sliding to looped index:', targetIndex);
              setTimeout(() => {
                quickviewSwiper.slideTo(targetIndex, 300);
              }, 50);
            } else {
              console.log('Swiper not found');
            }
          } else {
            console.log('Variant image not found in slides, updating first slide');
            // If variant image not found, update the first slide
            const firstSlide = slides[0];
            if (firstSlide) {
              const images = firstSlide.querySelectorAll('img');
              images.forEach(img => {
                img.setAttribute('data-src', selectedVariant.featured_image.src);
                img.setAttribute('src', selectedVariant.featured_image.src);
                img.setAttribute('alt', selectedVariant.featured_image.alt || currentProduct.title);
              });
              // Slide to first slide
              if (quickviewSwiper) {
                console.log('Sliding to first slide');
                setTimeout(() => {
                  quickviewSwiper.slideTo(0, 300);
                }, 50);
              } else {
                console.log('Swiper not found');
              }
            }
          }
        } else {
          console.log('Variant has no featured image');
        }
      }
    });
  }

  // Initialize everything
  initQuickview();

  // Add quantity button handlers
  document.addEventListener('click', async function(e) {
    const modal = document.getElementById('quickView');
    if (!modal) return;

    if (e.target.classList.contains('btn-increase')) {
      e.preventDefault();
      e.stopPropagation();
      const variantId = e.target.dataset.variantId;
      const input = e.target.previousElementSibling;
      const currentValue = parseInt(input.value) || 1;
      
      try {
        const response = await fetch('/cart/change.js', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            id: variantId,
            quantity: currentValue + 1
          })
        });
        if (!response.ok) throw new Error('Failed to update quantity');

        // Fetch updated cart data and update UI
        const cartResponse = await fetch('/cart.js');
        if (!cartResponse.ok) throw new Error('Failed to fetch cart data');
        const cartData = await cartResponse.json();
        
        // Update cart display
        if (window.cart) {
          window.cart.updateCartDisplay(cartData);
          window.cart.updateHeaderCartCount(cartData.item_count);
        }
      } catch (error) {
        console.error('Error updating cart:', error);
      }
    } else if (e.target.classList.contains('btn-decrease')) {
      e.preventDefault();
      e.stopPropagation();
      const variantId = e.target.dataset.variantId;
      const input = e.target.nextElementSibling;
      const currentValue = parseInt(input.value) || 1;
      
      try {
        if (currentValue > 1) {
          const response = await fetch('/cart/change.js', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              id: variantId,
              quantity: currentValue - 1
            })
          });
          if (!response.ok) throw new Error('Failed to update quantity');
        } else {
          const response = await fetch('/cart/change.js', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              id: variantId,
              quantity: 0
            })
          });
          if (!response.ok) throw new Error('Failed to remove item');
        }

        // Fetch updated cart data and update UI
        const cartResponse = await fetch('/cart.js');
        if (!cartResponse.ok) throw new Error('Failed to fetch cart data');
        const cartData = await cartResponse.json();
        
        // Update cart display
        if (window.cart) {
          window.cart.updateCartDisplay(cartData);
          window.cart.updateHeaderCartCount(cartData.item_count);
        }
      } catch (error) {
        console.error('Error updating cart:', error);
      }
    }
  }, true);
});

// Helper function to format money
function formatMoney(cents) {
  return new Intl.NumberFormat('en-US', {
    style: 'currency',
    currency: '{{ shop.currency }}'
  }).format(cents / 100);
}
</script>

{% schema %}    
{
  "name": "Quickview Modal",
  "settings": [],
  "presets": [
    {
      "name": "Quickview Modal"
    }
  ]
}
{% endschema %} 