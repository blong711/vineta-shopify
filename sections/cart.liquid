{%- comment -%}Cart Section{%- endcomment -%}
<div class="flat-spacing-24">
  <div class="container">
    <div class="row justify-content-center">
      <div class="col-xl-4 col-sm-8">
        <div class="tf-cart-head text-center">
          <p class="text-xl-3 title text-dark-4">Spend <span class="fw-medium">$100</span> more to get
            <span class="fw-medium">Free Shipping</span>
          </p>
          <div class="progress-sold tf-progress-ship">
            <div class="value" style="width: 0%;" data-progress="0">
              <i class="icon icon-car"></i>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<div class="flat-spacing-2 pt-0">
  <div class="container">
    <div class="row">
      <div class="col-xl-8">
        <div class="tf-page-cart-main">
          {% if cart.item_count > 0 %}
            <form action="/cart" method="post" id="cart-form" class="form-cart">
              <table class="table-page-cart">
                <thead>
                  <tr>
                    <th>Product</th>
                    <th>Price</th>
                    <th>Quantity</th>
                    <th>Total</th>
                  </tr>
                </thead>
                <tbody>
                  {% for item in cart.items %}
                    <tr class="tf-cart-item file-delete" data-item-id="{{ item.key }}" data-variant-id="{{ item.variant.id }}">
                      <td class="tf-cart-item_product">
                        <a href="{{ item.url }}" class="img-box">
                          <img src="{{ item.image | img_url: '150x' }}" alt="{{ item.title | escape }}" loading="lazy" width="150" height="150">
                        </a>
                        <div class="cart-info">
                          <a href="{{ item.url }}" class="name text-md link fw-medium">{{ item.product.title }}</a>
                          {% if item.product.has_only_default_variant == false %}
                            <div class="variants">{{ item.variant.title }}</div>
                          {% endif %}
                          <span class="remove-cart link remove" data-item-id="{{ item.key }}" data-variant-id="{{ item.variant.id }}">Remove</span>
                        </div>
                      </td>
                      <td class="tf-cart-item_price text-center" data-cart-title="Price">
                        <span class="cart-price price-on-sale text-md fw-medium">{{ item.final_price | money }}</span>
                        {% if item.original_price != item.final_price %}
                          <span class="compare-price">{{ item.original_price | money }}</span>
                        {% endif %}
                      </td>
                      <td class="tf-cart-item_quantity" data-cart-title="Quantity">
                        <div class="wg-quantity">
                          <span class="btn-quantity btn-decrease">-</span>
                          <input class="quantity-product" type="text" name="updates[]" value="{{ item.quantity }}" min="0">
                          <span class="btn-quantity btn-increase">+</span>
                        </div>
                      </td>
                      <td class="tf-cart-item_total text-center" data-cart-title="Total">
                        <div class="cart-total total-price text-md fw-medium">{{ item.final_line_price | money }}</div>
                      </td>
                    </tr>
                  {% endfor %}
                </tbody>
              </table>

              <div class="check-gift">
                <input type="checkbox" class="tf-check" id="checkGift">
                <label for="checkGift" class="label text-dark-4">Add gift wrap. Only <span class="fw-medium">$10.00.</span> (You can choose or not)</label>
              </div>

              <div class="box-ip-discount">
                <input type="text" placeholder="Discount code" name="discount_code">
                <button type="button" class="tf-btn radius-6 btn-out-line-dark-2">Apply</button>
              </div>

              <div class="cart-note">
                <label for="note" class="text-md fw-medium">Special instructions for seller</label>
                <textarea id="note" name="note">{{ cart.note }}</textarea>
              </div>
            </form>

            <div class="fl-iconbox wow fadeInUp">
              <div dir="ltr" class="swiper tf-swiper sw-auto" data-swiper='{
                "slidesPerView": 1,
                "spaceBetween": 12,
                "speed": 800,
                "observer": true,
                "observeParents": true,
                "slidesPerGroup": 1,
                "pagination": { "el": ".sw-pagination-iconbox", "clickable": true },
                "breakpoints": {
                  "575": { "slidesPerView": 2, "spaceBetween": 12, "slidesPerGroup": 2},
                  "768": { "slidesPerView": 3, "spaceBetween": 24, "slidesPerGroup": 3},
                  "1200": { "slidesPerView": "auto", "spaceBetween": 24}
                }
              }'>
                <div class="swiper-wrapper">
                  <div class="swiper-slide">
                    <div class="tf-icon-box justify-content-center justify-content-sm-start style-3">
                      <div class="box-icon">
                        <i class="icon icon-shipping"></i>
                      </div>
                      <div class="content">
                        <div class="title text-uppercase">Free Shipping</div>
                      </div>
                    </div>
                  </div>
                  <div class="swiper-slide">
                    <div class="tf-icon-box justify-content-center justify-content-sm-start style-3">
                      <div class="box-icon">
                        <i class="icon icon-gift"></i>
                      </div>
                      <div class="content">
                        <div class="title text-uppercase">Gift Package</div>
                      </div>
                    </div>
                  </div>
                  <div class="swiper-slide">
                    <div class="tf-icon-box justify-content-center justify-content-sm-start style-3">
                      <div class="box-icon">
                        <i class="icon icon-return"></i>
                      </div>
                      <div class="content">
                        <div class="title text-uppercase">Ease Returns</div>
                      </div>
                    </div>
                  </div>
                  <div class="swiper-slide">
                    <div class="tf-icon-box justify-content-center justify-content-sm-start style-3">
                      <div class="box-icon">
                        <i class="icon icon-support"></i>
                      </div>
                      <div class="content">
                        <div class="title text-uppercase text-nowrap">ONE YEAR WARRANTY</div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              <div class="d-flex d-xl-none sw-dot-default sw-pagination-iconbox justify-content-center"></div>
            </div>
          {% else %}
            <div class="empty-cart text-center">
              <p class="text-lg">Your cart is currently empty.</p>
              <a href="/collections/all" class="tf-btn btn-dark2 animate-btn">Continue shopping</a>
            </div>
          {% endif %}
        </div>
      </div>

      <div class="col-xl-4">
        <div class="tf-page-cart-sidebar">
          <form class="cart-box shipping-cart-box">
            <div class="text-lg title fw-medium">Shipping estimates</div>
            <fieldset class="field">
              <label for="country" class="text-sm">Country</label>
              <input type="text" id="country" placeholder="United State">
            </fieldset>
            <fieldset class="field">
              <label for="state" class="text-sm">State/Province</label>
              <input type="text" id="state" placeholder="State/Province">
            </fieldset>
            <fieldset class="field">
              <label for="code" class="text-sm">Zipcode</label>
              <input type="text" id="code" placeholder="41000">
            </fieldset>
            <button type="button" class="tf-btn btn-dark2 animate-btn w-100">Estimate</button>
          </form>

          <form action="/checkout" method="post" class="cart-box checkout-cart-box" id="checkout-form">
            <div class="cart-head">
              <div class="total-discount text-xl fw-medium">
                <span>Total:</span>
                <span class="total">{{ cart.total_price | money }}</span>
              </div>
              <p class="text-sm text-dark-4">Taxes and shipping calculated at checkout</p>
            </div>

            <div class="check-agree">
              <input type="checkbox" class="tf-check" id="check-agree" required>
              <label for="check-agree" class="label text-dark-4">I agree with <a href="/pages/terms-and-conditions" class="text-dark-4 fw-medium text-underline link">terms and conditions</a></label>
            </div>

            <div class="checkout-btn">
              <button type="submit" class="tf-btn btn-dark2 animate-btn w-100" id="checkout-button" disabled>Checkout</button>
            </div>

            <div class="cart-imgtrust">
              <p class="text-center text-sm text-dark-1">We accept</p>
              <div class="cart-list-social">
                <div class="payment-card">
                  <img src="{{ 'Visa.png' | asset_url }}" alt="Visa" width="40" height="25">
                </div>
                <div class="payment-card">
                  <img src="{{ 'DinersClub.png' | asset_url }}" alt="Diners Club" width="40" height="25">
                </div>
                <div class="payment-card">
                  <img src="{{ 'Mastercard.png' | asset_url }}" alt="Mastercard" width="40" height="25">
                </div>
                <div class="payment-card">
                  <img src="{{ 'Stripe.png' | asset_url }}" alt="Stripe" width="40" height="25">
                </div>
              </div>
            </div>
          </form>

          <div class="cart-box testimonial-cart-box">
            <div dir="ltr" class="swiper tf-swiper" data-swiper='{
              "slidesPerView": 1,
              "spaceBetween": 12,
              "speed": 800,
              "pagination": { "el": ".sw-pagination-iconbox", "clickable": true },
              "navigation": {
                "clickable": true,
                "nextEl": ".nav-next-tes",
                "prevEl": ".nav-prev-tes"
              }
            }'>
              <div class="swiper-wrapper">
                {% for block in section.blocks %}
                  {% if block.type == 'testimonial' %}
                    <div class="swiper-slide">
                      <div class="box-testimonial-main">
                        <span class="quote icon-quote5"></span>
                        <div class="content">
                          <div class="list-star-default">
                            {% for i in (1..5) %}
                              <i class="icon-star"></i>
                            {% endfor %}
                          </div>
                          <p class="text-review text-md text-main">{{ block.settings.review }}</p>
                          <div class="box-author">
                            <div class="img">
                              <img src="{{ block.settings.author_image | img_url: '100x' }}" alt="{{ block.settings.author_name }}" width="100" height="100">
                            </div>
                            <span class="name text-sm fw-medium">{{ block.settings.author_name }}</span>
                          </div>
                        </div>
                      </div>
                    </div>
                  {% endif %}
                {% endfor %}
              </div>
              <div class="box-nav-swiper">
                <div class="swiper-button-prev nav-swiper nav-prev-tes"></div>
                <div class="swiper-button-next nav-swiper nav-next-tes"></div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

{% schema %}
{
  "name": "Cart",
  "tag": "section",
  "class": "cart-section",
  "settings": [
    {
      "type": "checkbox",
      "id": "show_vendor",
      "label": "Show product vendor",
      "default": false
    },
    {
      "type": "checkbox",
      "id": "show_quantity_selector",
      "label": "Show quantity selector",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_cart_note",
      "label": "Show cart note",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_cart_buttons",
      "label": "Show cart buttons",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_continue_shopping",
      "label": "Show continue shopping",
      "default": true
    }
  ],
  "blocks": [
    {
      "type": "testimonial",
      "name": "Testimonial",
      "settings": [
        {
          "type": "text",
          "id": "review",
          "label": "Review text",
          "default": "Stylish, comfortable, and perfect for any occasion! My new favorite fashion destination."
        },
        {
          "type": "image_picker",
          "id": "author_image",
          "label": "Author image"
        },
        {
          "type": "text",
          "id": "author_name",
          "label": "Author name",
          "default": "Customer Name"
        }
      ]
    }
  ]
}
{% endschema %}

{% javascript %}
document.addEventListener('DOMContentLoaded', function() {
  // Function to update header cart count
  function updateHeaderCartCount() {
    const headerCount = document.querySelector('.count-box');
    const cartCount = document.querySelector('.cart-count');
    if (headerCount && cartCount) {
      headerCount.textContent = cartCount.textContent;
    }
  }

  // Function to update shipping threshold progress
  function updateShippingProgress() {
    const cartTotal = parseFloat(document.querySelector('.total').textContent.replace(/[^0-9.-]+/g, ''));
    const threshold = 100; // $100 threshold
    const progress = Math.min(100, (cartTotal / threshold) * 100);
    const progressBar = document.querySelector('.tf-progress-ship .value');
    const progressText = document.querySelector('.tf-cart-head .title');
    
    if (progressBar) {
      progressBar.style.width = progress + '%';
      progressBar.setAttribute('data-progress', progress);
    }
    
    if (progressText) {
      if (cartTotal >= threshold) {
        progressText.innerHTML = 'Congratulations! You\'ve unlocked <span class="fw-medium">Free Shipping</span>';
      } else {
        const remaining = threshold - cartTotal;
        progressText.innerHTML = `Spend <span class="fw-medium">$${remaining.toFixed(2)}</span> more to get <span class="fw-medium">Free Shipping</span>`;
      }
    }
  }

  // Update progress on page load
  updateShippingProgress();

  // Update progress when cart changes
  document.addEventListener('cart:change', function(e) {
    if (e.detail && e.detail.cart) {
      updateShippingProgress();
    }
  });

  // Handle remove buttons in cart
  document.querySelectorAll('.remove-cart').forEach(button => {
    button.addEventListener('click', async function(e) {
      e.preventDefault();
      const variantId = this.dataset.variantId;
      const itemId = this.dataset.itemId;
      
      if (!variantId || !window.cart) return;

      try {
        // Update UI through Cart class
        await window.cart.removeItem(variantId);
        
        // Remove the item row from the table
        const itemRow = this.closest('.tf-cart-item');
        if (itemRow) {
          itemRow.remove();
        }

        // Update cart count and total
        const cartCount = document.querySelector('.cart-count');
        const cartTotal = document.querySelector('.total');
        if (cartCount) {
          const currentCount = parseInt(cartCount.textContent);
          cartCount.textContent = currentCount - 1;
        }
        if (cartTotal) {
          const itemPrice = parseFloat(itemRow.querySelector('.cart-total').textContent.replace(/[^0-9.-]+/g, ''));
          const currentTotal = parseFloat(cartTotal.textContent.replace(/[^0-9.-]+/g, ''));
          cartTotal.textContent = `$${(currentTotal - itemPrice).toFixed(2)}`;
        }

        // Update header cart count
        updateHeaderCartCount();

        // If no items left, show empty cart message
        const tbody = document.querySelector('.table-page-cart tbody');
        if (tbody && tbody.children.length === 0) {
          const emptyCart = document.querySelector('.empty-cart');
          if (emptyCart) {
            emptyCart.style.display = 'block';
          }
        }
      } catch (error) {
        console.error('Error removing item:', error);
        alert('Failed to remove item. Please try again.');
      }
    });
  });

  // Handle quantity buttons in cart
  document.querySelectorAll('.btn-quantity').forEach(button => {
    button.addEventListener('click', async function() {
      const input = this.parentElement.querySelector('.quantity-product');
      const variantId = input.dataset.variantId;
      const itemId = this.closest('.tf-cart-item').dataset.itemId;
      const currentValue = parseInt(input.value);
      
      if (!variantId || !itemId || !window.cart) return;

      try {
        let newQuantity;
        if (this.classList.contains('btn-decrease')) {
          newQuantity = currentValue > 1 ? currentValue - 1 : 0;
        } else if (this.classList.contains('btn-increase')) {
          newQuantity = currentValue + 1;
        }

        // Update UI through Cart class
        if (newQuantity === 0) {
          await window.cart.removeItem(variantId);
          // Remove the item row from the table
          const itemRow = this.closest('.tf-cart-item');
          if (itemRow) {
            itemRow.remove();
          }
        } else {
          await window.cart.updateQuantity(variantId, newQuantity, window.cart.actions.update);
          // Update the item total
          const itemRow = this.closest('.tf-cart-item');
          if (itemRow) {
            const itemPrice = parseFloat(itemRow.querySelector('.cart-price').textContent.replace(/[^0-9.-]+/g, ''));
            const itemTotal = itemRow.querySelector('.cart-total');
            if (itemTotal) {
              itemTotal.textContent = `$${(itemPrice * newQuantity).toFixed(2)}`;
            }
          }
        }

        // Update cart count
        const cartCount = document.querySelector('.cart-count');
        if (cartCount) {
          const currentCount = parseInt(cartCount.textContent);
          cartCount.textContent = newQuantity === 0 ? currentCount - 1 : currentCount;
        }

        // Update header cart count
        updateHeaderCartCount();

        // Update cart total
        const cartTotal = document.querySelector('.total');
        if (cartTotal) {
          const itemRow = this.closest('.tf-cart-item');
          if (itemRow) {
            const itemPrice = parseFloat(itemRow.querySelector('.cart-price').textContent.replace(/[^0-9.-]+/g, ''));
            const currentTotal = parseFloat(cartTotal.textContent.replace(/[^0-9.-]+/g, ''));
            if (newQuantity === 0) {
              cartTotal.textContent = `$${(currentTotal - itemPrice).toFixed(2)}`;
            } else {
              cartTotal.textContent = `$${(currentTotal + itemPrice).toFixed(2)}`;
            }
          }
        }

        // If no items left, show empty cart message
        const tbody = document.querySelector('.table-page-cart tbody');
        if (tbody && tbody.children.length === 0) {
          const emptyCart = document.querySelector('.empty-cart');
          if (emptyCart) {
            emptyCart.style.display = 'block';
          }
        }
      } catch (error) {
        console.error('Error updating quantity:', error);
        alert('Failed to update quantity. Please try again.');
      }
    });
  });

  // Handle direct quantity input changes
  document.querySelectorAll('.quantity-product').forEach(input => {
    input.addEventListener('change', async function() {
      const variantId = this.dataset.variantId;
      const itemId = this.closest('.tf-cart-item').dataset.itemId;
      const newValue = parseInt(this.value);
      
      if (!variantId || !itemId || !window.cart) return;

      try {
        if (isNaN(newValue) || newValue < 1) {
          if (newValue <= 0) {
            // Remove item
            await window.cart.removeItem(variantId);
            // Remove the item row from the table
            const itemRow = this.closest('.tf-cart-item');
            if (itemRow) {
              itemRow.remove();
            }
          } else {
            // Reset to 1
            this.value = 1;
            await window.cart.updateQuantity(variantId, 1, window.cart.actions.update);
          }
        } else {
          // Update quantity
          await window.cart.updateQuantity(variantId, newValue, window.cart.actions.update);
        }

        // Update cart count
        const cartCount = document.querySelector('.cart-count');
        if (cartCount) {
          const currentCount = parseInt(cartCount.textContent);
          cartCount.textContent = newValue <= 0 ? currentCount - 1 : currentCount;
        }

        // Update header cart count
        updateHeaderCartCount();

        // Update cart total
        const cartTotal = document.querySelector('.total');
        if (cartTotal) {
          const itemRow = this.closest('.tf-cart-item');
          if (itemRow) {
            const itemPrice = parseFloat(itemRow.querySelector('.cart-price').textContent.replace(/[^0-9.-]+/g, ''));
            const currentTotal = parseFloat(cartTotal.textContent.replace(/[^0-9.-]+/g, ''));
            if (newValue <= 0) {
              cartTotal.textContent = `$${(currentTotal - itemPrice).toFixed(2)}`;
            } else {
              cartTotal.textContent = `$${(currentTotal + itemPrice).toFixed(2)}`;
            }
          }
        }

        // If no items left, show empty cart message
        const tbody = document.querySelector('.table-page-cart tbody');
        if (tbody && tbody.children.length === 0) {
          const emptyCart = document.querySelector('.empty-cart');
          if (emptyCart) {
            emptyCart.style.display = 'block';
          }
        }
      } catch (error) {
        console.error('Error updating quantity:', error);
        alert('Failed to update quantity. Please try again.');
      }
    });
  });

  // Handle terms checkbox and checkout button
  const termsCheckbox = document.getElementById('check-agree');
  const checkoutButton = document.getElementById('checkout-button');
  const checkoutForm = document.getElementById('checkout-form');
  
  if (termsCheckbox && checkoutButton && checkoutForm) {
    // Initial state
    checkoutButton.disabled = true;
    
    // Handle checkbox change
    termsCheckbox.addEventListener('change', function() {
      checkoutButton.disabled = !this.checked;
    });
    
    // Handle form submission
    checkoutForm.addEventListener('submit', function(e) {
      if (!termsCheckbox.checked) {
        e.preventDefault();
        alert('Please agree to the terms and conditions before proceeding to checkout.');
      }
    });
  }
});
{% endjavascript %}