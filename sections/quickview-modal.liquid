{%- comment -%}Quickview Modal Section{%- endcomment -%}

<style>
.modal-quick-view {
  z-index: 1060 !important;
}
.modal-quick-view .modal-dialog {
  z-index: 1060 !important;
}
.modal-backdrop {
  z-index: 1055 !important;
}
</style>

<div class="modal fade modalCentered modal-quick-view" id="quickView">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <span class="icon-close icon-close-popup" data-bs-dismiss="modal"></span>
            <div class="tf-product-media-wrap">
                <div dir="ltr" class="swiper tf-single-slide">
                    <div class="swiper-wrapper">
                        {%- for media in product.media -%}
                            <div class="swiper-slide" data-media-id="{{ media.id }}">
                                <div class="item">
                                    {%- if media.media_type == 'image' -%}
                                        <img class="lazyload" 
                                            data-src="{{ media | img_url: 'master' }}"
                                            src="{{ media | img_url: '400x' }}" 
                                            width="{{ media.width }}"
                                            height="{{ media.height }}"
                                            alt="{{ media.alt | escape }}">
                                    {%- elsif media.media_type == 'video' -%}
                                        {{ media | video_tag: controls: true, class: 'w-100' }}
                                    {%- endif -%}
                                </div>
                            </div>
                        {%- endfor -%}
                    </div>
                    <div class="swiper-button-prev nav-swiper arrow-1 nav-prev-cls single-slide-prev"></div>
                    <div class="swiper-button-next nav-swiper arrow-1 nav-next-cls single-slide-next"></div>
                </div>
            </div>
            <div class="tf-product-info-wrap">
                <div class="tf-product-info-inner">
                    <div class="tf-product-info-heading">
                        <h6 class="product-info-name">{{ product.title }}</h6>
                        <div class="product-info-price">
                            {%- if product.compare_at_price > product.price -%}
                                <h6 class="price-new price-on-sale">{{ product.price | money }}</h6>
                                <h6 class="price-old">{{ product.compare_at_price | money }}</h6>
                            {%- else -%}
                                <h6 class="price-new">{{ product.price | money }}</h6>
                            {%- endif -%}
                        </div>
                        <p class="text">{{ product.description | strip_html | truncatewords: 30 }}</p>
                    </div>
                    <div class="tf-product-info-variant">
                        {%- unless product.has_only_default_variant -%}
                            {%- for option in product.options_with_values -%}
                                <div class="variant-picker-item variant-{{ option.name | handle }}">
                                    <div class="variant-picker-label">
                                        {{ option.name }}:<span class="variant-picker-label-value value-current{{ option.name | handle }}">{{ option.selected_value }}</span>
                                    </div>
                                    <div class="variant-picker-values">
                                        {%- for value in option.values -%}
                                            {%- if option.name == 'Color' or option.name == 'Colour' -%}
                                                <div class="hover-tooltip color-btn{% if value == option.selected_value %} active{% endif %}" 
                                                     data-option-name="{{ option.name }}"
                                                     data-option-value="{{ value | escape }}">
                                                    <span class="check-color bg-{{ value | handle }}"></span>
                                                    <span class="tooltip">{{ value }}</span>
                                                </div>
                                            {%- else -%}
                                                <span class="size-btn{% if value == option.selected_value %} active{% endif %}" 
                                                      data-option-name="{{ option.name }}"
                                                      data-option-value="{{ value | escape }}">
                                                    {{ value }}
                                                </span>
                                            {%- endif -%}
                                        {%- endfor -%}
                                    </div>
                                </div>
                            {%- endfor -%}
                        {%- endunless -%}
                    </div>
                    <div class="tf-product-total-quantity">
                        <div class="group-btn">
                            <div class="wg-quantity">
                                <button class="btn-quantity minus-btn">-</button>
                                <input class="quantity-product font-4" type="text" name="quantity" value="1" min="1">
                                <button class="btn-quantity plus-btn">+</button>
                            </div>
                            <button type="button" class="tf-btn hover-primary add-to-cart" data-product-id="{{ product.id }}" data-variant-id="{{ product.variants.first.id }}">
                                Add to cart
                            </button>
                        </div>
                        <button type="button" class="tf-btn w-100 animate-btn buy-now-btn btn-primary" data-product-id="{{ product.id }}">
                            Buy It Now
                        </button>
                        <a href="{{ product.url }}" class="more-choose-payment link">More payment options</a>
                    </div>
                    <a href="{{ product.url }}" class="view-details link">View full details <i class="icon icon-arrow-right"></i></a>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  let selectedVariant = null;
  let currentProduct = null;

  // Handle variant selection
  document.querySelectorAll('.quickview').forEach(button => {
    button.addEventListener('click', async function(e) {
      e.preventDefault();
      const productHandle = this.dataset.productHandle;
      const productId = this.dataset.productId;
      
      try {
        // Fetch product data
        const response = await fetch(`/products/${productHandle}.js`);
        currentProduct = await response.json();
        
        // Set initial selected variant
        selectedVariant = currentProduct.variants[0];
        
        // Update modal with product data
        const modal = document.getElementById('quickView');
        if (modal) {
          // Update product title
          modal.querySelector('.product-info-name').textContent = currentProduct.title;
          
          // Update price
          const priceContainer = modal.querySelector('.product-info-price');
          if (selectedVariant.compare_at_price > selectedVariant.price) {
            priceContainer.innerHTML = `
              <h6 class="price-new price-on-sale">${formatMoney(selectedVariant.price)}</h6>
              <h6 class="price-old">${formatMoney(selectedVariant.compare_at_price)}</h6>
            `;
          } else {
            priceContainer.innerHTML = `
              <h6 class="price-new">${formatMoney(selectedVariant.price)}</h6>
            `;
          }
          
          // Update description
          modal.querySelector('.text').textContent = currentProduct.description.replace(/<[^>]*>/g, '').split(' ').slice(0, 30).join(' ') + '...';
          
          // Update media gallery
          const swiperWrapper = modal.querySelector('.swiper-wrapper');
          swiperWrapper.innerHTML = currentProduct.media.map(media => `
            <div class="swiper-slide" data-media-id="${media.id}">
              <div class="item">
                ${media.media_type === 'image' 
                  ? `<img class="lazyload" data-src="${media.src}" src="${media.src}" alt="${media.alt || currentProduct.title}">`
                  : `<video controls class="w-100"><source src="${media.sources[0].url}" type="video/mp4"></video>`
                }
              </div>
            </div>
          `).join('');
          
          // Update variant options
          const variantContainer = modal.querySelector('.tf-product-info-variant');
          if (currentProduct.variants.length > 1) {
            variantContainer.innerHTML = currentProduct.options.map(option => `
              <div class="variant-picker-item variant-${option.name.toLowerCase()}">
                <div class="variant-picker-label">
                  ${option.name}:<span class="variant-picker-label-value value-current${option.name.toLowerCase()}">${option.values[0]}</span>
                </div>
                <div class="variant-picker-values">
                  ${option.values.map(value => `
                    ${option.name.toLowerCase() === 'color' || option.name.toLowerCase() === 'colour'
                      ? `<div class="hover-tooltip color-btn" data-option-name="${option.name}" data-option-value="${value}">
                          <span class="check-color bg-${value.toLowerCase()}"></span>
                          <span class="tooltip">${value}</span>
                        </div>`
                      : `<span class="size-btn" data-option-name="${option.name}" data-option-value="${value}">${value}</span>`
                    }
                  `).join('')}
                </div>
              </div>
            `).join('');

            // Add variant selection event listeners
            variantContainer.querySelectorAll('.color-btn, .size-btn').forEach(button => {
              button.addEventListener('click', function() {
                const optionName = this.dataset.optionName;
                const optionValue = this.dataset.optionValue;
                
                // Update selected value display
                const valueDisplay = variantContainer.querySelector(`.value-current${optionName.toLowerCase()}`);
                if (valueDisplay) {
                  valueDisplay.textContent = optionValue;
                }
                
                // Update active state
                variantContainer.querySelectorAll(`[data-option-name="${optionName}"]`).forEach(btn => {
                  btn.classList.remove('active');
                });
                this.classList.add('active');
                
                // Find matching variant
                const selectedOptions = {};
                variantContainer.querySelectorAll('.variant-picker-item').forEach(item => {
                  const name = item.querySelector('.variant-picker-label').textContent.split(':')[0];
                  const value = item.querySelector('.active').dataset.optionValue;
                  selectedOptions[name] = value;
                });
                
                selectedVariant = currentProduct.variants.find(variant => {
                  return Object.keys(selectedOptions).every(option => 
                    variant[`option${currentProduct.options.findIndex(o => o.name === option) + 1}`] === selectedOptions[option]
                  );
                });
                
                // Update price
                if (selectedVariant) {
                  if (selectedVariant.compare_at_price > selectedVariant.price) {
                    priceContainer.innerHTML = `
                      <h6 class="price-new price-on-sale">${formatMoney(selectedVariant.price)}</h6>
                      <h6 class="price-old">${formatMoney(selectedVariant.compare_at_price)}</h6>
                    `;
                  } else {
                    priceContainer.innerHTML = `
                      <h6 class="price-new">${formatMoney(selectedVariant.price)}</h6>
                    `;
                  }
                }
              });
            });
          } else {
            variantContainer.innerHTML = '';
          }
          
          // Update product links
          modal.querySelectorAll('a[href]').forEach(link => {
            if (link.href.includes('/products/')) {
              link.href = currentProduct.url;
            }
          });
          
          // Initialize swiper
          if (window.swiper) {
            window.swiper.destroy();
          }
          window.swiper = new Swiper('.tf-single-slide', {
            slidesPerView: 1,
            spaceBetween: 0,
            loop: true,
            navigation: {
              nextEl: '.single-slide-next',
              prevEl: '.single-slide-prev',
            }
          });
        }
      } catch (error) {
        console.error('Error loading product data:', error);
      }
    });
  });

  // Handle quantity buttons
  document.querySelectorAll('.quickview-modal .btn-quantity').forEach(button => {
    button.addEventListener('click', function() {
      const input = this.parentElement.querySelector('.quantity-product');
      const currentValue = parseInt(input.value);
      
      if (this.classList.contains('minus-btn')) {
        if (currentValue > 1) {
          input.value = currentValue - 1;
        }
      } else if (this.classList.contains('plus-btn')) {
        input.value = currentValue + 1;
      }
    });
  });

  // Handle add to cart
  document.querySelectorAll('.quickview-modal .add-to-cart').forEach(button => {
    button.addEventListener('click', async function(e) {
      e.preventDefault();
      
      if (!selectedVariant) {
        alert('Please select a variant');
        return;
      }
      
      const quantity = parseInt(document.querySelector('.quickview-modal .quantity-product').value);
      
      try {
        // Show loading state
        this.classList.add('loading');
        
        // Add item to cart
        if (window.cart) {
          await window.cart.updateQuantity(selectedVariant.id, quantity, 'add');
          
          // Fetch updated cart data
          const response = await fetch('/cart.js');
          const cartData = await response.json();
          
          // Update cart drawer
          const cartDrawer = document.getElementById('shoppingCart');
          if (cartDrawer) {
            const itemsContainer = cartDrawer.querySelector('.tf-mini-cart-items');
            if (itemsContainer) {
              // Clear existing items
              itemsContainer.innerHTML = '';
              
              // Add all items from cart
              cartData.items.forEach(item => {
                const itemElement = document.createElement('div');
                itemElement.className = 'tf-mini-cart-item';
                itemElement.innerHTML = `
                  <div class="tf-mini-cart-image">
                    <a href="${item.url}">
                      <img class="lazyload" data-src="${item.image}" src="${item.image}" alt="${item.title}" loading="lazy">
                    </a>
                  </div>
                  <div class="tf-mini-cart-info">
                    <div class="d-flex justify-content-between">
                      <a class="title link text-md fw-medium" href="${item.url}">${item.title}</a>
                      <i class="icon icon-close remove" data-variant-id="${item.variant_id}" aria-label="Remove item"></i>
                    </div>
                    <div class="d-flex gap-10">
                      <div class="text-xs">${item.variant_title || ''}</div>
                      <a href="#" class="link edit"><i class="icon-pen"></i></a>
                    </div>
                    <div class="tf-mini-cart-item_price">
                      <p class="price-wrap text-sm fw-medium">
                        <span class="new-price text-primary">${formatMoney(item.final_price)}</span>
                      </p>
                    </div>
                    <div class="tf-mini-cart-item_quantity">
                      <div class="wg-quantity small">
                        <button class="btn-quantity btn-decrease" data-variant-id="${item.variant_id}">-</button>
                        <input type="text" class="quantity-product" value="${item.quantity}" min="0" data-variant-id="${item.variant_id}">
                        <button class="btn-quantity btn-increase" data-variant-id="${item.variant_id}">+</button>
                      </div>
                    </div>
                  </div>
                `;
                itemsContainer.appendChild(itemElement);
              });
              
              // Update cart total
              const totalElement = cartDrawer.querySelector('.cart-total-price');
              if (totalElement) {
                totalElement.textContent = formatMoney(cartData.total_price);
              }
              
              // Update header cart count
              const headerCount = document.querySelector('.count-box');
              if (headerCount) {
                headerCount.textContent = cartData.item_count;
              }
            }
          }
          
          // Close quickview modal
          const modal = document.getElementById('quickView');
          if (modal) {
            const bsModal = bootstrap.Modal.getInstance(modal);
            if (bsModal) {
              bsModal.hide();
            }
          }
          
          // Show cart drawer
          const cartDrawer = document.getElementById('shoppingCart');
          if (cartDrawer) {
            const bsOffcanvas = bootstrap.Offcanvas.getInstance(cartDrawer);
            if (bsOffcanvas) {
              bsOffcanvas.show();
            }
          }
        }
      } catch (error) {
        console.error('Error adding item to cart:', error);
        alert('Failed to add item to cart. Please try again.');
      } finally {
        // Remove loading state
        this.classList.remove('loading');
      }
    });
  });

  // Handle buy now button
  document.querySelectorAll('.quickview-modal .buy-now-btn').forEach(button => {
    button.addEventListener('click', async function(e) {
      e.preventDefault();
      
      if (!selectedVariant) {
        alert('Please select a variant');
        return;
      }
      
      const quantity = parseInt(document.querySelector('.quickview-modal .quantity-product').value);
      
      try {
        // Show loading state
        this.classList.add('loading');
        
        // Add item to cart
        if (window.cart) {
          await window.cart.updateQuantity(selectedVariant.id, quantity, 'add');
          
          // Redirect to checkout
          window.location.href = '/checkout';
        }
      } catch (error) {
        console.error('Error adding item to cart:', error);
        alert('Failed to add item to cart. Please try again.');
      } finally {
        // Remove loading state
        this.classList.remove('loading');
      }
    });
  });
});

// Helper function to format money
function formatMoney(cents) {
  return new Intl.NumberFormat('en-US', {
    style: 'currency',
    currency: '{{ shop.currency }}'
  }).format(cents / 100);
}
</script>

{% schema %}    
{
  "name": "Quickview Modal",
  "settings": [],
  "presets": [
    {
      "name": "Quickview Modal"
    }
  ]
}
{% endschema %} 