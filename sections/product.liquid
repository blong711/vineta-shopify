{% comment %}
  Product Section
  - Multiple layout options: Default, Grid, Stacked
  - Responsive image gallery
  - Product information with variants
  - Add to cart functionality
{% endcomment %}

<section class="flat-single-product">
  <div class="tf-main-product section-image-zoom">
    <div class="container">
      <div class="row">
        <!-- Product Images -->
        <div class="col-md-6">
          {% if section.settings.layout == 'default' %}
            <div class="tf-product-media-wrap sticky-top">
              <div class="thumbs-slider">
                <div dir="ltr" class="swiper tf-product-media-thumbs other-image-zoom" data-preview="4" data-direction="vertical">
                  <div class="swiper-wrapper stagger-wrap">
                    {% for media in product.media %}
                      <div class="swiper-slide stagger-item" data-media-type="{{ media.media_type }}" data-media-id="{{ media.id }}">
                        <div class="item position-relative">
                          {% case media.media_type %}
                            {% when 'image' %}
                              <img class="tf-image-zoom lazyload"
                                src="{{ media | image_url: width: 100 }}"
                                alt="{{ media.alt | default: product.title }}"
                                width="100"
                                height="150">
                            {% when 'video' %}
                              <div class="wrap-btn-viewer style-video">
                                <i class="icon icon-video"></i>
                              </div>
                              <img class="tf-image-zoom lazyload"
                                src="{{ media.preview_image | image_url: width: 100 }}"
                                alt="Video thumbnail"
                                width="100"
                                height="150">
                            {% when 'model' %}
                              <div class="wrap-btn-viewer">
                                <i class="icon icon-btn3d"></i>
                              </div>
                              <img class="tf-image-zoom lazyload"
                                src="{{ media.preview_image | image_url: width: 100 }}"
                                alt="3D model thumbnail"
                                width="100"
                                height="150">
                          {% endcase %}
                        </div>
                      </div>
                    {% endfor %}
                  </div>
                </div>
                <div class="flat-wrap-media-product">
                  <div dir="ltr" class="swiper tf-product-media-main tf-product-zoom-inner" id="gallery-swiper-started">
                    <div class="swiper-wrapper">
                      {% for media in product.media %}
                        <div class="swiper-slide" data-media-type="{{ media.media_type }}" data-media-id="{{ media.id }}">
                          {% case media.media_type %}
                            {% when 'image' %}
                              <a href="{{ media | image_url: width: 1200 }}" target="_blank" class="item" data-pswp-width="552px" data-pswp-height="827px">
                                <img class="tf-image-zoom-inner lazyload"
                                  src="{{ media | image_url: width: 800 }}"
                                  alt="{{ media.alt | default: product.title }}"
                                  width="auto"
                                  height="auto">
                              </a>
                            {% when 'video' %}
                              <div class="item position-relative">
                                <video controls muted
                                  width="400"
                                  height="600"
                                  poster="{{ media.preview_image | image_url: width: 800 }}">
                                  {% for source in media.sources %}
                                    <source src="{{ source.url }}" type="{{ source.mime_type }}">
                                  {% endfor %}
                                  Your browser does not support the video tag.
                                </video>
                              </div>
                            {% when 'model' %}
                              <div class="item">
                                <div class="tf-model-viewer">
                                  <model-viewer
                                    src="{{ media.sources[0].url }}"
                                    alt="{{ media.alt | default: product.title }}"
                                    ar
                                    camera-controls
                                    poster="{{ media.preview_image | image_url: width: 800 }}"
                                    class="tf-model-viewer-ui disabled" tabindex="1"
                                    data-js-focus-visible="" ar-status="not-presenting"
                                    >
                                  </model-viewer>
                                </div>
                                <div class="tf-model-viewer-ui-button">
                                  <div class="wrap-btn-viewer">
                                      <i class="icon icon-btn3d"></i>
                                  </div>
                                </div>
                              </div>
                          {% endcase %}
                        </div>
                      {% endfor %}
                    </div>
                  </div>
                  <div class="swiper-button-next nav-swiper thumbs-next"></div>
                  <div class="swiper-button-prev nav-swiper thumbs-prev"></div>
                </div>
              </div>
            </div>
          {% else %}
            <div class="wrapper-gallery-scroll flat-single-grid{% if section.settings.layout == 'stacked' %} flat-single-stacked{% endif %}" id="gallery-started">
              {% for media in product.media %}
                {% case media.media_type %}
                  {% when 'image' %}
                    <a href="{{ media | image_url: width: 1200 }}" data-scroll="{{ media.alt | default: 'default' }}" target="_blank" class="item item-scroll-target" data-pswp-width="552px" data-pswp-height="827px">
                      <img class="tf-image-zoom lazyload"
                        src="{{ media | image_url: width: 800 }}"
                        alt="{{ media.alt | default: product.title }}"
                        width="400"
                        height="600">
                    </a>
                  {% when 'video' %}
                    <div class="item position-relative">
                      <video controls muted
                        width="400"
                        height="600"
                        poster="{{ media.preview_image | image_url: width: 800 }}">
                        {% for source in media.sources %}
                          <source src="{{ source.url }}" type="{{ source.mime_type }}">
                        {% endfor %}
                        Your browser does not support the video tag.
                      </video>
                    </div>
                    {% when 'model' %}
                      <div class="item">
                        <div class="tf-model-viewer">
                          <model-viewer
                            src="{{ media.sources[0].url }}"
                            alt="{{ media.alt | default: product.title }}"
                            ar
                            camera-controls
                            poster="{{ media.preview_image | image_url: width: 800 }}"
                            class="tf-model-viewer-ui disabled" tabindex="1"
                            data-js-focus-visible="" ar-status="not-presenting"
                            >
                          </model-viewer>
                        </div>
                        <div class="tf-model-viewer-ui-button">
                          <div class="wrap-btn-viewer">
                              <i class="icon icon-btn3d"></i>
                          </div>
                        </div>
                      </div>
                {% endcase %}
              {% endfor %}
            </div>
          {% endif %}
        </div>
        <!-- /Product Images -->

        <!-- Product Info -->
        <div class="col-md-6">
          <div class="tf-product-info-wrap sticky-top position-relative">
            <div class="tf-zoom-main"></div>
            <div class="tf-product-info-list other-image-zoom">
              <div class="tf-product-info-heading">
                <h5 class="product-info-name fw-medium">{{ product.title }}</h5>
                {% for block in section.blocks %}
                  {% case block.type %}
                    {% when 'rating' %}
                      <div class="product-info-rate" {{ block.shopify_attributes }}>
                        <div class="list-star">
                          {% for i in (1..5) %}
                            <i class="icon icon-star"></i>
                          {% endfor %}
                        </div>
                        <span class="count-review">({{ product.metafields.reviews.rating_count | default: block.settings.no_reviews_text }})</span>
                      </div>
                  {% endcase %}
                {% endfor %}
                <div class="product-info-price">
                  <div class="display-sm price-new price-on-sale">{{ product.price | money }}</div>
                  {% if product.compare_at_price > product.price %}
                    <div class="display-sm price-old">{{ product.compare_at_price | money }}</div>
                    <span class="badge-sale">{{ product.compare_at_price | minus: product.price | times: 100.0 | divided_by: product.compare_at_price | round }}% Off</span>
                  {% endif %}
                </div>

                {% for block in section.blocks %}
                  {% case block.type %}
                    {% when 'sold_count' %}
                      <div class="product-info-sold" {{ block.shopify_attributes }}>
                        <svg class="icon" width="18" height="18" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg">
                          <path d="M15.2759 10.9242C15.2556 10.6149 14.9236 10.4281 14.6488 10.5714C14.4098 10.6961 13.6603 11.0196 13.0698 11.0196C12.6156 11.0196 12.3132 10.8694 12.3132 10.1362C12.3132 8.12636 15.0124 6.52078 12.6056 3.51218C12.3295 3.16719 11.773 3.41746 11.8469 3.85238C11.8484 3.86145 11.9887 4.77182 11.5632 5.27582C11.3635 5.51218 11.061 5.62711 10.6384 5.62711C9.17454 5.62711 9.27646 1.94027 11.1223 0.795793C11.5328 0.541367 11.2702 -0.0948905 10.8012 0.0119845C10.683 0.0387033 7.88684 0.701328 6.39105 3.62798C5.28035 5.80099 5.88191 7.29977 6.32116 8.39418C6.71371 9.3722 6.89283 9.81857 6.01364 10.4273C5.68251 10.6566 5.42618 10.6328 5.42618 10.6328C4.60384 10.6328 3.82489 9.42402 3.59437 8.95879C3.40712 8.57837 2.83721 8.67311 2.78314 9.09372C2.75993 9.27457 2.24057 13.5513 4.51026 16.1312C5.76076 17.5525 7.50054 18.0581 9.40742 17.9948C11.1702 17.9357 12.5768 17.3395 13.5883 16.2228C15.4639 14.152 15.2844 11.0549 15.2759 10.9242Z" fill="#F2721C"/>
                          <path d="M4.44845 10.1357C4.04521 9.74669 3.72761 9.22817 3.59412 8.95877C3.40688 8.57834 2.83696 8.67309 2.78289 9.0937C2.75969 9.27454 2.24032 13.5513 4.51001 16.1312C5.2812 17.0077 6.27795 17.5784 7.48458 17.8379C4.95987 16.3506 4.24181 13.0162 4.44845 10.1357Z" fill="#EA5513"/>
                          <path d="M3.73448 4.51577C3.70506 4.49735 3.66772 4.49735 3.6383 4.51577C2.64745 5.13712 2.64446 6.58633 3.6383 7.20955C3.66723 7.22769 3.70471 7.22825 3.73448 7.20955C4.72533 6.58816 4.72821 5.13898 3.73448 4.51577Z" fill="#F2721C"/>
                          <path d="M4.12025 4.85809C4.01204 4.72502 3.88239 4.60855 3.73448 4.51577C3.70506 4.49735 3.66772 4.49735 3.6383 4.51577C2.64745 5.13712 2.64446 6.58633 3.6383 7.20955C3.66723 7.22769 3.70471 7.22825 3.73448 7.20955C3.88242 7.11677 4.01208 7.00026 4.12029 6.8672C3.64157 6.28237 3.64072 5.44386 4.12025 4.85809Z" fill="#EA5513"/>
                          <path d="M10.8011 0.0119845C10.6829 0.0387033 7.88676 0.701328 6.39096 3.62798C4.90723 6.53083 6.48163 8.24741 6.63386 9.34639L6.63403 9.34629C6.69 9.74974 6.54569 10.0588 6.01356 10.4272C5.69392 10.6486 5.40494 10.6816 5.10034 10.5723V10.5727C5.10034 10.5727 6.17507 11.6058 7.26087 10.8972C8.33686 10.1951 8.02601 9.11809 7.85986 8.63131L7.86025 8.63103C7.46365 7.57951 7.11673 6.19027 8.09319 4.27988C8.67292 3.14557 9.44797 2.35153 10.1868 1.80263C10.426 1.38835 10.7395 1.0331 11.1223 0.795758C11.5326 0.541367 11.2701 -0.0948905 10.8011 0.0119845Z" fill="#EA5513"/>
                        </svg>
                        <span class="text-dark">{{ block.settings.sold_count_text }}</span>
                      </div>
                    {% when 'stock_count' %}
                      <div class="product-info-progress-sale" {{ block.shopify_attributes }}>
                        <div class="title-hurry-up">
                          <span class="text-primary fw-medium">HURRY UP!</span> 
                          {% assign stock_text = block.settings.stock_count_text %}
                          {% assign inventory_quantity = product.variants.first.inventory_quantity %}
                          {% assign inventory_policy = product.variants.first.inventory_policy %}
                          {% assign stock_text = stock_text | replace: '{count}', inventory_quantity %}
                          {{ stock_text }}
                        </div>
                        <div class="progress-sold">
                          {% assign progress_percentage = inventory_quantity | times: 100 | divided_by: inventory_policy %}
                          <div class="value" style="width: {{ progress_percentage }}%;" data-progress="{{ progress_percentage }}"></div>
                        </div>
                      </div>
                  {% endcase %}
                {% endfor %}
              </div>

              <div class="tf-product-info-variant">
                {% for option in product.options_with_values %}
                  <div class="variant-picker-item variant-{{ option.name | handle }}">
                    <div class="variant-picker-label">
                      <div>{{ option.name }}:<span class="variant-picker-label-value value-current{{ option.name }}">{{ option.selected_value }}</span></div>
                      {% if option.name == 'Size' %}
                        {% for block in section.blocks %}
                          {% if block.type == 'size_guide' %}
                            <a href="#sizeGuide" data-bs-toggle="modal" class="size-guide link" {{ block.shopify_attributes }}>{{ block.settings.size_guide_text }}</a>
                          {% endif %}
                        {% endfor %}
                      {% endif %}
                    </div>
                    <div class="variant-picker-values">
                      {% for value in option.values %}
                        {% if option.name == 'Color' %}
                          <div class="hover-tooltip tooltip-bot color-btn btn-scroll-target{% if value == option.selected_value %} active{% endif %}" 
                               data-scroll="{{ value | handle }}" 
                               data-option="{{ option.name | handle }}"
                               data-value="{{ value | handle }}">
                            <span class="check-color bg-{{ value | handle }}"></span>
                            <span class="tooltip">{{ value }}</span>
                          </div>
                        {% else %}
                          <span class="size-btn{% if value == option.selected_value %} active{% endif %}" 
                                data-size="{{ value | handle }}"
                                data-option="{{ option.name | handle }}"
                                data-value="{{ value | handle }}">{{ value }}</span>
                        {% endif %}
                      {% endfor %}
                    </div>
                  </div>
                {% endfor %}
              </div>

              <div class="tf-product-total-quantity">
                <div class="group-btn">
                  <div class="wg-quantity">
                    <button class="btn-quantity btn-decrease">-</button>
                    <input class="quantity-product" type="text" name="number" value="1">
                    <button class="btn-quantity btn-increase">+</button>
                  </div>
                  <a href="javascript:void(0);" 
                     class="tf-btn hover-primary add-to-cart" 
                     data-variant-id="{{ product.selected_or_first_available_variant.id }}"
                     data-quantity="1"
                     aria-label="Add to cart">Add to cart</a>
                </div>
                <a href="#" class="tf-btn btn-primary w-100 animate-btn">Buy it now</a>
                <a href="/checkout" class="more-choose-payment link">More payment options</a>
              </div>

              {% for block in section.blocks %}
                {% case block.type %}
                  {% when 'extra_links' %}
                    {% if block.settings.show_wishlist or block.settings.show_compare or block.settings.show_ask_question or block.settings.show_share %}
                      <div class="tf-product-info-extra-link" {{ block.shopify_attributes }}>
                        {% if block.settings.show_wishlist %}
                          <a href="javascript:void(0);" 
                             class="product-extra-icon link btn-wishlist" 
                             data-wishlist 
                             data-id="{{ product.id }}" 
                             data-action="add"
                             aria-label="Add to wishlist">
                            <span class="wishlist-content add">
                              <i class="icon icon-heart"></i>
                              <span class="text">Add to wishlist</span>
                            </span>
                            <span class="wishlist-content remove">
                              <i class="icon icon-trash"></i>
                              <span class="text">Remove from wishlist</span>
                            </span>
                          </a>
                        {% endif %}
                        {% if block.settings.show_compare %}
                          <a href="javascript:void(0);" 
                             class="product-extra-icon link" 
                             data-compare 
                             data-id="{{ product.id }}" 
                             data-action="add"
                             aria-label="Add to compare">
                            <i class="icon icon-compare2"></i>Compare
                          </a>
                        {% endif %}
                        {% if block.settings.show_ask_question %}
                          <a href="#askQuestion" data-bs-toggle="modal" class="product-extra-icon link"><i class="icon icon-ask"></i>Ask a question</a>
                        {% endif %}
                        {% if block.settings.show_share %}
                          <a href="#shareSocial" data-bs-toggle="modal" class="product-extra-icon link"><i class="icon icon-share"></i>Share</a>
                        {% endif %}
                      </div>
                    {% endif %}

                  {% when 'trust_and_payment' %}
                    <div class="tf-product-info-trust-seal text-center" {{ block.shopify_attributes }}>
                      <p class="text-md text-dark-2 text-seal fw-medium">{{ block.settings.trust_seal_text }}</p>
                      <ul class="list-card">
                        {% for icon_block in section.blocks %}
                          {% if icon_block.type == 'payment_icon' and icon_block.settings.icon != blank %}
                            <li class="card-item">
                              <img class="lazyload" data-src="{{ icon_block.settings.icon | image_url: width: 60 }}" src="{{ icon_block.settings.icon | image_url: width: 10 }}" alt="Payment Method" width="60" height="40">
                            </li>
                          {% endif %}
                        {% endfor %}
                      </ul>
                    </div>

                  {% when 'delivery_info' %}
                    <div class="tf-product-info-delivery-return" {{ block.shopify_attributes }}>
                      <div class="product-delivery">
                        <div class="icon icon-car2"></div>
                        <p class="text-md">Estimated delivery time: <span class="fw-medium">{{ block.settings.delivery_time }}</span></p>
                      </div>
                      <div class="product-delivery">
                        <div class="icon icon-shipping3"></div>
                        <p class="text-md">Free shipping on <span class="fw-medium">{{ block.settings.free_shipping_text }}</span></p>
                      </div>
                    </div>

                  {% when 'fbt' %}
                    <div class="tf-product-fbt" {{ block.shopify_attributes }}>
                      <div class="title text-xl fw-medium">{{ block.settings.fbt_title }}</div>
                      <form class="tf-product-form-bundle">
                        <div class="tf-bundle-products">
                          {% assign collection = product.collections.first %}
                          {% if collection %}
                            {% assign related_products = collection.products | where: "available", true | where_not: "id", product.id | limit: block.settings.max_products %}
                            {% for related_product in related_products %}
                              <div class="tf-bundle-product-item item-has-checkbox{% if forloop.first %} check{% endif %}">
                                <div class="bundle-check">
                                  <input type="checkbox"{% if forloop.first %} checked="checked"{% endif %} class="tf-check" data-product-id="{{ related_product.id }}">
                                </div>
                                <a href="{{ related_product.url }}" class="bundle-image">
                                  <img src="{{ related_product.featured_image | image_url: width: 200 }}" alt="{{ related_product.title }}" width="200" height="200">
                                </a>
                                <div class="bundle-info">
                                  <div class="bundle-title text-sm fw-medium">{{ related_product.title }}</div>
                                  <div class="bundle-price text-md fw-medium">
                                    <span class="new-price">{{ related_product.price | money }}</span>
                                    {% if related_product.compare_at_price > related_product.price %}
                                      <span class="old-price">{{ related_product.compare_at_price | money }}</span>
                                    {% endif %}
                                  </div>
                                  {% if related_product.has_only_default_variant == false %}
                                    <div class="bundle-variant tf-select">
                                      <select data-product-id="{{ related_product.id }}">
                                        {% for variant in related_product.variants %}
                                          <option value="{{ variant.id }}"{% if variant == related_product.selected_or_first_available_variant %} selected="selected"{% endif %}>
                                            {{ variant.title }} - {{ variant.price | money }}
                                          </option>
                                        {% endfor %}
                                      </select>
                                    </div>
                                  {% endif %}
                                </div>
                              </div>
                            {% endfor %}
                          {% endif %}
                        </div>
                        <div class="bundle-total-submit">
                          <div class="text">Total price:</div>
                          <span class="total-price">{{ product.price | money }}</span>
                          <span class="total-price-old" style="display: none;"></span>
                        </div>
                        <button type="button" class="btn-submit-total tf-btn btn-out-line-primary">Add selected to cart</button>
                      </form>
                    </div>
                {% endcase %}
              {% endfor %}
            </div>
          </div>
        </div>
        <!-- /Product Info -->
      </div>
    </div>
  </div>

  {% if section.settings.show_sticky_cart %}
    <div class="tf-sticky-btn-atc">
      <div class="container">
        <div class="tf-height-observer w-100 d-flex align-items-center">
          <div class="tf-sticky-atc-product d-flex align-items-center">
            <div class="tf-sticky-atc-img">
              <img class="lazyload" data-src="{{ product.featured_image | image_url: width: 100 }}" src="{{ product.featured_image | image_url: width: 50 }}" alt="{{ product.title }}">
            </div>
            <div class="tf-sticky-atc-title fw-5 d-xl-block d-none">{{ product.title }}</div>
          </div>
          <div class="tf-sticky-atc-infos">
            <form class="">
              <div class="tf-sticky-atc-variant-price text-center tf-select">
                <select>
                  {% for variant in product.variants %}
                    <option value="{{ variant.id }}"{% if variant == product.selected_or_first_available_variant %} selected="selected"{% endif %}>
                      {{ variant.title }} - {{ variant.price | money }}
                    </option>
                  {% endfor %}
                </select>
              </div>
              <div class="tf-sticky-atc-btns">
                <div class="tf-product-info-quantity">
                  <div class="wg-quantity">
                    <button class="btn-quantity minus-btn">-</button>
                    <input class="quantity-product font-4" type="text" name="number" value="1">
                    <button class="btn-quantity plus-btn">+</button>
                  </div>
                </div>
                <a href="javascript:void(0);" 
                   class="tf-btn hover-primary add-to-cart" 
                   data-variant-id="{{ product.selected_or_first_available_variant.id }}"
                   data-quantity="1"
                   aria-label="Add to cart">Add to cart</a>
              </div>
            </form>
          </div>
        </div>
      </div>
    </div>
  {% endif %}
</section>

<style>
.btn-wishlist .wishlist-content {
  display: none;
}

.btn-wishlist .wishlist-content.add {
  display: inline-flex;
  align-items: center;
}

.btn-wishlist[data-action="remove"] .wishlist-content.add {
  display: none;
}

.btn-wishlist[data-action="remove"] .wishlist-content.remove {
  display: inline-flex;
  align-items: center;
}

.btn-wishlist .icon {
  margin-right: 5px;
}

/* Add zoom styles */
.tf-product-media-wrap {
  position: relative;
}

.tf-zoom-main {
  position: absolute;
  top: 0;
  left: 100%;
  width: 100%;
  height: 100%;
  background-size: 200%;
  background-repeat: no-repeat;
  display: none;
  z-index: 10;
  pointer-events: none;
  margin-left: 20px;
  border: 1px solid #eee;
  box-shadow: 0 0 10px rgba(0,0,0,0.1);
}

.tf-image-zoom,
.tf-image-zoom-inner {
  cursor: zoom-in;
  transition: opacity 0.3s ease;
}

.tf-image-zoom:hover,
.tf-image-zoom-inner:hover {
  opacity: 0.9;
}

@media (max-width: 991px) {
  .tf-zoom-main {
    display: none !important;
  }
}

/* --- Image Zoom at Cursor --- */
.tf-image-zoom,
.tf-image-zoom-inner {
  transition: transform 0.4s cubic-bezier(.4,0,.2,1);
  will-change: transform;
  cursor: pointer;
}
.tf-image-zoom.zoomed,
.tf-image-zoom-inner.zoomed {
  transform: scale(2); /* Adjust zoom level as needed */
  z-index: 2;
  cursor: pointer;
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
  console.log('DOM Content Loaded - Initializing product page');
  
  {% if section.settings.layout == 'default' %}
    console.log('Initializing default layout with Swiper');
    
    // Default layout with Swiper
    const galleryThumbs = new Swiper('.tf-product-media-thumbs', {
      direction: 'vertical',
      slidesPerView: 4,
      spaceBetween: 10,
      navigation: {
        nextEl: '.thumbs-next',
        prevEl: '.thumbs-prev',
      },
      breakpoints: {
        320: {
          direction: 'horizontal',
          slidesPerView: 4,
        },
        768: {
          direction: 'vertical',
          slidesPerView: 4,
        }
      }
    });

    const galleryMain = new Swiper('.tf-product-media-main', {
      slidesPerView: 1,
      spaceBetween: 10,
      thumbs: {
        swiper: galleryThumbs
      },
      navigation: {
        nextEl: '.thumbs-next',
        prevEl: '.thumbs-prev',
      },
      on: {
        init: function() {
          // Pause all videos initially
          this.slides.forEach(slide => {
            const video = slide.querySelector('video');
            if (video) {
              video.pause();
            }
          });
        },
        slideChange: function() {
          console.log('Slide changed to index:', this.activeIndex);
          const activeSlide = this.slides[this.activeIndex];
          const mediaId = parseInt(activeSlide.getAttribute('data-media-id'));
          const productMedia = {{ product.media | json }};
          const media = productMedia.find(m => m.id === mediaId);

          // Find the variant that matches this media (by variant_ids or src)
          let matchedVariant = null;
          const variants = {{ product.variants | json }};
          if (media && media.variant_ids && media.variant_ids.length > 0) {
            matchedVariant = variants.find(v => media.variant_ids.includes(v.id));
          }
          if (!matchedVariant && media && media.src) {
            matchedVariant = variants.find(v => v.featured_image && v.featured_image.src === media.src);
          }

          // Update color swatch active state
          if (matchedVariant && matchedVariant.option1) {
            const color = matchedVariant.option1.toLowerCase();
            document.querySelectorAll('.color-btn').forEach(btn => {
              if (btn.getAttribute('data-scroll') && btn.getAttribute('data-scroll').toLowerCase() === color) {
                btn.classList.add('active');
              } else {
                btn.classList.remove('active');
              }
            });
          }

          // Pause all videos first
          this.slides.forEach(slide => {
            const video = slide.querySelector('video');
            if (video) {
              video.pause();
            }
          });

          // Play video in active slide if it exists
          const activeVideo = activeSlide.querySelector('video');
          if (activeVideo) {
            activeVideo.play().catch(error => {
              console.log('Error playing video:', error);
            });
          }
        }
      }
    });

    // Disable navigation buttons when at start/end
    function updateNavigationButtons() {
      console.log('Updating navigation buttons');
      console.log('Is beginning:', galleryMain.isBeginning);
      console.log('Is end:', galleryMain.isEnd);
      
      const prevButton = document.querySelector('.thumbs-prev');
      const nextButton = document.querySelector('.thumbs-next');
      
      if (galleryMain.isBeginning) {
        prevButton.classList.add('swiper-button-disabled');
      } else {
        prevButton.classList.remove('swiper-button-disabled');
      }
      
      if (galleryMain.isEnd) {
        nextButton.classList.add('swiper-button-disabled');
      } else {
        nextButton.classList.remove('swiper-button-disabled');
      }
    }

    galleryMain.on('slideChange', updateNavigationButtons);
    updateNavigationButtons();
  {% else %}
    // Grid and Stacked layout functionality
    const galleryItems = document.querySelectorAll('.item-scroll-target');
    const colorButtons = document.querySelectorAll('.btn-scroll-target');
    
    colorButtons.forEach(button => {
      button.addEventListener('click', function() {
        const color = this.getAttribute('data-scroll');
        document.querySelectorAll('.btn-scroll-target').forEach(btn => btn.classList.remove('active'));
        this.classList.add('active');
        
        galleryItems.forEach(item => {
          if (item.getAttribute('data-scroll') === color) {
            item.scrollIntoView({ behavior: 'smooth', block: 'center' });
          }
        });
      });
    });
  {% endif %}

  // Store selected options
  let selectedOptions = {
    {% for option in product.options_with_values %}
      '{{ option.name | handle }}': '{{ option.selected_value | handle }}',
    {% endfor %}
  };
  console.log('Initial selected options:', selectedOptions);

  // Function to find variant by color
  function findVariantByColor(color) {
    console.log('=== findVariantByColor ===');
    console.log('Input color:', color);
    if (!color) {
      console.log('No color provided, returning null');
      return null;
    }

    const variants = {{ product.variants | json }};
    const options = {{ product.options | json }};
    console.log('All variants:', variants);
    console.log('Product options:', options);
    
    // Get current size selection
    const activeSizeBtn = document.querySelector('.size-btn.active');
    const selectedSize = activeSizeBtn ? activeSizeBtn.getAttribute('data-value') : null;
    console.log('Current selected size:', selectedSize);
    
    // Find variant that matches both color and size
    for (const variant of variants) {
      console.log('Checking variant:', variant);
      const matchesColor = variant.option1 && variant.option1.toLowerCase() === color.toLowerCase();
      const matchesSize = !selectedSize || (variant.option2 && variant.option2.toLowerCase() === selectedSize.toLowerCase());
      
      console.log('Variant matches:', {
        color: matchesColor,
        size: matchesSize,
        variantColor: variant.option1,
        variantSize: variant.option2
      });
      
      if (matchesColor && matchesSize) {
        console.log('Found matching variant:', variant);
        return variant;
      }
    }
    console.log('No variant found for color:', color);
    return null;
  }

  // Function to find variant ID based on selected options
  function findVariantId() {
    console.log('=== findVariantId ===');
    console.log('Current selected options:', selectedOptions);
    
    const variants = {{ product.variants | json }};
    const options = {{ product.options | json }};
    
    // Get current selections
    const activeColorBtn = document.querySelector('.color-btn.active');
    const activeSizeBtn = document.querySelector('.size-btn.active');
    const selectedColor = activeColorBtn ? activeColorBtn.getAttribute('data-scroll') : null;
    const selectedSize = activeSizeBtn ? activeSizeBtn.getAttribute('data-value') : null;
    
    console.log('Current selections:', {
      color: selectedColor,
      size: selectedSize
    });
    
    // Find variant that matches all selected options
    const matchingVariant = variants.find(variant => {
      const matchesColor = !selectedColor || 
        (variant.option1 && variant.option1.toLowerCase() === selectedColor.toLowerCase());
      const matchesSize = !selectedSize || 
        (variant.option2 && variant.option2.toLowerCase() === selectedSize.toLowerCase());
      
      console.log('Checking variant:', {
        id: variant.id,
        option1: variant.option1,
        option2: variant.option2,
        matchesColor,
        matchesSize
      });
      
      return matchesColor && matchesSize;
    });
    
    console.log('Found matching variant:', matchingVariant);
    return matchingVariant ? matchingVariant.id : null;
  }

  // Function to update variant selection
  function updateVariantSelection(variant) {
    console.log('=== updateVariantSelection ===');
    console.log('Input variant:', variant);
    if (!variant) {
      console.log('No variant provided, skipping update');
      return;
    }

    // Update add to cart button
    const addToCartBtn = document.querySelector('.add-to-cart');
    if (addToCartBtn) {
      console.log('Updating add to cart button variant ID:', variant.id);
      addToCartBtn.dataset.variantId = variant.id;
      
      // Update quantity in add to cart button
      const quantityInput = document.querySelector('.quantity-product');
      if (quantityInput) {
        const quantity = parseInt(quantityInput.value) || 1;
        addToCartBtn.dataset.quantity = quantity;
      }
    }

    // Update price
    const priceElement = document.querySelector('.price-new');
    const oldPriceElement = document.querySelector('.price-old');
    if (priceElement) {
      console.log('Updating price to:', formatMoney(variant.price));
      priceElement.textContent = formatMoney(variant.price);
    }
    if (oldPriceElement) {
      if (variant.compare_at_price > variant.price) {
        console.log('Updating compare at price to:', formatMoney(variant.compare_at_price));
        oldPriceElement.textContent = formatMoney(variant.compare_at_price);
        oldPriceElement.style.display = 'inline';
      } else {
        oldPriceElement.style.display = 'none';
      }
    }

    // Update selected options
    selectedOptions['color'] = variant.option1 ? variant.option1.toLowerCase() : '';
    selectedOptions['size'] = variant.option2 ? variant.option2.toLowerCase() : '';
    console.log('Updated selected options:', selectedOptions);

    // Update main image gallery
    const mainSwiper = document.querySelector('.tf-product-media-main')?.swiper;
    console.log('Main swiper found:', !!mainSwiper);
    
    if (mainSwiper) {
      const slides = mainSwiper.slides;
      console.log('Total slides:', slides.length);
      let foundMatchingSlide = false;
      
      // First try to find a slide that matches the variant's featured image
      if (variant.featured_image) {
        console.log('Variant has featured image:', variant.featured_image);
        for (let i = 0; i < slides.length; i++) {
          const mediaId = parseInt(slides[i].getAttribute('data-media-id'));
          console.log('Checking slide', i, 'mediaId:', mediaId, 'against variant image id:', variant.featured_image.id);
          
          if (mediaId === variant.featured_image.id) {
            console.log('Found exact variant image match at slide:', i);
            mainSwiper.slideTo(i);
            foundMatchingSlide = true;
            break;
          }
        }
      }

      // If no exact match found, try to find the first image for this variant
      if (!foundMatchingSlide) {
        console.log('No exact match found, trying to find variant image by variant_ids');
        const productMedia = {{ product.media | json }};
        console.log('Product media:', productMedia);
        
        for (let i = 0; i < slides.length; i++) {
          const mediaId = parseInt(slides[i].getAttribute('data-media-id'));
          const media = productMedia.find(m => m.id === mediaId);
          console.log('Checking slide', i, 'media:', media);
          
          if (media && media.variant_ids && media.variant_ids.includes(variant.id)) {
            console.log('Found variant image at slide:', i);
            mainSwiper.slideTo(i);
            foundMatchingSlide = true;
            break;
          }
        }
        // Fallback: try matching by src if variant.featured_image.src exists
        if (!foundMatchingSlide && variant.featured_image && variant.featured_image.src) {
          console.log('No match by variant_ids, trying to match by src');
          for (let i = 0; i < slides.length; i++) {
            const mediaId = parseInt(slides[i].getAttribute('data-media-id'));
            const media = productMedia.find(m => m.id === mediaId);
            if (media && media.src === variant.featured_image.src) {
              console.log('Found variant image by src at slide:', i);
              mainSwiper.slideTo(i);
              foundMatchingSlide = true;
              break;
            }
          }
        }
      }
    }

    // Set the active color swatch based on the selected color
    if (variant && variant.option1) {
      const color = variant.option1.toLowerCase();
      document.querySelectorAll('.color-btn').forEach(btn => {
        if (btn.getAttribute('data-scroll') && btn.getAttribute('data-scroll').toLowerCase() === color) {
          btn.classList.add('active');
        } else {
          btn.classList.remove('active');
        }
      });
    }

    // Set the active size button based on the selected size
    if (variant && variant.option2) {
      const size = variant.option2.toLowerCase();
      document.querySelectorAll('.size-btn').forEach(btn => {
        if (btn.getAttribute('data-value') && btn.getAttribute('data-value').toLowerCase() === size) {
          btn.classList.add('active');
        } else {
          btn.classList.remove('active');
        }
      });
    }

    // Update main add to cart button only
    updateMainAddToCartButton(variant);
  }

  // Use event delegation for color swatch clicks
  document.addEventListener('click', function(e) {
    const btn = e.target.closest('.color-btn');
    if (!btn) return;
    const color = btn.getAttribute('data-scroll');
    const variant = findVariantByColor(color);
    if (variant) {
      updateVariantSelection(variant);
    }
  });

  // Handle size variant selection
  document.querySelectorAll('.size-btn').forEach(button => {
    button.addEventListener('click', function() {
      const size = this.getAttribute('data-value');
      document.querySelectorAll('.size-btn').forEach(btn => btn.classList.remove('active'));
      this.classList.add('active');
      
      // Update selected options
      selectedOptions['size'] = size;
      
      // Find and update variant ID
      const variantId = findVariantId();
      if (variantId) {
        const variants = {{ product.variants | json }};
        const variant = variants.find(v => v.id === variantId);
        updateMainAddToCartButton(variant);
      }
    });
  });

  // Handle quantity changes
  document.querySelectorAll('.quantity-product').forEach(input => {
    input.addEventListener('change', function() {
      const quantity = parseInt(this.value) || 1;
      const mainAddToCartBtn = document.querySelector('.tf-product-info-list .add-to-cart');
      if (mainAddToCartBtn) {
        mainAddToCartBtn.dataset.quantity = quantity;
      }
    });
  });

  // Handle quantity buttons
  document.querySelectorAll('.tf-product-info-list .btn-increase').forEach(button => {
    button.addEventListener('click', function(e) {
      e.preventDefault();
      const input = this.previousElementSibling;
      const currentValue = parseInt(input.value) || 1;
      input.value = currentValue;
      const mainAddToCartBtn = document.querySelector('.tf-product-info-list .add-to-cart');
      if (mainAddToCartBtn) {
        mainAddToCartBtn.dataset.quantity = currentValue + 1;
      }
    });
  });

  document.querySelectorAll('.tf-product-info-list .btn-decrease').forEach(button => {
    button.addEventListener('click', function(e) {
      e.preventDefault();
      const input = this.nextElementSibling;
      const currentValue = parseInt(input.value) || 1;
      if (currentValue > 1) {
        input.value = currentValue;
        const mainAddToCartBtn = document.querySelector('.tf-product-info-list .add-to-cart');
        if (mainAddToCartBtn) {
          mainAddToCartBtn.dataset.quantity = currentValue - 1;
        }
      }
    });
  });

  // Only set the active class for initial page load
  const initialVariant = {{ product.selected_or_first_available_variant | json }};
  console.log('=== Initial Variant ===');
  console.log('Initial variant:', initialVariant);

  if (initialVariant) {
    updateVariantSelection(initialVariant);
    // Set initial color button active state
    const initialColor = initialVariant.option1;
    console.log('Initial color:', initialColor);
    if (initialColor) {
      const colorBtn = Array.from(document.querySelectorAll('.color-btn')).find(
        btn => btn.getAttribute('data-scroll') && btn.getAttribute('data-scroll').toLowerCase() === initialColor.toLowerCase()
      );
      console.log('Found initial color button:', colorBtn);
      if (colorBtn) {
        colorBtn.classList.add('active');
        console.log('Set initial color button active state');
      }
    }
  }

  // Initialize image zoom
  const zoomMain = document.querySelector('.tf-zoom-main');
  const zoomImages = document.querySelectorAll('.tf-image-zoom');
  
  zoomImages.forEach(image => {
    image.addEventListener('mousemove', function(e) {
      const rect = this.getBoundingClientRect();
      const x = e.clientX - rect.left;
      const y = e.clientY - rect.top;
      
      const xPercent = x / rect.width * 100;
      const yPercent = y / rect.height * 100;
      
      zoomMain.style.backgroundImage = `url(${this.getAttribute('data-zoom')})`;
      zoomMain.style.backgroundPosition = `${xPercent}% ${yPercent}%`;
      zoomMain.style.display = 'block';
    });
    
    image.addEventListener('mouseleave', function() {
      zoomMain.style.display = 'none';
    });
  });

  // Handle add to cart
  document.querySelectorAll('.add-to-cart').forEach(button => {
    button.addEventListener('click', async function(e) {
      e.preventDefault();
      // Prevent multiple clicks
      if (this.classList.contains('loading')) {
        return;
      }
      const variantId = this.dataset.variantId;
      let quantity = 1;
      // Always read from the main product info input
      const mainQuantityInput = document.querySelector('.tf-product-info-list .quantity-product');
      if (mainQuantityInput) {
        quantity = parseInt(mainQuantityInput.value) || 1;
      }
      
      try {
        // Show loading state
        this.classList.add('loading');
        
        // Add item to cart
        if (window.cart) {
          await window.cart.updateQuantity(variantId, quantity, 'add');
          
          // Fetch updated cart data
          const response = await fetch('/cart.js');
          const cartData = await response.json();
          
          // Update cart drawer
          const cartDrawer = document.getElementById('shoppingCart');
          if (cartDrawer) {
            const itemsContainer = cartDrawer.querySelector('.tf-mini-cart-items');
            if (itemsContainer) {
              // Clear existing items
              itemsContainer.innerHTML = '';
              
              // Add all items from cart
              cartData.items.forEach(item => {
                const itemElement = document.createElement('div');
                itemElement.className = 'tf-mini-cart-item';
                itemElement.style.border = 'none';
                itemElement.style.borderBottom = 'none';
                itemElement.innerHTML = `
                  <div class="tf-mini-cart-image">
                    <a href="${item.url}">
                      <img class="lazyload" data-src="${item.image}" src="${item.image}" alt="${item.title}" loading="lazy">
                    </a>
                  </div>
                  <div class="tf-mini-cart-info">
                    <div class="d-flex justify-content-between">
                      <a class="title link text-md fw-medium" href="${item.url}">${item.title}</a>
                      <i class="icon icon-close remove" data-variant-id="${item.variant_id}" aria-label="Remove item"></i>
                    </div>
                    <div class="d-flex gap-10">
                      <div class="text-xs">${item.variant_title || ''}</div>
                      <a href="#" class="link edit"><i class="icon-pen"></i></a>
                    </div>
                    <div class="tf-mini-cart-item_price">
                      <p class="price-wrap text-sm fw-medium">
                        <span class="new-price text-primary">${formatMoney(item.final_price)}</span>
                      </p>
                    </div>
                    <div class="tf-mini-cart-item_quantity">
                      <div class="wg-quantity small">
                        <button class="btn-quantity btn-decrease" data-variant-id="${item.variant_id}">-</button>
                        <input type="text" class="quantity-product" value="${item.quantity}" min="0" data-variant-id="${item.variant_id}">
                        <button class="btn-quantity btn-increase" data-variant-id="${item.variant_id}">+</button>
                      </div>
                    </div>
                  </div>
                `;
                itemsContainer.appendChild(itemElement);
              });
              
              // Add event listeners for quantity buttons
              itemsContainer.querySelectorAll('.btn-decrease').forEach(button => {
                button.addEventListener('click', async function() {
                  const variantId = this.dataset.variantId;
                  const input = this.nextElementSibling;
                  const currentValue = parseInt(input.value);
                  if (currentValue > 1) {
                    await window.cart.updateQuantity(variantId, currentValue - 1, 'update');
                  } else {
                    await window.cart.removeItem(variantId);
                  }
                });
              });
  
              itemsContainer.querySelectorAll('.btn-increase').forEach(button => {
                button.addEventListener('click', async function() {
                  const variantId = this.dataset.variantId;
                  const input = this.previousElementSibling;
                  const currentValue = parseInt(input.value);
                  await window.cart.updateQuantity(variantId, currentValue + 1, 'update');
                });
              });

              itemsContainer.querySelectorAll('.quantity-product').forEach(input => {
                input.addEventListener('change', async function() {
                  const variantId = this.dataset.variantId;
                  const newValue = parseInt(this.value);
                  if (isNaN(newValue) || newValue < 1) {
                    if (newValue <= 0) {
                      await window.cart.removeItem(variantId);
                    } else {
                      this.value = 1;
                      await window.cart.updateQuantity(variantId, 1, 'update');
                    }
                  } else {
                    await window.cart.updateQuantity(variantId, newValue, 'update');
                  }
                });
              });

              // Add event listeners for remove buttons
              itemsContainer.querySelectorAll('.remove').forEach(button => {
                button.addEventListener('click', async function() {
                  const variantId = this.dataset.variantId;
                  await window.cart.removeItem(variantId);
                });
              });
              
              // Update cart total
              const totalElement = cartDrawer.querySelector('.cart-total-price');
              if (totalElement) {
                totalElement.textContent = formatMoney(cartData.total_price);
              }
              
              // Update header cart count
              const headerCount = document.querySelector('.count-box');
              if (headerCount) {
                headerCount.textContent = cartData.item_count;
              }
            }
          }
        }
      } catch (error) {
        console.error('Error adding item to cart:', error);
        alert('Failed to add item to cart. Please try again.');
      } finally {
        // Remove loading state
        this.classList.remove('loading');
      }
    });
  });

  // Initialize wishlist buttons state
  if (window.wishlistCompare) {
    window.wishlistCompare.updateButtonsState();
  }

  // Add compare button click handler
  document.querySelectorAll('[data-compare]').forEach(button => {
    button.addEventListener('click', function(e) {
      e.preventDefault();
      const productId = this.dataset.id;
      const action = this.dataset.action;

      if (window.wishlistCompare) {
        window.wishlistCompare.handleCompareClick({
          productId,
          action
        });
      }
    });
  });

  // Remove .tf-zoom-main logic (no longer needed)
  // Add new zoom-at-cursor logic for all .tf-image-zoom and .tf-image-zoom-inner
  document.querySelectorAll('.tf-image-zoom, .tf-image-zoom-inner').forEach(image => {
    image.addEventListener('mousemove', function(e) {
      const rect = this.getBoundingClientRect();
      const x = ((e.clientX - rect.left) / rect.width) * 100;
      const y = ((e.clientY - rect.top) / rect.height) * 100;
      this.style.transformOrigin = `${x}% ${y}%`;
      this.classList.add('zoomed');
    });
    image.addEventListener('mouseleave', function() {
      this.classList.remove('zoomed');
      this.style.transformOrigin = 'center center';
    });
  });

  document.querySelectorAll('.tf-model-viewer-ui-button .icon-btn3d').forEach(function(icon) {
    icon.addEventListener('click', function() {
      const item = icon.closest('.item');
      if (!item) return;
      const modelViewer = item.querySelector('model-viewer');
      if (modelViewer) {
        modelViewer.classList.remove('disabled');
      }
      const iconButton = item.querySelector('.tf-model-viewer-ui-button');
      if (iconButton) {
        iconButton.style.display = 'none';
      }
      // Disable swiper drag when 3D is enabled
      let swiperEl = item.closest('.swiper');
      if (swiperEl && swiperEl.swiper) {
        swiperEl.swiper.allowTouchMove = false;
      }
    });
  });
});

// Helper function to format money
function formatMoney(cents) {
  return new Intl.NumberFormat('en-US', {
    style: 'currency',
    currency: '{{ shop.currency }}'
  }).format(cents / 100);
}

// Function to update main add to cart button (not sticky bar)
function updateMainAddToCartButton(variant) {
  const mainAddToCartBtn = document.querySelector('.tf-product-info-list .add-to-cart');
  if (mainAddToCartBtn && variant) {
    mainAddToCartBtn.dataset.variantId = variant.id;
    // Update quantity
    const quantityInput = document.querySelector('.tf-product-info-list .quantity-product');
    if (quantityInput) {
      const quantity = parseInt(quantityInput.value) || 1;
      mainAddToCartBtn.dataset.quantity = quantity;
    }
  }
}
</script>

{% schema %}
{
  "name": "Product",
  "settings": [
    {
      "type": "select",
      "id": "layout",
      "label": "Product Layout",
      "options": [
        {
          "value": "default",
          "label": "Default"
        },
        {
          "value": "grid",
          "label": "Grid"
        },
        {
          "value": "stacked",
          "label": "Stacked"
        }
      ],
      "default": "default"
    },
    {
      "type": "checkbox",
      "id": "show_sticky_cart",
      "label": "Show Sticky Add to Cart",
      "default": true
    }
  ],
  "blocks": [
    {
      "type": "rating",
      "name": "Product Rating",
      "limit": 1,
      "settings": [
        {
          "type": "text",
          "id": "no_reviews_text",
          "label": "No Reviews Text",
          "default": "No reviews yet"
        }
      ]
    },
    {
      "type": "trust_and_payment",
      "name": "Trust & Payment",
      "limit": 1,
      "settings": [
        {
          "type": "text",
          "id": "trust_seal_text",
          "label": "Trust Seal Text",
          "default": "Guarantee Safe Checkout:"
        }
      ]
    },
    {
      "type": "payment_icon",
      "name": "Payment Icon",
      "settings": [
        {
          "type": "image_picker",
          "id": "icon",
          "label": "Payment Icon",
          "info": "Recommended size: 60x40px"
        }
      ]
    },
    {
      "type": "sold_count",
      "name": "Sold Count",
      "limit": 1,
      "settings": [
        {
          "type": "text",
          "id": "sold_count_text",
          "label": "Sold Count Text",
          "default": "30 sold in last 24 hours"
        }
      ]
    },
    {
      "type": "stock_count",
      "name": "Stock Count",
      "limit": 1,
      "settings": [
        {
          "type": "text",
          "id": "stock_count_text",
          "label": "Stock Count Text",
          "default": "Only {count} items left!"
        }
      ]
    },
    {
      "type": "size_guide",
      "name": "Size Guide",
      "limit": 1,
      "settings": [
        {
          "type": "text",
          "id": "size_guide_text",
          "label": "Size Guide Text",
          "default": "Size Guide"
        },
        {
          "type": "image_picker",
          "id": "size_guide_image",
          "label": "Size Guide Image"
        }
      ]
    },
    {
      "type": "delivery_info",
      "name": "Delivery Info",
      "limit": 1,
      "settings": [
        {
          "type": "text",
          "id": "delivery_time",
          "label": "Delivery Time",
          "default": "3-5 days international"
        },
        {
          "type": "text",
          "id": "free_shipping_text",
          "label": "Free Shipping Text",
          "default": "all orders over $150"
        }
      ]
    },
    {
      "type": "fbt",
      "name": "Frequently Bought",
      "limit": 1,
      "settings": [
        {
          "type": "text",
          "id": "fbt_title",
          "label": "Section Title",
          "default": "Frequently Bought Together"
        },
        {
          "type": "range",
          "id": "max_products",
          "min": 1,
          "max": 5,
          "step": 1,
          "label": "Maximum Products",
          "default": 3
        }
      ]
    },
    {
      "type": "extra_links",
      "name": "Extra Links",
      "limit": 1,
      "settings": [
        {
          "type": "checkbox",
          "id": "show_wishlist",
          "label": "Show Wishlist",
          "default": true
        },
        {
          "type": "checkbox",
          "id": "show_compare",
          "label": "Show Compare",
          "default": true
        },
        {
          "type": "checkbox",
          "id": "show_ask_question",
          "label": "Show Ask Question",
          "default": true
        },
        {
          "type": "checkbox",
          "id": "show_share",
          "label": "Show Share",
          "default": true
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Product",
      "blocks": [
        {
          "type": "rating"
        },
        {
          "type": "trust_and_payment"
        },
        {
          "type": "sold_count"
        },
        {
          "type": "stock_count"
        },
        {
          "type": "size_guide"
        },
        {
          "type": "delivery_info"
        },
        {
          "type": "fbt"
        },
        {
          "type": "extra_links"
        }
      ]
    }
  ]
}
{% endschema %}