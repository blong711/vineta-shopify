{%- comment -%}Compare Page Section{%- endcomment -%}

<section class="flat-spacing-13">
    <div class="container">
        <div class="tf-compare-table" id="compareTable">
            <div id="compareContent">
                <!-- Content will be loaded via JavaScript -->
            </div>
        </div>
    </div>
</section>

<template id="compareTemplate">
    <div class="tf-compare-row tf-compare-grid">
        <div class="tf-compare-col d-md-block d-none"></div>
        {% for product in collections.all.products %}
            <div class="tf-compare-col" data-product-id="{{ product.id }}">
                <div class="tf-compare-item">
                    <a class="tf-compare-image" href="{{ product.url }}">
                        <img class="lazyload" 
                            data-src="{{ product.featured_image | img_url: '400x' }}"
                            src="{{ product.featured_image | img_url: '400x' }}" 
                            alt="{{ product.title | escape }}"
                            width="400"
                            height="400">
                    </a>
                    <div class="content">
                        <a class="tf-compare-title link text-md fw-medium" href="{{ product.url }}">{{ product.title }}</a>
                        <p class="price-wrap fw-medium text-md">
                            <span class="price-new text-primary">{{ product.price | money }}</span>
                            {% if product.compare_at_price > product.price %}
                                <span class="price-old text-dark">{{ product.compare_at_price | money }}</span>
                            {% endif %}
                        </p>
                        <div class="tf-compare-btn">
                            <a href="javascript:void(0);"
                               class="box-icon hover-tooltip tooltip-left add-to-cart"
                               data-variant-id="{{ product.variants[0].id }}"
                               data-quantity="1"
                               aria-label="Add to cart"
                               {% unless product.variants[0].available %}style="pointer-events:none;opacity:0.5;"{% endunless %}>
                                <i class="icon icon-cart"></i>
                                <span class="tooltip">{% if product.variants[0].available %}Add to Cart{% else %}Sold Out{% endif %}</span>
                            </a>
                        </div>
                    </div>
                    <div class="tf-compare-remove">
                        <span class="tf-btn-icon line d-inline-flex" data-compare 
                        data-id="{{ product.id }}" 
                        data-action="remove">
                            <i class="icon-close"></i>
                        </span>
                    </div>
                </div>
            </div>
        {% endfor %}
    </div>

    <div class="tf-compare-row">
        <div class="tf-compare-col tf-compare-field d-md-block d-none">
            <p class="text-md fw-medium">Availability</p>
        </div>
        {% for product in collections.all.products %}
            <div class="tf-compare-col tf-compare-field tf-compare-stock {% unless product.variants[0].available %}text-red{% endunless %}" data-product-id="{{ product.id }}">
                <div class="icon">
                    {% if product.variants[0].available %}
                        <i class="icon-fill-check-circle"></i>
                    {% else %}
                        <svg width="15" height="15" viewBox="0 0 15 15" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <g clip-path="url(#clip0_1_34903)">
                                <path d="M7.5 14.4955C11.366 14.4955 14.5 11.3635 14.5 7.50004C14.5 3.63659 11.366 0.504639 7.5 0.504639C3.63401 0.504639 0.5 3.63659 0.5 7.50004C0.5 11.3635 3.63401 14.4955 7.5 14.4955Z" fill="#E21B1B"/>
                                <path d="M5.28008 4.19648L4.19751 5.27905L9.72085 10.8024L10.8034 9.71982L5.28008 4.19648Z" fill="white"/>
                                <path d="M9.72036 4.19602L4.19702 9.71936L5.27959 10.8019L10.8029 5.27859L9.72036 4.19602Z" fill="white"/>
                            </g>
                            <defs>
                                <clipPath id="clip0_1_34903">
                                    <rect width="14" height="14" fill="white" transform="translate(0.5 0.5)"/>
                                </clipPath>
                            </defs>
                        </svg>
                    {% endif %}
                </div>
                <span>{% if product.variants[0].available %}In Stock{% else %}Out of Stock{% endif %}</span>
            </div>
        {% endfor %}
    </div>

    <div class="tf-compare-row">
        <div class="tf-compare-col tf-compare-field d-md-block d-none">
            <p class="text-md fw-medium">Vendor</p>
        </div>
        {% for product in collections.all.products %}
            <div class="tf-compare-col tf-compare-value text-center" data-product-id="{{ product.id }}">
                <p class="text-sm">{{ product.vendor }}</p>
            </div>
        {% endfor %}
    </div>

    <div class="tf-compare-row">
        <div class="tf-compare-col tf-compare-field d-md-block d-none">
            <p class="text-md fw-medium">Color</p>
        </div>
        {% for product in collections.all.products %}
            <div class="tf-compare-col tf-compare-value text-center" data-product-id="{{ product.id }}">
                <p class="text-sm">
                    {%- assign color_values = '' -%}
                    {%- if product.options != blank -%}
                        {%- for option in product.options -%}
                            {%- if option.name contains 'color' or option.name contains 'colour' -%}
                                {%- assign color_values = option.values | join: ', ' -%}
                            {%- endif -%}
                        {%- endfor -%}
                    {%- endif -%}
                    {%- if color_values != blank -%}
                        {{ color_values }}
                    {%- else -%}
                        N/A
                    {%- endif -%}
                </p>
            </div>
        {% endfor %}
    </div>
</template>

<template id="compareProductColTemplate">
  <div class="tf-compare-col" data-product-id="">
    <div class="tf-compare-item">
      <a class="tf-compare-image" href="">
        <img class="lazyload" data-src="" src="" alt="" width="200" height="200">
      </a>
      <div class="content">
        <a class="tf-compare-title link text-md fw-medium" href=""></a>
        <p class="price-wrap fw-medium text-md">
          <span class="price-new text-primary"></span>
          <span class="price-old text-dark" style="display:none"></span>
        </p>
        <div class="tf-compare-btn">
          <button type="button" class="tf-btn animate-btn w-100" data-add-to-cart data-product-id="">
            Add to Cart
          </button>
        </div>
      </div>
      <div class="tf-compare-remove">
        <span class="tf-btn-icon line d-inline-flex" data-compare data-id="" data-action="remove">
          <i class="icon-close"></i>
        </span>
      </div>
    </div>
  </div>
</template>

<script>
async function fetchAllProducts() {
  let allProducts = [];
  let page = 1;
  let hasMore = true;
  while (hasMore) {
    const response = await fetch(`/products.json?limit=250&page=${page}`);
    const data = await response.json();
    allProducts = allProducts.concat(data.products);
    if (data.products.length < 250) {
      hasMore = false;
    } else {
      page++;
    }
  }
  return allProducts;
}

function createRow(label, values, rowClass = '') {
  const row = document.createElement('div');
  row.className = `tf-compare-row ${rowClass}`;
  // Label column
  const labelCol = document.createElement('div');
  labelCol.className = 'tf-compare-col tf-compare-field d-md-block d-none';
  labelCol.innerHTML = `<p class="text-md fw-medium">${label}</p>`;
  row.appendChild(labelCol);
  // Product columns
  values.forEach(html => {
    const col = document.createElement('div');
    col.className = 'tf-compare-col tf-compare-value text-center';
    col.innerHTML = html;
    row.appendChild(col);
  });
  return row;
}

function createSimpleRow(label, values) {
  const row = document.createElement('div');
  row.className = 'tf-compare-row';
  const labelCol = document.createElement('div');
  labelCol.className = 'tf-compare-col tf-compare-field d-md-block d-none';
  labelCol.innerHTML = `<p class="text-md fw-medium">${label}</p>`;
  row.appendChild(labelCol);
  values.forEach(html => {
    row.insertAdjacentHTML('beforeend', html);
  });
  return row;
}

document.addEventListener('DOMContentLoaded', async function() {
  const compareContent = document.getElementById('compareContent');

  async function renderCompareTable() {
    const compareIds = localStorage.getItem('theme4:compare:id') ? localStorage.getItem('theme4:compare:id').split(',') : [];
    if (compareIds.length === 0) {
      compareContent.innerHTML = '<div class="text-center"><p>No products to compare</p></div>';
      return;
    }
    const allProducts = await fetchAllProducts();
    const compareProducts = allProducts.filter(p => compareIds.includes(p.id.toString()));
    if (compareProducts.length === 0) {
      compareContent.innerHTML = '<div class="text-center"><p>No products to compare</p></div>';
      return;
    }
    compareContent.innerHTML = '';

    // 1. Image/Title/Price row
    const imageRowValues = compareProducts.map(product => `
      <div class="tf-compare-item">
        <a class="tf-compare-image" href="/products/${product.handle}">
          <img class="lazyload" src="${product.images[0] ? product.images[0].src : ''}" alt="${product.title}" width="200" height="200">
        </a>
        <div class="content">
          <a class="tf-compare-title link text-md fw-medium" href="/products/${product.handle}">${product.title}</a>
          <p class="price-wrap fw-medium text-md">
            <span class="price-new text-primary">${(window.Shopify && Shopify.formatMoney) ? Shopify.formatMoney(product.variants[0].price, "{{ shop.money_format }}") : product.variants[0].price}</span>
            ${product.variants[0].compare_at_price && product.variants[0].compare_at_price > product.variants[0].price
              ? `<span class="price-old text-dark">${(window.Shopify && Shopify.formatMoney) ? Shopify.formatMoney(product.variants[0].compare_at_price, "{{ shop.money_format }}") : product.variants[0].compare_at_price}</span>`
              : ''}
          </p>
          <div class="tf-compare-btn">
            <a href="#shoppingCart" data-bs-toggle="offcanvas"
               class="tf-btn animate-btn w-100"
               ${!product.variants[0].available ? 'style="pointer-events:none;opacity:0.5;" tabindex="-1" aria-disabled="true"' : ''}>
              ${product.variants[0].available ? 'Add to Cart' : 'Sold Out'}
            </a>
          </div>
        </div>
        <div class="tf-compare-remove">
          <span class="tf-btn-icon line d-inline-flex" data-compare data-id="${product.id}" data-action="remove">
            <i class="icon-close"></i>
          </span>
        </div>
      </div>
    `);
    compareContent.appendChild(createRow('', imageRowValues));

    // 2. Availability row
    const availabilityRowValues = compareProducts.map(product => {
      const available = product.variants[0].available;
      const colClass = `tf-compare-col tf-compare-field tf-compare-stock${!available ? ' text-red' : ''}`;
      return `
        <div class="${colClass}">
          <div class="icon">
            ${available
              ? '<i class="icon-fill-check-circle"></i>'
              : `<svg width="15" height="15" viewBox="0 0 15 15" fill="none"><circle cx="7.5" cy="7.5" r="7" fill="#E21B1B"/><path d="M5 5l5 5M10 5l-5 5" stroke="#fff" stroke-width="2"/></svg>`
            }
          </div>
          <span>${available ? 'In Stock' : 'Out of Stock'}</span>
        </div>
      `;
    });
    compareContent.appendChild(createSimpleRow('Availability', availabilityRowValues));

    // 3. Vendor row
    const vendorRowValues = compareProducts.map(product =>
      `<p class="text-sm">${product.vendor || ''}</p>`
    );
    compareContent.appendChild(createRow('Vendor', vendorRowValues));

    // 4. Color row
    const colorRowValues = compareProducts.map(product => {
      let colorOption = '';
      if (product.options && product.options.length) {
        const colorIdx = product.options.findIndex(opt => /colou?r/i.test(opt.name));
        if (colorIdx !== -1) {
          const colors = product.options[colorIdx].values;
          colorOption = colors.join(', ');
        }
      }
      return `<p class="text-sm">${colorOption || 'N/A'}</p>`;
    });
    compareContent.appendChild(createRow('Color', colorRowValues));
  }

  // Initial render
  renderCompareTable();

  // Remove product on click without reload
  compareContent.addEventListener('click', function(e) {
    const removeBtn = e.target.closest('[data-compare][data-action="remove"]');
    if (removeBtn) {
      const productId = removeBtn.getAttribute('data-id');
      let compareIds = localStorage.getItem('theme4:compare:id') ? localStorage.getItem('theme4:compare:id').split(',') : [];
      compareIds = compareIds.filter(id => id !== productId);
      localStorage.setItem('theme4:compare:id', compareIds.join(','));
      renderCompareTable();
    }
  });
});
</script>

{% schema %}    
{
  "name": "Compare Page",
  "settings": []
}
{% endschema %} 