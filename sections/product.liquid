{%- comment -%}Product Section{%- endcomment -%}
<section class="flat-single-product">
  <div class="tf-main-product section-image-zoom">
    <div class="container">
      <div class="row">
        <!-- Product Images -->
        <div class="col-md-6">
          {%- for block in section.blocks -%}
            {%- if block.type == 'gallery' -%}
              <div class="tf-product-media-wrap sticky-top" {{ block.shopify_attributes }}>
                <div class="thumbs-slider">
                  <div dir="ltr" class="swiper tf-product-media-thumbs other-image-zoom" data-preview="4" data-direction="vertical">
                    <div class="swiper-wrapper stagger-wrap">
                      {%- for image in product.images -%}
                        <div class="swiper-slide stagger-item" data-color="{{ image.alt | default: 'default' }}">
                          <div class="item">
                            <img class="lazyload"
                              data-src="{{ image | image_url: width: 800 }}"
                              src="{{ image | image_url: width: 400 }}"
                              alt="{{ image.alt | default: product.title }}">
                          </div>
                        </div>
                      {%- endfor -%}
                    </div>
                  </div>
                  <div class="flat-wrap-media-product">
                    <div dir="ltr" class="swiper tf-product-media-main" id="gallery-swiper-started">
                      <div class="swiper-wrapper">
                        {%- for image in product.images -%}
                          <div class="swiper-slide" data-color="{{ image.alt | default: 'default' }}">
                            <a href="{{ image | image_url: width: 1200 }}" target="_blank" class="item" data-pswp-width="1200" data-pswp-height="1200">
                              <img class="tf-image-zoom lazyload"
                                data-zoom="{{ image | image_url: width: 1200 }}"
                                data-src="{{ image | image_url: width: 800 }}"
                                src="{{ image | image_url: width: 400 }}"
                                alt="{{ image.alt | default: product.title }}">
                            </a>
                          </div>
                        {%- endfor -%}
                      </div>
                    </div>
                    <div class="swiper-button-next nav-swiper thumbs-next"></div>
                    <div class="swiper-button-prev nav-swiper thumbs-prev"></div>
                  </div>
                </div>
              </div>
            {%- endif -%}
          {%- endfor -%}
        </div>
        <!-- /Product Images -->
        <!-- Product Info -->
        <div class="col-md-6">
          <div class="tf-product-info-wrap position-relative">
            <div class="tf-zoom-main"></div>
            <div class="tf-product-info-list other-image-zoom">
              {%- for block in section.blocks -%}
                {%- case block.type -%}
                  {%- when 'title' -%}
                    <div class="tf-product-info-heading" {{ block.shopify_attributes }}>
                      <h5 class="product-info-name fw-medium">{{ product.title }}</h5>
                      {%- if block.settings.show_rating -%}
                        <div class="product-info-rate">
                          <div class="list-star">
                            {%- for i in (1..5) -%}
                              <i class="icon icon-star{% if i <= product.metafields.reviews.rating %} active{% endif %}"></i>
                            {%- endfor -%}
                          </div>
                          <span class="count-review">({{ product.metafields.reviews.rating_count | default: 0 }} reviews)</span>
                        </div>
                      {%- endif -%}
                      {%- if block.settings.show_price -%}
                        <div class="product-info-price">
                          <div class="display-sm price-new price-on-sale">{{ product.price | money_without_currency }}₫</div>
                          {%- if product.compare_at_price > product.price -%}
                            <div class="display-sm price-old">{{ product.compare_at_price | money_without_currency }}₫</div>
                            <span class="badge-sale">{{ product.compare_at_price | minus: product.price | times: 100.0 | divided_by: product.compare_at_price | round }}% Off</span>
                          {%- endif -%}
                        </div>
                      {%- endif -%}
                      {%- if block.settings.show_sold_count and product.metafields.inventory.sold_count -%}
                        <div class="product-info-sold">
                          <svg class="icon" width="18" height="18" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M15.2759 10.9242C15.2556 10.6149 14.9236 10.4281 14.6488 10.5714C14.4098 10.6961 13.6603 11.0196 13.0698 11.0196C12.6156 11.0196 12.3132 10.8694 12.3132 10.1362C12.3132 8.12636 15.0124 6.52078 12.6056 3.51218C12.3295 3.16719 11.773 3.41746 11.8469 3.85238C11.8484 3.86145 11.9887 4.77182 11.5632 5.27582C11.3635 5.51218 11.061 5.62711 10.6384 5.62711C9.17454 5.62711 9.27646 1.94027 11.1223 0.795793C11.5328 0.541367 11.2702 -0.0948905 10.8012 0.0119845C10.683 0.0387033 7.88684 0.701328 6.39105 3.62798C5.28035 5.80099 5.88191 7.29977 6.32116 8.39418C6.71371 9.3722 6.89283 9.81857 6.01364 10.4273C6.68251 10.6566 5.42618 10.6328 5.42618 10.6328C4.60384 10.6328 3.82489 9.42402 3.59437 8.95879C3.40712 8.57837 2.83721 8.67311 2.78314 9.09372C2.75993 9.27457 2.24057 13.5513 4.51026 16.1312C5.76076 17.5525 7.50054 18.0581 9.40742 17.9948C11.1702 17.9357 12.5768 17.3395 13.5883 16.2228C15.4639 14.152 15.2844 11.0549 15.2759 10.9242Z" fill="#F2721C"/>
                            <path d="M4.44845 10.1357C4.04521 9.74669 3.72761 9.22817 3.59412 8.95877C3.40688 8.57834 2.83696 8.67309 2.78289 9.0937C2.75969 9.27454 2.24032 13.5513 4.51001 16.1312C5.2812 17.0077 6.27795 17.5784 7.48458 17.8379C4.95987 16.3506 4.24181 13.0162 4.44845 10.1357Z" fill="#EA5513"/>
                            <path d="M3.73448 4.51577C3.70506 4.49735 3.66772 4.49735 3.6383 4.51577C2.64745 5.13712 2.64446 6.58633 3.6383 7.20955C3.66723 7.22769 3.70471 7.22825 3.73448 7.20955C4.72533 6.58816 4.72821 5.13898 3.73448 4.51577Z" fill="#F2721C"/>
                            <path d="M4.12025 4.85809C4.01204 4.72502 3.88239 4.60855 3.73448 4.51577C3.70506 4.49735 3.66772 4.49735 3.6383 4.51577C2.64745 5.13712 2.64446 6.58633 3.6383 7.20955C3.66723 7.22769 3.70471 7.22825 3.73448 7.20955C3.88242 7.11677 4.01208 7.00026 4.12029 6.8672C3.64157 6.28237 3.64072 5.44386 4.12025 4.85809Z" fill="#EA5513"/>
                            <path d="M10.8011 0.0119845C10.6829 0.0387033 7.88676 0.701328 6.39096 3.62798C4.90723 6.53083 6.48163 8.24741 6.63386 9.34639L6.63403 9.34629C6.69 9.74974 6.54569 10.0588 6.01356 10.4272C5.69392 10.6486 5.40494 10.6816 5.10034 10.5723V10.5727C5.10034 10.5727 6.17507 11.6058 7.26087 10.8972C8.33686 10.1951 8.02601 9.11809 7.85986 8.63131L7.86025 8.63103C7.46365 7.57951 7.11673 6.19027 8.09319 4.27988C8.67292 3.14557 9.44797 2.35153 10.1868 1.80263C10.426 1.38835 10.7395 1.0331 11.1223 0.795758C11.5326 0.541367 11.2701 -0.0948905 10.8011 0.0119845Z" fill="#EA5513"/>
                          </svg>
                          <span class="text-dark">{{ product.metafields.inventory.sold_count }} sold in last 24 hours</span>
                        </div>
                      {%- endif -%}
                      {%- if block.settings.show_inventory and product.available -%}
                        <div class="product-info-progress-sale">
                          <div class="title-hurry-up">
                            <span class="text-primary fw-medium">HURRY UP!</span> Only <span class="count">{{ product.inventory_quantity }}</span> items left!
                          </div>
                          <div class="progress-sold">
                            <div class="value" style="width: {{ product.inventory_quantity | times: 100.0 | divided_by: product.metafields.inventory.initial_quantity | round }}%;" data-progress="{{ product.inventory_quantity | times: 100.0 | divided_by: product.metafields.inventory.initial_quantity | round }}"></div>
                          </div>
                        </div>
                      {%- endif -%}
                    </div>
                  {%- when 'variants' -%}
                    <div class="tf-product-info-variant" {{ block.shopify_attributes }}>
                      {%- for option in product.options_with_values -%}
                        <div class="variant-picker-item variant-{{ option.name | handle }}">
                          <div class="variant-picker-label">
                            <div>{{ option.name }}:<span class="variant-picker-label-value value-current{{ option.name }}">{{ option.selected_value }}</span></div>
                            {%- if option.name == 'Size' and block.settings.show_size_guide -%}
                              <a href="#sizeGuide" data-bs-toggle="modal" class="size-guide link">Size Guide</a>
                            {%- endif -%}
                          </div>
                          <div class="variant-picker-values">
                            {%- for value in option.values -%}
                              {%- if option.name == 'Color' -%}
                                <div class="hover-tooltip tooltip-bot color-btn{% if value == option.selected_value %} active{% endif %}" data-{{ option.name | handle }}="{{ value | handle }}">
                                  <span class="check-color bg-{{ value | handle }}"></span>
                                  <span class="tooltip">{{ value }}</span>
                                </div>
                              {%- elsif option.name == 'Weight' -%}
                                <span class="weight-btn{% if value == option.selected_value %} active{% endif %}" data-{{ option.name | handle }}="{{ value | handle }}">{{ value }}</span>
                              {%- else -%}
                                <span class="size-btn{% if value == option.selected_value %} active{% endif %}" data-{{ option.name | handle }}="{{ value | handle }}">{{ value }}</span>
                              {%- endif -%}
                            {%- endfor -%}
                          </div>
                        </div>
                      {%- endfor -%}
                    </div>
                  {%- when 'quantity' -%}
                    <div class="tf-product-total-quantity" {{ block.shopify_attributes }}>
                      <div class="group-btn">
                        <div class="wg-quantity">
                          <button class="btn-quantity btn-decrease">-</button>
                          <input class="quantity-product" type="text" name="quantity" value="1" min="1" max="{{ product.inventory_quantity }}">
                          <button class="btn-quantity btn-increase">+</button>
                        </div>
                        <button type="submit" 
                          class="tf-btn hover-primary btn-add-to-cart" 
                          data-add-to-cart 
                          data-variant-id="{{ product.selected_or_first_available_variant.id }}"
                          {% unless product.available %} disabled{% endunless %}>
                          {%- if product.available -%}Add to cart{%- else -%}Sold out{%- endif -%}
                        </button>
                      </div>
                      {%- if block.settings.show_buy_now -%}
                        <form action="/cart/add" method="post">
                          <input type="hidden" name="id" value="{{ product.selected_or_first_available_variant.id }}">
                          <input type="hidden" name="quantity" value="1">
                          <input type="hidden" name="return_to" value="/checkout">
                          <button type="submit" class="tf-btn btn-primary w-100 animate-btn"{% unless product.available %} disabled{% endunless %}>Buy it now</button>
                        </form>
                      {%- endif -%}
                      {%- if block.settings.show_payment_options -%}
                        <a href="/checkout" class="more-choose-payment link">More payment options</a>
                      {%- endif -%}
                    </div>
                  {%- when 'extra_link' -%}
                    <div class="tf-product-info-extra-link" {{ block.shopify_attributes }}>
                      {%- if block.settings.show_wishlist -%}
                        <a href="javascript:void(0);" class="product-extra-icon link btn-add-wishlist" data-wishlist data-id="{{ product.id }}" data-action="add">
                          <i class="icon add icon-heart"></i><span class="add">{{ 'products.product.add_to_wishlist' | t }}</span>
                          <i class="icon added icon-trash"></i><span class="added">{{ 'products.product.remove_from_wishlist' | t }}</span>
                        </a>
                      {%- endif -%}
                      {%- if block.settings.show_compare -%}
                        <a href="#compare" data-bs-toggle="modal" class="product-extra-icon link" data-compare data-id="{{ product.id }}" data-action="add">
                          <i class="icon icon-compare2"></i>{{ 'products.product.compare' | t }}
                        </a>
                      {%- endif -%}
                      {%- if block.settings.show_ask -%}
                        <a href="#askQuestion" data-bs-toggle="modal" class="product-extra-icon link">
                          <i class="icon icon-ask"></i>{{ 'products.product.ask_question' | t }}
                        </a>
                      {%- endif -%}
                      {%- if block.settings.show_share -%}
                        <a href="#shareSocial" data-bs-toggle="modal" class="product-extra-icon link">
                          <i class="icon icon-share"></i>{{ 'products.product.share' | t }}
                        </a>
                      {%- endif -%}
                    </div>
                  {%- when 'trust_seal' -%}
                    <div class="tf-product-info-trust-seal text-center" {{ block.shopify_attributes }}>
                      <p class="text-md text-dark-2 text-seal fw-medium">{{ block.settings.title }}</p>
                      <ul class="list-card">
                        {%- for i in (1..5) -%}
                          {%- assign payment_icon = 'payment_icon_' | append: i -%}
                          {%- assign payment_title = 'payment_title_' | append: i -%}
                          {%- if block.settings[payment_icon] != blank -%}
                            <li class="card-item">
                              <img src="{{ block.settings[payment_icon] | image_url: width: 100 }}" alt="{{ block.settings[payment_title] }}">
                            </li>
                          {%- endif -%}
                        {%- endfor -%}
                      </ul>
                    </div>
                  {%- when 'delivery_info' -%}
                    <div class="tf-product-info-delivery-return" {{ block.shopify_attributes }}>
                      {%- if block.settings.show_delivery_time -%}
                        <div class="product-delivery">
                          <div class="icon icon-car2"></div>
                          <p class="text-md">Estimated delivery time: <span class="fw-medium">{{ block.settings.delivery_time }}</span></p>
                        </div>
                      {%- endif -%}
                      {%- if block.settings.show_shipping_info -%}
                        <div class="product-delivery">
                          <div class="icon icon-shipping3"></div>
                          <p class="text-md">Free shipping on <span class="fw-medium">{{ block.settings.free_shipping_threshold }}</span></p>
                        </div>
                      {%- endif -%}
                    </div>
                {%- endcase -%}
              {%- endfor -%}
            </div>
          </div>
        </div>
        <!-- /Product Info -->
      </div>
    </div>
  </div>
  {%- for block in section.blocks -%}
    {%- if block.type == 'sticky_add_to_cart' -%}
      <div class="tf-sticky-btn-atc" {{ block.shopify_attributes }}>
        <div class="container">
          <div class="tf-height-observer w-100 d-flex align-items-center">
            <div class="tf-sticky-atc-product d-flex align-items-center">
              <div class="tf-sticky-atc-img">
                <img class="lazyload" data-src="{{ product.featured_image | image_url: width: 100 }}" src="{{ product.featured_image | image_url: width: 50 }}" alt="{{ product.title }}">
              </div>
              <div class="tf-sticky-atc-title fw-5 d-xl-block d-none">{{ product.title }}</div>
            </div>
            <div class="tf-sticky-atc-infos">
              <form class="product-form" method="post" action="/cart/add">
                <input type="hidden" name="id" value="{{ product.variants.first.id }}">
                <div class="tf-sticky-atc-variant-price text-center tf-select">
                  <select name="id" class="variant-selector">
                    {%- for variant in product.variants -%}
                      <option value="{{ variant.id }}" data-price="{{ variant.price | money_without_currency }}"{% if variant == product.selected_or_first_available_variant %} selected="selected"{% endif %}>
                        {{ variant.title }} - {{ variant.price | money_without_currency }}₫
                      </option>
                    {%- endfor -%}
                  </select>
                </div>
                <div class="tf-sticky-atc-btns">
                  <div class="tf-product-info-quantity">
                    <div class="wg-quantity">
                      <button type="button" class="btn-quantity minus-btn">-</button>
                      <input class="quantity-product font-4" type="text" name="quantity" value="1" min="1" max="{{ product.inventory_quantity }}">
                      <button type="button" class="btn-quantity plus-btn">+</button>
                    </div>
                  </div>
                  <button type="submit" 
                    class="tf-btn animate-btn d-inline-flex justify-content-center" 
                    data-add-to-cart 
                    data-variant-id="{{ product.selected_or_first_available_variant.id }}"
                    {% unless product.available %} disabled{% endunless %}>
                    {%- if product.available -%}Add to cart{%- else -%}Sold out{%- endif -%}
                  </button>
                </div>
              </form>
            </div>
          </div>
        </div>
      </div>
    {%- endif -%}
  {%- endfor -%}
</section>

{% schema %}
{
  "name": "Product",
  "blocks": [
    {
      "type": "gallery",
      "name": "Product Gallery",
      "limit": 1,
      "settings": []
    },
    {
      "type": "title",
      "name": "Product Title",
      "limit": 1,
      "settings": [
        {
          "type": "checkbox",
          "id": "show_rating",
          "label": "Show rating",
          "default": true
        },
        {
          "type": "checkbox",
          "id": "show_price",
          "label": "Show price",
          "default": true
        },
        {
          "type": "checkbox",
          "id": "show_sold_count",
          "label": "Show sold count",
          "default": true
        },
        {
          "type": "checkbox",
          "id": "show_inventory",
          "label": "Show inventory",
          "default": true
        }
      ]
    },
    {
      "type": "variants",
      "name": "Product Variants",
      "limit": 1,
      "settings": [
        {
          "type": "checkbox",
          "id": "show_size_guide",
          "label": "Show size guide",
          "default": true
        }
      ]
    },
    {
      "type": "quantity",
      "name": "Quantity & Buy Buttons",
      "limit": 1,
      "settings": [
        {
          "type": "checkbox",
          "id": "show_buy_now",
          "label": "Show buy now button",
          "default": true
        },
        {
          "type": "checkbox",
          "id": "show_payment_options",
          "label": "Show payment options link",
          "default": true
        }
      ]
    },
    {
      "type": "extra_link",
      "name": "Extra Links",
      "limit": 1,
      "settings": [
        {
          "type": "checkbox",
          "id": "show_wishlist",
          "label": "Show wishlist button",
          "default": true
        },
        {
          "type": "checkbox",
          "id": "show_compare",
          "label": "Show compare button",
          "default": true
        },
        {
          "type": "checkbox",
          "id": "show_ask",
          "label": "Show ask question button",
          "default": true
        },
        {
          "type": "checkbox",
          "id": "show_share",
          "label": "Show share button",
          "default": true
        }
      ]
    },
    {
      "type": "trust_seal",
      "name": "Trust Seal",
      "limit": 1,
      "settings": [
        {
          "type": "text",
          "id": "title",
          "label": "Title",
          "default": "Guarantee Safe Checkout:"
        },
        {
          "type": "header",
          "content": "Payment Method 1"
        },
        {
          "type": "image_picker",
          "id": "payment_icon_1",
          "label": "Payment icon"
        },
        {
          "type": "text",
          "id": "payment_title_1",
          "label": "Payment title"
        },
        {
          "type": "header",
          "content": "Payment Method 2"
        },
        {
          "type": "image_picker",
          "id": "payment_icon_2",
          "label": "Payment icon"
        },
        {
          "type": "text",
          "id": "payment_title_2",
          "label": "Payment title"
        },
        {
          "type": "header",
          "content": "Payment Method 3"
        },
        {
          "type": "image_picker",
          "id": "payment_icon_3",
          "label": "Payment icon"
        },
        {
          "type": "text",
          "id": "payment_title_3",
          "label": "Payment title"
        },
        {
          "type": "header",
          "content": "Payment Method 4"
        },
        {
          "type": "image_picker",
          "id": "payment_icon_4",
          "label": "Payment icon"
        },
        {
          "type": "text",
          "id": "payment_title_4",
          "label": "Payment title"
        },
        {
          "type": "header",
          "content": "Payment Method 5"
        },
        {
          "type": "image_picker",
          "id": "payment_icon_5",
          "label": "Payment icon"
        },
        {
          "type": "text",
          "id": "payment_title_5",
          "label": "Payment title"
        }
      ]
    },
    {
      "type": "delivery_info",
      "name": "Delivery Information",
      "limit": 1,
      "settings": [
        {
          "type": "checkbox",
          "id": "show_delivery_time",
          "label": "Show delivery time",
          "default": true
        },
        {
          "type": "text",
          "id": "delivery_time",
          "label": "Delivery time text",
          "default": "3-5 days international"
        },
        {
          "type": "checkbox",
          "id": "show_shipping_info",
          "label": "Show shipping info",
          "default": true
        },
        {
          "type": "text",
          "id": "free_shipping_threshold",
          "label": "Free shipping threshold",
          "default": "all orders over $150"
        }
      ]
    },
    {
      "type": "sticky_add_to_cart",
      "name": "Sticky Add to Cart",
      "limit": 1,
      "settings": []
    }
  ],
  "presets": [
    {
      "name": "Product",
      "blocks": [
        {
          "type": "gallery"
        },
        {
          "type": "title"
        },
        {
          "type": "variants"
        },
        {
          "type": "quantity"
        },
        {
          "type": "extra_link"
        },
        {
          "type": "trust_seal"
        },
        {
          "type": "delivery_info"
        },
        {
          "type": "sticky_add_to_cart"
        }
      ]
    }
  ]
}
{% endschema %}

<script>
document.addEventListener('DOMContentLoaded', function() {
  const productSection = document.querySelector('.tf-product-info-wrap');
  if (!productSection) return;

  // Check wishlist state from localStorage
  const checkWishlistState = () => {
    const wishlistBtn = productSection.querySelector('.product-extra-icon[data-wishlist]');
    if (!wishlistBtn) return;

    const productId = wishlistBtn.dataset.id;
    const wishlistKey = 'theme4:wishlist:id';
    
    try {
      // Get wishlist data from localStorage
      const storedWishlist = localStorage.getItem(wishlistKey);
      let wishlistList = [];
      
      // Parse the stored data
      if (storedWishlist) {
        try {
          wishlistList = JSON.parse(storedWishlist);
        } catch (e) {
          wishlistList = storedWishlist.split(',');
        }
      }

      // Check if product is in wishlist
      const isInWishlist = Array.isArray(wishlistList) && wishlistList.includes(productId);

      // Update button state
      if (isInWishlist) {
        wishlistBtn.dataset.action = 'remove';
        wishlistBtn.classList.add('active');
        const addIcon = wishlistBtn.querySelector('.icon.add.icon-heart');
        const addedIcon = wishlistBtn.querySelector('.icon.added.icon-trash');
        const addSpan = wishlistBtn.querySelector('span.add');
        const addedSpan = wishlistBtn.querySelector('span.added');
        
        if (addIcon) addIcon.style.display = 'none';
        if (addedIcon) addedIcon.style.display = 'inline-block';
        if (addSpan) addSpan.style.display = 'none';
        if (addedSpan) addedSpan.style.display = 'inline';
      } else {
        wishlistBtn.dataset.action = 'add';
        wishlistBtn.classList.remove('active');
        const addIcon = wishlistBtn.querySelector('.icon.add.icon-heart');
        const addedIcon = wishlistBtn.querySelector('.icon.added.icon-trash');
        const addSpan = wishlistBtn.querySelector('span.add');
        const addedSpan = wishlistBtn.querySelector('span.added');
        
        if (addIcon) addIcon.style.display = 'inline-block';
        if (addedIcon) addedIcon.style.display = 'none';
        if (addSpan) addSpan.style.display = 'inline';
        if (addedSpan) addedSpan.style.display = 'none';
      }
    } catch (error) {
      console.error('Error checking wishlist state:', error);
    }
  };

  // Add click handler for wishlist button
  const wishlistBtn = productSection.querySelector('.product-extra-icon[data-wishlist]');
  if (wishlistBtn) {
    wishlistBtn.addEventListener('click', function(e) {
      e.preventDefault();
      e.stopPropagation();

      if (this.classList.contains('loading')) return;
      this.classList.add('loading');

      const productId = this.dataset.id;
      const currentAction = this.dataset.action;
      const wishlistKey = 'theme4:wishlist:id';

      // Get current wishlist
      const storedWishlist = localStorage.getItem(wishlistKey);
      let wishlistList = [];
      
      if (storedWishlist) {
        try {
          wishlistList = JSON.parse(storedWishlist);
        } catch (e) {
          wishlistList = storedWishlist.split(',');
        }
      }

      // Update wishlist
      if (currentAction === 'add') {
        if (!wishlistList.includes(productId)) {
          wishlistList.push(productId);
        }
        this.dataset.action = 'remove';
        this.classList.add('active');
      } else {
        wishlistList = wishlistList.filter(id => id !== productId);
        this.dataset.action = 'add';
        this.classList.remove('active');
      }

      // Save to localStorage
      try {
        localStorage.setItem(wishlistKey, JSON.stringify(wishlistList));
        console.log('Wishlist updated:', wishlistList); // Debug log
      } catch (error) {
        console.error('Error saving to localStorage:', error);
      }

      // Update UI
      const addIcon = this.querySelector('.icon.add.icon-heart');
      const addedIcon = this.querySelector('.icon.added.icon-trash');
      const addSpan = this.querySelector('span.add');
      const addedSpan = this.querySelector('span.added');
      
      if (currentAction === 'add') {
        if (addIcon) addIcon.style.display = 'none';
        if (addedIcon) addedIcon.style.display = 'inline-block';
        if (addSpan) addSpan.style.display = 'none';
        if (addedSpan) addedSpan.style.display = 'inline';
      } else {
        if (addIcon) addIcon.style.display = 'inline-block';
        if (addedIcon) addedIcon.style.display = 'none';
        if (addSpan) addSpan.style.display = 'inline';
        if (addedSpan) addedSpan.style.display = 'none';
      }

      // Update header wishlist count
      const headerWishlistCount = document.querySelector('.wishlist-count');
      if (headerWishlistCount) {
        headerWishlistCount.textContent = wishlistList.length;
      }

      // Dispatch events for other components
      document.dispatchEvent(new CustomEvent('theme4:wishlist:update', {
        detail: {
          count: wishlistList.length,
          productId: productId,
          action: currentAction
        }
      }));

      // Remove loading state after a short delay
      setTimeout(() => {
        this.classList.remove('loading');
      }, 300);
    });
  }

  // Add click handler for compare button
  const compareBtn = productSection.querySelector('.product-extra-icon[data-compare]');
  if (compareBtn) {
    compareBtn.addEventListener('click', function(e) {
      e.preventDefault();
      e.stopPropagation();

      if (this.classList.contains('loading')) return;
      this.classList.add('loading');

      const productId = this.dataset.id;
      const currentAction = this.dataset.action;
      const compareKey = 'theme4:compare:id';

      // Get current compare list
      const storedCompare = localStorage.getItem(compareKey);
      let compareList = [];
      
      if (storedCompare) {
        try {
          compareList = JSON.parse(storedCompare);
        } catch (e) {
          compareList = storedCompare.split(',');
        }
      }

      // Update compare list
      if (currentAction === 'add') {
        if (!compareList.includes(productId)) {
          compareList.push(productId);
        }
        this.dataset.action = 'remove';
        this.classList.add('active');

        // Call WishlistCompare's add method with product ID
        if (window.wishlistCompare) {
          window.wishlistCompare.addToCompare(productId);
        }
      } else {
        compareList = compareList.filter(id => id !== productId);
        this.dataset.action = 'add';
        this.classList.remove('active');

        // Call WishlistCompare's remove method with product ID
        if (window.wishlistCompare) {
          window.wishlistCompare.removeFromCompare(productId);
        }
      }

      // Save to localStorage
      try {
        localStorage.setItem(compareKey, JSON.stringify(compareList));
        console.log('Compare list updated:', compareList); // Debug log
      } catch (error) {
        console.error('Error saving to localStorage:', error);
      }

      // Update header compare count
      const headerCompareCount = document.querySelector('.compare-count');
      if (headerCompareCount) {
        headerCompareCount.textContent = compareList.length;
      }

      // Dispatch events for other components
      document.dispatchEvent(new CustomEvent('theme4:compare:update', {
        detail: {
          count: compareList.length,
          productId: productId,
          action: currentAction
        }
      }));

      // Remove loading state after a short delay
      setTimeout(() => {
        this.classList.remove('loading');
      }, 300);
    });
  }

  // Check compare state from localStorage
  const checkCompareState = () => {
    const compareBtn = productSection.querySelector('.product-extra-icon[data-compare]');
    if (!compareBtn) return;

    const productId = compareBtn.dataset.id;
    const compareKey = 'theme4:compare:id';
    const storedCompare = localStorage.getItem(compareKey);
    const compareList = storedCompare ? storedCompare.split(',') : [];

    console.log('Checking compare state:', {
      productId,
      compareList,
      isInCompare: compareList.includes(productId)
    });

    if (compareList.includes(productId)) {
      compareBtn.dataset.action = 'remove';
      compareBtn.classList.add('active');
    } else {
      compareBtn.dataset.action = 'add';
      compareBtn.classList.remove('active');
    }
  };

  // Check states on page load
  checkWishlistState();
  checkCompareState();

  // Listen for wishlist/compare updates
  document.addEventListener('theme4:wishlist:update', checkWishlistState);
  document.addEventListener('theme4:compare:update', checkCompareState);

  // Clear any existing event listeners on add-to-cart buttons
  document.querySelectorAll('.add-to-cart').forEach(button => {
    // Clone the node to remove all event listeners
    const newButton = button.cloneNode(true);
    button.parentNode.replaceChild(newButton, button);
  });

  // Handle add to cart button
  const addToCartBtn = productSection.querySelector('.tf-btn[data-add-to-cart]');
  if (addToCartBtn) {
    addToCartBtn.addEventListener('click', async function(e) {
      e.preventDefault();
      e.stopPropagation(); // Stop event propagation
      
      // Prevent multiple clicks
      if (this.classList.contains('loading')) {
        return;
      }
      
      const variantId = this.dataset.variantId;
      const quantity = parseInt(document.querySelector('.quantity-product')?.value || 1);
      
      try {
        // Show loading state
        this.classList.add('loading');
        
        // Add item to cart exactly once
        if (window.cart) {
          await window.cart.updateQuantity(variantId, quantity, 'add');
          
          // Fetch updated cart data
          const response = await fetch('/cart.js');
          const cartData = await response.json();
          
          // Update cart drawer
          const cartDrawer = document.getElementById('shoppingCart');
          if (cartDrawer) {
            const itemsContainer = cartDrawer.querySelector('.tf-mini-cart-items');
            if (itemsContainer) {
              // Clear existing items
              itemsContainer.innerHTML = '';
              
              // Add all items from cart
              cartData.items.forEach(item => {
                const itemElement = document.createElement('div');
                itemElement.className = 'tf-mini-cart-item';
                itemElement.style.border = 'none';
                itemElement.style.borderBottom = 'none';
                itemElement.innerHTML = `
                  <div class="tf-mini-cart-image">
                    <a href="${item.url}">
                      <img class="lazyload" data-src="${item.image}" src="${item.image}" alt="${item.title}" loading="lazy">
                    </a>
                  </div>
                  <div class="tf-mini-cart-info">
                    <div class="d-flex justify-content-between">
                      <a class="title link text-md fw-medium" href="${item.url}">${item.title}</a>
                      <i class="icon icon-close remove fs-12" data-variant-id="${item.variant_id}" aria-label="Remove item"></i>
                    </div>
                    <div class="d-flex gap-10">
                      <div class="text-xs">${item.variant_title || ''}</div>
                      <a href="#" class="link edit"><i class="icon-pen"></i></a>
                    </div>
                    <div class="tf-mini-cart-item_price">
                      <p class="price-wrap text-sm fw-medium">
                        <span class="new-price text-primary">${(item.final_price / 100).toFixed(2)} ${cartData.currency.symbol}</span>
                      </p>
                    </div>
                    <div class="tf-mini-cart-item_quantity">
                      <div class="wg-quantity small">
                        <span class="btn-quantity btn-decrease" data-variant-id="${item.variant_id}">-</span>
                        <input type="text" class="quantity-product" value="${item.quantity}" min="0" data-variant-id="${item.variant_id}">
                        <span class="btn-quantity btn-increase" data-variant-id="${item.variant_id}">+</span>
                      </div>
                    </div>
                  </div>
                `;
                itemsContainer.appendChild(itemElement);
              });
              
              // Update cart total
              const totalElement = cartDrawer.querySelector('.cart-total-price');
              if (totalElement) {
                totalElement.textContent = `${(cartData.total_price / 100).toFixed(2)} ${cartData.currency.symbol}`;
              }
              
              // Update header cart count
              const headerCount = document.querySelector('.count-box');
              if (headerCount) {
                headerCount.textContent = cartData.item_count;
              }

              // Update shipping threshold progress bar
              const progressBar = cartDrawer.querySelector('.tf-progress-bar .value');
              if (progressBar) {
                const threshold = 100 * 100; // $100 in cents
                const progress = Math.min(100, (cartData.total_price / threshold) * 100);
                progressBar.style.width = `${progress}%`;
                progressBar.setAttribute('data-progress', progress);
              }

              // Update shipping threshold text
              const thresholdText = cartDrawer.querySelector('.tf-mini-cart-threshold .text');
              if (thresholdText) {
                const threshold = 100 * 100; // $100 in cents
                const remaining = Math.max(0, threshold - cartData.total_price) / 100;
                if (cartData.total_price >= threshold) {
                  thresholdText.innerHTML = 'Congratulations! You\'ve unlocked <span class="fw-medium">Free Shipping</span>';
                } else {
                  thresholdText.innerHTML = `Spend <span class="fw-medium">$${remaining.toFixed(2)}</span> more to get <span class="fw-medium">Free Shipping</span>`;
                }
              }
            }
          }
        }
      } catch (error) {
        console.error('Error adding item to cart:', error);
        alert('Failed to add item to cart. Please try again.');
      } finally {
        // Remove loading state
        this.classList.remove('loading');
      }
    });
  }

  // Initialize wishlist and compare buttons state
  if (window.wishlistCompare) {
    window.wishlistCompare.updateButtonsState();
  }

  // Initialize Swiper for product images
  const thumbsSwiper = new Swiper('.tf-product-media-thumbs', {
    direction: 'vertical',
    slidesPerView: 4,
    spaceBetween: 10,
    watchSlidesProgress: true,
    breakpoints: {
      320: {
        direction: 'horizontal',
        slidesPerView: 4,
      },
      768: {
        direction: 'vertical',
        slidesPerView: 4,
      }
    }
  });

  const mainSwiper = new Swiper('.tf-product-media-main', {
    slidesPerView: 1,
    spaceBetween: 10,
    thumbs: {
      swiper: thumbsSwiper
    },
    navigation: {
      nextEl: '.swiper-button-next',
      prevEl: '.swiper-button-prev',
    },
    zoom: {
      maxRatio: 3,
      minRatio: 1
    }
  });

  // Handle variant selection
  const variantPicker = productSection.querySelector('.tf-product-info-variant');
  if (variantPicker) {
    const colorBtns = variantPicker.querySelectorAll('.color-btn');
    const sizeBtns = variantPicker.querySelectorAll('.size-btn');
    const weightBtns = variantPicker.querySelectorAll('.weight-btn');
    const variants = {{ product.variants | json }};

    // Function to find matching variant based on selected options
    function findMatchingVariant() {
      const selectedColor = document.querySelector('.color-btn.active')?.getAttribute('data-color');
      const selectedSize = document.querySelector('.size-btn.active')?.getAttribute('data-size');
      const selectedWeight = document.querySelector('.weight-btn.active')?.getAttribute('data-weight');
      
      const matchingVariant = variants.find(variant => {
        const variantOptions = variant.title.toLowerCase().split(' / ');
        let matchColor = true;
        let matchSize = true;
        let matchWeight = true;

        if (selectedColor) {
          matchColor = variantOptions[0] === selectedColor.toLowerCase();
        }
        if (selectedSize) {
          matchSize = variantOptions[1] === selectedSize.toLowerCase();
        }
        if (selectedWeight) {
          matchWeight = variantOptions[2] === selectedWeight.toLowerCase();
        }

        return matchColor && matchSize && matchWeight;
      });

      return matchingVariant;
    }

    // Function to update variant selection
    function updateVariantSelection(matchingVariant) {
      if (!matchingVariant) return;
      
      // Update Add to Cart button variant ID
      const addToCartBtn = document.querySelector('[data-add-to-cart]');
      if (addToCartBtn) {
        addToCartBtn.dataset.variantId = matchingVariant.id.toString();
      }
      
      // Update Buy it now form variant ID
      const buyNowForm = document.querySelector('form[action="/cart/add"]');
      if (buyNowForm) {
        const variantInput = buyNowForm.querySelector('input[name="id"]');
        const quantityInput = buyNowForm.querySelector('input[name="quantity"]');
        if (variantInput) {
          variantInput.value = matchingVariant.id.toString();
        }
        if (quantityInput) {
          const mainQuantity = document.querySelector('.quantity-product');
          quantityInput.value = mainQuantity ? mainQuantity.value : '1';
        }
      }

      // Update sticky form variant ID
      const stickyForm = document.querySelector('.tf-sticky-btn-atc form');
      if (stickyForm) {
        const stickyVariantInput = stickyForm.querySelector('input[name="id"]');
        if (stickyVariantInput) {
          stickyVariantInput.value = matchingVariant.id.toString();
        }
      }

      // Update price
      const priceElement = document.querySelector('.product-info-price .price-new');
      if (priceElement && typeof matchingVariant.price !== 'undefined') {
        priceElement.innerHTML = `${matchingVariant.price / 100}₫`;
      }
    }

    function handleVariantClick(buttons, optionType) {
      if (!buttons || buttons.length === 0) return;
      
      buttons.forEach(btn => {
        btn.addEventListener('click', function() {
          // Remove active class from all buttons of this type
          buttons.forEach(b => b.classList.remove('active'));
          // Add active class to clicked button
          this.classList.add('active');
          
          // Get the value from the correct data attribute
          const value = this.getAttribute(`data-${optionType.toLowerCase()}`);
          
          const label = document.querySelector(`.value-current${optionType}`);
          if (label) {
            label.textContent = value;
          }
          
          // Find and update matching variant
          const matchingVariant = findMatchingVariant();
          if (matchingVariant) {
            updateVariantSelection(matchingVariant);
          }
        });
      });
    }

    // Initialize variant selection
    handleVariantClick(colorBtns, 'Color');
    handleVariantClick(sizeBtns, 'Size');
    handleVariantClick(weightBtns, 'Weight');
    
    // Initialize variant selection when the page loads
    const initialVariant = findMatchingVariant();
    if (initialVariant) {
      updateVariantSelection(initialVariant);
    }
  }
});
</script>