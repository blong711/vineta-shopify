{%- comment -%}
  Card Product Snippet
  Usage: {% render 'card-product', product: product %}
{%- endcomment -%}

<div class="card-product {% if product.available == false %}out-of-stock{% endif %} {% if product.variants.size > 0 %}card-product-size{% endif %}"
  data-product-id="{{ product.id }}"
  data-product-title="{{ product.title | escape }}"
  data-product-url="{{ product.url }}"
  data-product-image="{{ product.featured_image | img_url: '400x' }}"
  data-product-price="{{ product.price | money }}"
  data-product-available="{{ product.available }}"
  data-product-vendor="{{ product.vendor | escape }}"
  data-product-colors="{% for variant in product.variants %}{% if variant.option1 contains 'Color' %}{{ variant.option1 }}{% unless forloop.last %}, {% endunless %}{% endif %}{% endfor %}"
  {% if product.compare_at_price > product.price %}
    data-product-compare-price="{{ product.compare_at_price | money }}"
  {% endif %}>
  <div class="card-product-wrapper">
    <a href="{{ product.url }}" class="product-img">
      <img class="img-product lazyload"
        data-src="{{ product.featured_image | img_url: 'master' }}"
        src="{{ product.featured_image | img_url: 'master' }}"
        alt="{{ product.title | escape }}">
      {%- if product.images[1] != blank -%}
        <img class="img-hover lazyload"
          data-src="{{ product.images[1] | img_url: 'master' }}"
          src="{{ product.images[1] | img_url: 'master' }}"
          alt="{{ product.title | escape }}">
      {%- endif -%}
    </a>
    {%- if product.compare_at_price > product.price -%}
      <div class="on-sale-wrap">
        <span class="on-sale-item">{{ product.compare_at_price | minus: product.price | times: 100.0 | divided_by: product.compare_at_price | round }}% Off</span>
      </div>
    {%- endif -%}
    <ul class="list-product-btn">
      <li>
        <a href="javascript:void(0);" 
           class="box-icon hover-tooltip tooltip-left add-to-cart" 
           data-variant-id="{{ product.variants.first.id }}"
           data-quantity="1"
           aria-label="Add to cart">
          <i class="icon icon-cart"></i>
          <span class="tooltip">Add to Cart</span>
        </a>
      </li>
      <li class="wishlist">
        <a href="javascript:void(0);" 
           class="box-icon hover-tooltip tooltip-left" 
           data-wishlist 
           data-id="{{ product.id }}" 
           data-action="add"
           aria-label="Add to wishlist">
          <span class="icon icon-heart2"></span>
          <span class="tooltip">Add to Wishlist</span>
        </a>
      </li>
      <li>
        <a href="javascript:void(0);" 
           class="box-icon hover-tooltip tooltip-left quickview" 
           data-product-handle="{{ product.handle }}"
           data-product-id="{{ product.id }}"
           data-bs-toggle="modal" 
           data-bs-target="#quickView">
          <span class="icon icon-view"></span>
          <span class="tooltip">Quick View</span>
        </a>
      </li>
      <li class="compare">
        <a href="javascript:void(0);" 
           class="box-icon hover-tooltip tooltip-left" 
           data-compare 
           data-id="{{ product.id }}" 
           data-action="add"
           aria-label="Add to compare">
          <span class="icon icon-compare"></span>
          <span class="tooltip">Add to Compare</span>
        </a>
      </li>
    </ul>
    {%- if product.variants.size > 0 -%}
      <ul class="size-box">
        {%- for variant in product.variants -%}
          {%- if variant.option1 contains 'Size' -%}
            <li class="size-item text-xs text-white">{{ variant.option1 }}</li>
          {%- endif -%}
        {%- endfor -%}
      </ul>
    {%- endif -%}
  </div>
  <div class="card-product-info">
    <a href="{{ product.url }}" class="name-product link fw-medium text-md">{{ product.title }}</a>
    <p class="price-wrap fw-medium">
      {%- if product.compare_at_price > product.price -%}
        <span class="price-new text-primary">{{ product.price | money }}</span>
        <span class="price-old text-dark">{{ product.compare_at_price | money }}</span>
      {%- else -%}
        <span class="price-new">{{ product.price | money }}</span>
      {%- endif -%}
    </p>
    {%- if product.variants.size > 0 -%}
      <ul class="list-color-product">
        {%- for variant in product.variants -%}
          {%- if variant.option1 contains 'Color' -%}
            <li class="list-color-item color-swatch hover-tooltip tooltip-left {% if forloop.first %}active{% endif %} {% if variant.option1 == 'White' %}line{% endif %}">
              <span class="tooltip color-filter">{{ variant.option1 }}</span>
              <span class="swatch-value bg-{{ variant.option1 | handle }}"></span>
              <img class="lazyload" 
                data-src="{{ variant.image | img_url: 'master' }}"
                src="{{ variant.image | img_url: 'master' }}"
                alt="{{ variant.option1 }}">
            </li>
          {%- endif -%}
        {%- endfor -%}
      </ul>
    {%- endif -%}
  </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  // Clear any existing event listeners on add-to-cart buttons
  document.querySelectorAll('.add-to-cart').forEach(button => {
    // Clone the node to remove all event listeners
    const newButton = button.cloneNode(true);
    button.parentNode.replaceChild(newButton, button);
  });
  
  // Re-attach event listeners
  document.querySelectorAll('.add-to-cart').forEach(button => {
    button.addEventListener('click', async function(e) {
      e.preventDefault();
      e.stopPropagation(); // Stop event propagation
      
      // Prevent multiple clicks
      if (this.classList.contains('loading')) {
        return;
      }
      
      const variantId = this.dataset.variantId;
      const quantity = parseInt(this.dataset.quantity || 1);
      
      try {
        // Show loading state
        this.classList.add('loading');
        
        // Add item to cart exactly once
        if (window.cart) {
          console.log(`Adding to cart: variant ${variantId}, quantity ${quantity}`);
          await window.cart.updateQuantity(variantId, quantity, 'add');
          
          // Fetch updated cart data
          const response = await fetch('/cart.js');
          const cartData = await response.json();
          
          // Update cart drawer with all items
          const cartDrawer = document.getElementById('shoppingCart');
          if (cartDrawer) {
            const itemsContainer = cartDrawer.querySelector('.tf-mini-cart-items');
            if (itemsContainer) {
              // Clear existing items
              itemsContainer.innerHTML = '';
              
              // Add all items from cart
              cartData.items.forEach(item => {
                const itemElement = document.createElement('div');
                itemElement.className = 'tf-mini-cart-item';
                itemElement.style.border = 'none';
                itemElement.style.borderBottom = 'none';
                itemElement.innerHTML = `
                  <div class="tf-mini-cart-image">
                    <a href="${item.url}">
                      <img class="lazyload" data-src="${item.image}" src="${item.image}" alt="${item.title}" loading="lazy">
                    </a>
                  </div>
                  <div class="tf-mini-cart-info">
                    <div class="d-flex justify-content-between">
                      <a class="title link text-md fw-medium" href="${item.url}">${item.title}</a>
                      <i class="icon icon-close remove fs-12" data-variant-id="${item.variant_id}" aria-label="Remove item"></i>
                    </div>
                    <div class="d-flex gap-10">
                      <div class="text-xs">${item.variant_title || ''}</div>
                      <a href="#" class="link edit"><i class="icon-pen"></i></a>
                    </div>
                    <div class="tf-mini-cart-item_price">
                      <p class="price-wrap text-sm fw-medium">
                        <span class="new-price text-primary">${(item.final_price / 100).toFixed(2)} ${cartData.currency.symbol}</span>
                      </p>
                    </div>
                    <div class="tf-mini-cart-item_quantity">
                      <div class="wg-quantity small">
                        <span class="btn-quantity btn-decrease" data-variant-id="${item.variant_id}">-</span>
                        <input type="text" class="quantity-product" value="${item.quantity}" min="0" data-variant-id="${item.variant_id}">
                        <span class="btn-quantity btn-increase" data-variant-id="${item.variant_id}">+</span>
                      </div>
                    </div>
                  </div>
                `;
                itemsContainer.appendChild(itemElement);
              });
              
              // Update cart total
              const totalElement = cartDrawer.querySelector('.cart-total-price');
              if (totalElement) {
                totalElement.textContent = `${(cartData.total_price / 100).toFixed(2)} ${cartData.currency.symbol}`;
              }
              
              // Update header cart count
              const headerCount = document.querySelector('.count-box');
              if (headerCount) {
                headerCount.textContent = cartData.item_count;
              }

              // Update shipping threshold progress bar
              const progressBar = cartDrawer.querySelector('.tf-progress-bar .value');
              if (progressBar) {
                const threshold = 100 * 100; // $100 in cents
                const progress = Math.min(100, (cartData.total_price / threshold) * 100);
                progressBar.style.width = `${progress}%`;
                progressBar.setAttribute('data-progress', progress);
              }

              // Update shipping threshold text
              const thresholdText = cartDrawer.querySelector('.tf-mini-cart-threshold .text');
              if (thresholdText) {
                const threshold = 100 * 100; // $100 in cents
                const remaining = Math.max(0, threshold - cartData.total_price) / 100;
                if (cartData.total_price >= threshold) {
                  thresholdText.innerHTML = 'Congratulations! You\'ve unlocked <span class="fw-medium">Free Shipping</span>';
                } else {
                  thresholdText.innerHTML = `Spend <span class="fw-medium">$${remaining.toFixed(2)}</span> more to get <span class="fw-medium">Free Shipping</span>`;
                }
              }
            }
          }
        }
      } catch (error) {
        console.error('Error adding item to cart:', error);
        alert('Failed to add item to cart. Please try again.');
      } finally {
        // Remove loading state
        this.classList.remove('loading');
      }
    }, { once: false }); // Use once:false but with other protections
  });

  // Handle quickview clicks
  document.querySelectorAll('.quickview').forEach(button => {
    button.addEventListener('click', async function(e) {
      e.preventDefault();
      const productHandle = this.dataset.productHandle;
      const productId = this.dataset.productId;
      
      try {
        // Fetch product data
        const response = await fetch(`/products/${productHandle}.js`);
        const product = await response.json();
        
        // Update modal with product data
        const modal = document.getElementById('quickView');
        if (modal) {
          // Update product title
          modal.querySelector('.product-info-name').textContent = product.title;
          
          // Update price
          const priceContainer = modal.querySelector('.product-info-price');
          if (product.compare_at_price > product.price) {
            priceContainer.innerHTML = `
              <h6 class="price-new price-on-sale">${formatMoney(product.price)}</h6>
              <h6 class="price-old">${formatMoney(product.compare_at_price)}</h6>
            `;
          } else {
            priceContainer.innerHTML = `
              <h6 class="price-new">${formatMoney(product.price)}</h6>
            `;
          }
          
          // Update description
          modal.querySelector('.text').textContent = product.description.replace(/<[^>]*>/g, '').split(' ').slice(0, 30).join(' ') + '...';
          
          // Update media gallery
          const swiperWrapper = modal.querySelector('.swiper-wrapper');
          swiperWrapper.innerHTML = product.media.map(media => `
            <div class="swiper-slide" data-media-id="${media.id}">
              <div class="item">
                ${media.media_type === 'image' 
                  ? `<img class="lazyload" data-src="${media.src}" src="${media.src}" alt="${media.alt || product.title}">`
                  : `<video controls class="w-100"><source src="${media.sources[0].url}" type="video/mp4"></video>`
                }
              </div>
            </div>
          `).join('');
          
          // Update variant options
          const variantContainer = modal.querySelector('.tf-product-info-variant');
          if (product.variants.length > 1) {
            variantContainer.innerHTML = product.options.map(option => `
              <div class="variant-picker-item variant-${option.name.toLowerCase()}">
                <div class="variant-picker-label">
                  ${option.name}:<span class="variant-picker-label-value value-current${option.name.toLowerCase()}">${option.values[0]}</span>
                </div>
                <div class="variant-picker-values">
                  ${option.values.map(value => `
                    ${option.name.toLowerCase() === 'color' || option.name.toLowerCase() === 'colour'
                      ? `<div class="hover-tooltip color-btn" data-option-name="${option.name}" data-option-value="${value}">
                          <span class="check-color bg-${value.toLowerCase()}"></span>
                          <span class="tooltip">${value}</span>
                        </div>`
                      : `<span class="size-btn" data-option-name="${option.name}" data-option-value="${value}">${value}</span>`
                    }
                  `).join('')}
                </div>
              </div>
            `).join('');
          } else {
            variantContainer.innerHTML = '';
          }
          
          // Update product links
          modal.querySelectorAll('a[href]').forEach(link => {
            if (link.href.includes('/products/')) {
              link.href = product.url;
            }
          });
          
          // Update product ID on buttons
          modal.querySelector('.add-to-cart-btn').dataset.productId = product.id;
          modal.querySelector('.buy-now-btn').dataset.productId = product.id;
          
          // Initialize swiper
          if (window.swiper) {
            window.swiper.destroy();
          }
          window.swiper = new Swiper('.tf-single-slide', {
            slidesPerView: 1,
            spaceBetween: 0,
            loop: true,
            navigation: {
              nextEl: '.single-slide-next',
              prevEl: '.single-slide-prev',
            }
          });
        }
      } catch (error) {
        console.error('Error loading product data:', error);
      }
    });
  });

  // Initialize wishlist and compare buttons state
  if (window.wishlistCompare) {
    window.wishlistCompare.updateButtonsState();
  }
});

// Helper function to format money
function formatMoney(cents) {
  return new Intl.NumberFormat('en-US', {
    style: 'currency',
    currency: '{{ shop.currency }}'
  }).format(cents / 100);
}
</script>

