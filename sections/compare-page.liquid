{%- comment -%}Compare Page Section{%- endcomment -%}

<section class="flat-spacing-13">
    <div class="container">
        <div class="tf-compare-table" id="compareTable">
            <div id="compareContent">
                <!-- Content will be loaded via JavaScript -->
            </div>
        </div>
        
        <!-- Empty state for compare page -->
        <div class="wrapper-compare tf-col-2 lg-col-3 xl-col-4" id="compareEmpty" style="padding-bottom: 80px; display: none;">
            <div class="tf-compare-empty text-center">
                <p class="text-md text-noti" style="margin-bottom: 32px;">{{ 'compare.empty.no_products' | t }}</p>
                <a href="/collections" class="tf-btn animate-btn btn-back-shop">{{ 'compare.empty.back_to_shop' | t }}</a>
            </div>
        </div>
    </div>
</section>

<template id="compareTemplate">
    <div class="tf-compare-row tf-compare-grid">
        <div class="tf-compare-col d-md-block d-none"></div>
        {% for product in collections.all.products %}
            <div class="tf-compare-col" data-product-id="{{ product.id }}">
                <div class="tf-compare-item">
                    <a class="tf-compare-image" style="aspect-ratio: 4/5" href="{{ product.url }}">
                        <img class="lazyload" 
                            data-src="{{ product.featured_image | image_url: width: 400 }}"
                            src="{{ product.featured_image | image_url: width: 400 }}" 
                            alt="{{ product.title | escape }}"
                            width="400"
                            height="400">
                    </a>
                    <div class="content">
                        <a class="tf-compare-title link text-md fw-medium" href="{{ product.url }}">{{ product.title }}</a>
                        <p class="price-wrap fw-medium text-md">
                            <span class="price-new text-primary">${{ product.price | money }}</span>
                            {% if product.compare_at_price > product.price %}
                                <span class="price-old text-dark">{{ product.compare_at_price | money }}</span>
                            {% endif %}
                        </p>
                        <div class="tf-compare-btn">
                            <a href="#"
                               class="box-icon hover-tooltip tooltip-left add-to-cart"
                               data-variant-id="{{ product.variants[0].id }}"
                               data-quantity="1"
                               aria-label="Add to cart"
                               {% unless product.variants[0].available %}style="pointer-events:none;opacity:0.5;"{% endunless %}>
                                <i class="icon icon-cart"></i>
                                <span class="tooltip">{% if product.variants[0].available %}{{ 'products.product.add_to_cart' | t }}{% else %}{{ 'products.product.sold_out' | t }}{% endif %}</span>
                            </a>
                        </div>
                    </div>
                    <div class="tf-compare-remove">
                        <span class="tf-btn-icon line d-inline-flex" data-compare 
                        data-id="{{ product.id }}" 
                        data-action="remove">
                            <i class="icon-close"></i>
                        </span>
                    </div>
                </div>
            </div>
        {% endfor %}
    </div>

    <div class="tf-compare-row">
        <div class="tf-compare-col tf-compare-field d-md-block d-none">
            <p class="text-md fw-medium">{{ 'compare.fields.availability' | t }}</p>
        </div>
        {% for product in collections.all.products %}
            <div style="font-size: 14px;" class="tf-compare-col tf-compare-field tf-compare-stock {% unless product.variants[0].available %}text-red{% endunless %}" data-product-id="{{ product.id }}">
                <div class="icon">
                    {% if product.variants[0].available %}
                        <i class="icon-fill-check-circle"></i>
                    {% else %}
                        <svg width="15" height="15" viewBox="0 0 15 15" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <g clip-path="url(#clip0_1_34903)">
                                <path d="M7.5 14.4955C11.366 14.4955 14.5 11.3635 14.5 7.50004C14.5 3.63659 11.366 0.504639 7.5 0.504639C3.63401 0.504639 0.5 3.63659 0.5 7.50004C0.5 11.3635 3.63401 14.4955 7.5 14.4955Z" fill="#E21B1B"/>
                                <path d="M5.28008 4.19648L4.19751 5.27905L9.72085 10.8024L10.8034 9.71982L5.28008 4.19648Z" fill="white"/>
                                <path d="M9.72036 4.19602L4.19702 9.71936L5.27959 10.8019L10.8029 5.27859L9.72036 4.19602Z" fill="white"/>
                            </g>
                            <defs>
                                <clipPath id="clip0_1_34903">
                                    <rect width="14" height="14" fill="white" transform="translate(0.5 0.5)"/>
                                </clipPath>
                            </defs>
                        </svg>
                    {% endif %}
                </div>
                <span>{% if product.variants[0].available %}{{ 'products.facets.in_stock' | t }}{% else %}{{ 'products.facets.out_of_stock' | t }}{% endif %}</span>
            </div>
        {% endfor %}
    </div>

    <div class="tf-compare-row">
        <div class="tf-compare-col tf-compare-field d-md-block d-none">
            <p class="text-md fw-medium">{{ 'compare.fields.vendor' | t }}</p>
        </div>
        {% for product in collections.all.products %}
            <div class="tf-compare-col tf-compare-field tf-compare-stock" data-product-id="{{ product.id }}">
                <p class="text-sm">{{ product.vendor }}</p>
            </div>
        {% endfor %}
    </div>

    <div class="tf-compare-row">
        <div class="tf-compare-col tf-compare-field d-md-block d-none">
            <p class="text-md fw-medium">{{ 'compare.fields.color' | t }}</p>
        </div>
        {% for product in collections.all.products %}
            <div class="tf-compare-col tf-compare-field tf-compare-stock" data-product-id="{{ product.id }}">
                <p class="text-sm">
                    {%- assign color_values = '' -%}
                    {%- if product.options != blank -%}
                        {%- for option in product.options -%}
                            {%- if option.name contains 'color' or option.name contains 'colour' -%}
                                {%- assign color_values = option.values | join: ', ' -%}
                            {%- endif -%}
                        {%- endfor -%}
                    {%- endif -%}
                    {%- if color_values != blank -%}
                        {{ color_values }}
                    {%- else -%}
                        {{ 'compare.fields.na' | t }}
                    {%- endif -%}
                </p>
            </div>
        {% endfor %}
    </div>
</template>

<template id="compareProductColTemplate">
  <div class="tf-compare-col" data-product-id="">
    <div class="tf-compare-item">
      <a class="tf-compare-image" style="aspect-ratio: 4/5;" href="">
        <img class="lazyload" data-src="" src="" alt="" width="200" height="200">
      </a>
      <div class="content">
        <a class="tf-compare-title link text-md fw-medium" href=""></a>
        <p class="price-wrap fw-medium text-md">
          <span class="price-new text-primary">$${(window.Shopify && Shopify.formatMoney) ? Shopify.formatMoney(product.variants[0].price, "{{ shop.money_format }}") : product.variants[0].price}</span>
          <span class="price-old text-dark" style="display:none"></span>
        </p>
        <div class="tf-compare-btn">
          <button type="button" class="tf-btn animate-btn w-100" data-add-to-cart data-product-id="">
            {{ 'products.product.add_to_cart' | t }}
          </button>
        </div>
      </div>
      <div class="tf-compare-remove">
        <span class="tf-btn-icon line d-inline-flex" data-compare data-id="" data-action="remove">
          <i class="icon-close"></i>
        </span>
      </div>
    </div>
  </div>
</template>

<script>
function createRow(label, values, rowClass = '') {
  const row = document.createElement('div');
  row.className = `tf-compare-row ${rowClass}`;
  // Label column
  const labelCol = document.createElement('div');
  labelCol.className = 'tf-compare-col tf-compare-field d-md-block d-none';
  labelCol.innerHTML = `<p class="text-md fw-medium">${label}</p>`;
  row.appendChild(labelCol);
  // Product columns
  values.forEach(html => {
    if (label === 'Vendor') {
      row.insertAdjacentHTML('beforeend', html);
    } else {
      const col = document.createElement('div');
      col.className = 'tf-compare-col';
      col.innerHTML = html;
      row.appendChild(col);
    }
  });
  return row;
}

function createSimpleRow(label, values) {
  const row = document.createElement('div');
  row.className = 'tf-compare-row';
  const labelCol = document.createElement('div');
  labelCol.className = 'tf-compare-col tf-compare-field d-md-block d-none';
  labelCol.innerHTML = `<p class="text-md fw-medium">${label}</p>`;
  row.appendChild(labelCol);
  values.forEach(html => {
    row.insertAdjacentHTML('beforeend', html);
  });
  return row;
}

// Function to remove product from compare
async function removeProductFromCompare(productId) {
  try {
    const compareData = localStorage.getItem('theme4:compare:id');
    if (compareData) {
      const parsed = JSON.parse(compareData);
      if (Array.isArray(parsed)) {
        // Remove the product with matching ID (convert to string for comparison)
        const updatedProducts = parsed.filter(product => product.id.toString() !== productId.toString());
        localStorage.setItem('theme4:compare:id', JSON.stringify(updatedProducts));
        
        // Re-render the table immediately
        await renderCompareTable();
        
        // Show success message or animation if needed
        console.log(`Product ${productId} removed from compare`);
      }
    }
  } catch (e) {
    console.error('Error updating compare data:', e);
  }
}

// Function to render compare table
async function renderCompareTable() {
  const compareContent = document.getElementById('compareContent');
  const compareTable = document.getElementById('compareTable');
  const compareEmpty = document.getElementById('compareEmpty');

  // Parse the JSON array from localStorage
  let compareProducts = [];
  try {
    const compareData = localStorage.getItem('theme4:compare:id');
    if (compareData) {
      const parsed = JSON.parse(compareData);
      // Handle the array format: [{"id":..., "title":..., "url":..., "image":..., "price":..., "comparePrice":...}]
      if (Array.isArray(parsed)) {
        compareProducts = parsed;
      }
    }
  } catch (e) {
    console.error('Error parsing compare data:', e);
    compareProducts = [];
  }

  // Check if we have products to compare
  if (compareProducts.length === 0) {
    compareContent.innerHTML = '';
    compareTable.style.display = 'none';
    compareEmpty.style.display = 'block';
    return;
  }

  // Clear content and show table
  compareContent.innerHTML = '';
  compareTable.style.display = 'block';
  compareEmpty.style.display = 'none';

  // 1. Image/Title/Price row - Fetch variant IDs for each product
  const imageRowValues = await Promise.all(compareProducts.map(async (product) => {
    let variantId = product.id; // fallback to product ID
    
    try {
      // Extract product handle from URL
      const urlParts = product.url.split('/');
      const productHandle = urlParts[urlParts.length - 1];
      
      if (productHandle) {
        // Fetch product data to get the first variant ID
        const response = await fetch(`/products/${productHandle}.js`);
        if (response.ok) {
          const productData = await response.json();
          if (productData.variants && productData.variants.length > 0) {
            variantId = productData.variants[0].id;
          }
        }
      }
    } catch (error) {
      console.warn('Failed to fetch variant ID for product:', product.id, error);
    }
    
    return `
      <div class="tf-compare-item">
        <a class="tf-compare-image" style="aspect-ratio: 4/5" href="${product.url}">
          <img class="lazyload" src="${product.image}" alt="${product.title}" width="200" height="200">
        </a>
        <div class="content">
          <a class="tf-compare-title link text-md fw-medium" href="${product.url}">${product.title}</a>
          <p class="price-wrap fw-medium text-md">
            <span class="price-new text-primary">${product.price}</span>
            ${product.comparePrice && product.comparePrice !== '' ? `<span class="price-old text-dark">${product.comparePrice}</span>` : ''}
          </p>
          <div class="tf-compare-btn">
            <a href="#"
               class="tf-btn animate-btn w-100 add-to-cart"
               data-variant-id="${variantId}"
               data-quantity="1"
               aria-label="Add to cart">
              Add to Cart
            </a>
          </div>
        </div>
        <div class="tf-compare-remove">
          <span class="tf-btn-icon line d-inline-flex" data-compare data-id="${product.id}" data-action="remove">
            <i class="icon-close"></i>
          </span>
        </div>
      </div>
    `;
  }));
  compareContent.appendChild(createRow('', imageRowValues));

  // 2. Availability row - Since we don't have availability in stored data, we'll show "In Stock" as default
  const availabilityRowValues = compareProducts.map(product => {
    return `
      <div style="font-size: 14px;" class="tf-compare-col tf-compare-field tf-compare-stock">
        <div class="icon">
          <i class="icon-fill-check-circle"></i>
        </div>
        <span>In Stock</span>
      </div>
    `;
  });
  compareContent.appendChild(createSimpleRow('Availability', availabilityRowValues));

  // 3. Vendor row - Since we don't have vendor in stored data, we'll show "N/A"
  const vendorRowValues = compareProducts.map(product =>
    `<div class="tf-compare-col tf-compare-field text-center"><p class="text-sm">N/A</p></div>`
  );
  compareContent.appendChild(createRow('Vendor', vendorRowValues));

  // 4. Color row - Since we don't have color in stored data, we'll show "N/A"
  const colorRowValues = compareProducts.map(product =>
    `<div class="tf-compare-col tf-compare-field text-center"><p class="text-sm">N/A</p></div>`
  );
  compareContent.appendChild(createRow('Color', colorRowValues));

  // Re-attach event listeners after re-rendering
  attachCompareEventListeners();
  
  // Initialize cart events for the new add-to-cart buttons
  if (window.ProductCard && typeof window.ProductCard.initializeCartEvents === 'function') {
    window.ProductCard.initializeCartEvents();
  }
}

// Function to attach event listeners
function attachCompareEventListeners() {
  const compareContent = document.getElementById('compareContent');
  
  // Remove event listeners to prevent duplicates
  compareContent.removeEventListener('click', handleCompareClick);
  
  // Add new event listener
  compareContent.addEventListener('click', handleCompareClick);
}

// Event handler for compare actions
async function handleCompareClick(e) {
  const removeBtn = e.target.closest('[data-compare][data-action="remove"]');
  if (removeBtn) {
    e.preventDefault();
    e.stopPropagation();
    
    const productId = removeBtn.getAttribute('data-id');
    if (productId) {
      // Add visual feedback
      removeBtn.style.opacity = '0.5';
      removeBtn.style.pointerEvents = 'none';
      
      // Remove the product
      await removeProductFromCompare(productId);
    }
  }
}

document.addEventListener('DOMContentLoaded', async function() {
  // Initial render
  await renderCompareTable();
  
  // Initialize cart events for the initial render
  if (window.ProductCard && typeof window.ProductCard.initializeCartEvents === 'function') {
    window.ProductCard.initializeCartEvents();
  }
  
  // Listen for storage changes (in case compare is updated from other pages)
  window.addEventListener('storage', async function(e) {
    if (e.key === 'theme4:compare:id') {
      await renderCompareTable();
    }
  });
});
</script>

{% schema %}    
{
  "name": "Compare Page",
  "settings": []
}
{% endschema %} 