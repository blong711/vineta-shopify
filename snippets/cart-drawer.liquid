{%- comment -%} Cart Drawer {%- endcomment -%}
<div class="cart-drawer-container">
  <div class="cart-drawer-backdrop"></div>
  <div class="cart-drawer" id="shoppingCart">
    <div class="cart-drawer-header">
      <h3 class="cart-drawer-title">Shopping Cart</h3>
      <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
    </div>
    <div class="cart-items">
      <!-- Cart items will be dynamically inserted here -->
    </div>
    <div class="cart-total">
      <div class="cart-subtotal">
        <span>Subtotal</span>
        <span class="cart-total-price">$0.00</span>
      </div>
      <div class="cart-buttons">
        <a href="/cart" class="btn btn-outline-primary">View Cart</a>
        <a href="/checkout" class="btn btn-primary">Checkout</a>
      </div>
    </div>
  </div>
</div>

<style>
.cart-drawer-container {
  position: fixed;
  top: 0;
  right: 0;
  width: 400px;
  height: 100vh;
  z-index: 1050;
  pointer-events: none;
}

.cart-drawer-backdrop {
  position: absolute;
  top: 0;
  right: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.5);
  opacity: 0;
  transition: opacity 0.3s ease-in-out;
  pointer-events: auto;
}

.cart-drawer {
  position: absolute;
  top: 0;
  right: 0;
  width: 100%;
  height: 100%;
  background: var(--white);
  transform: translateX(100%);
  transition: transform 0.3s ease-in-out;
  display: flex;
  flex-direction: column;
  pointer-events: auto;
}

.cart-drawer.show {
  transform: translateX(0);
}

.cart-drawer.show + .cart-drawer-backdrop {
  opacity: 1;
}

.cart-drawer-header {
  padding: 1rem;
  border-bottom: 1px solid var(--line);
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.cart-drawer-title {
  margin: 0;
  font-size: 1.25rem;
  font-weight: 600;
}

.cart-items {
  flex: 1;
  overflow-y: auto;
  padding: 1rem;
}

.cart-item {
  display: flex;
  gap: 1rem;
  padding: 1rem 0;
  border-bottom: 1px solid var(--line);
}

.cart-item:last-child {
  border-bottom: none;
}

.cart-item-image {
  width: 80px;
  height: 80px;
}

.cart-item-image img {
  width: 100%;
  height: 100%;
  object-fit: cover;
}

.cart-item-details {
  flex: 1;
}

.cart-item-title {
  font-size: 0.9rem;
  margin-bottom: 0.5rem;
}

.cart-item-price {
  font-weight: 600;
  margin-bottom: 0.5rem;
}

.cart-item-quantity input {
  width: 60px;
  padding: 0.25rem;
  border: 1px solid var(--line);
  border-radius: 4px;
}

.cart-total {
  padding: 1rem;
  border-top: 1px solid var(--line);
}

.cart-subtotal {
  display: flex;
  justify-content: space-between;
  margin-bottom: 1rem;
  font-weight: 600;
}

.cart-buttons {
  display: flex;
  gap: 1rem;
}

.cart-buttons .btn {
  flex: 1;
  text-align: center;
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const cartDrawer = document.getElementById('shoppingCart');
  const backdrop = document.querySelector('.cart-drawer-backdrop');
  
  // Close drawer when clicking backdrop
  backdrop.addEventListener('click', function() {
    cartDrawer.classList.remove('show');
  });

  // Close drawer when clicking close button
  const closeBtn = cartDrawer.querySelector('.btn-close');
  closeBtn.addEventListener('click', function() {
    cartDrawer.classList.remove('show');
  });

  // Handle quantity changes in cart drawer
  const cartItems = cartDrawer.querySelector('.cart-items');
  cartItems.addEventListener('change', function(e) {
    if (e.target.classList.contains('cart-quantity-input')) {
      const variantId = e.target.dataset.variantId;
      const quantity = parseInt(e.target.value);
      if (window.cart) {
        window.cart.updateQuantity(variantId, quantity, 'update');
      }
    }
  });
});
</script> 