{%- comment -%}Quickview Modal Section{%- endcomment -%}

<style>
    .modal-quick-view {
      z-index: 1060 !important;
    }
    .modal-quick-view .modal-dialog {
      z-index: 1060 !important;
    }
    .modal-quick-view .swiper,
    .modal-quick-view .swiper-wrapper,
    .modal-quick-view .swiper-slide {
      height: 100%;
    }
    .modal-quick-view .swiper-slide .item {
      height: 100%;
      position: relative;
    }
    .modal-quick-view .video-container,
    .modal-quick-view .model-container {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
    }
    .modal-quick-view .video-container video,
    .modal-quick-view .model-container model-viewer {
      width: 100%;
      height: 100%;
      object-fit: cover;
    }
    .modal-quick-view .video-image,
    .modal-quick-view .model-image {
      width: 100%;
      height: 100%;
      object-fit: cover;
    }
    </style>
    
    <div class="modal fade modalCentered modal-quick-view" id="quickView">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <span class="icon-close icon-close-popup" data-bs-dismiss="modal"></span>
                <div class="tf-product-media-wrap">
                    <div dir="ltr" class="swiper tf-single-slide">
                        <div class="swiper-wrapper">
                            {%- for media in product.media -%}
                                <div class="swiper-slide" data-media-id="{{ media.id }}">
                                    <div class="item">
                                        {% case media.media_type %}
                                            {% when 'image' %}
                                                <img class="lazyload" 
                                                    data-src="{{ media | image_url }}"
                                                    src="{{ media | image_url: width: 400 }}" 
                                                    width="{{ media.width }}"
                                                    height="{{ media.height }}"
                                                    alt="{{ media.alt | escape }}">
                                            {% when 'video' %}
                                                <div class="wrap-btn-viewer style-video">
                                                    <i class="icon icon-video"></i>
                                                </div>
                                                <img class="lazyload video-image"
                                                    data-src="{{ media.preview_image | image_url }}"
                                                    src="{{ media.preview_image | image_url: width: 400 }}"
                                                    alt="Video thumbnail"
                                                    width="{{ media.preview_image.width }}"
                                                    height="{{ media.preview_image.height }}">
                                                {{ media | video_tag: controls: true, class: 'w-100' }}
                                            {% when 'model' %}
                                                <div class="wrap-btn-viewer">
                                                    <i class="icon icon-btn3d"></i>
                                                </div>
                                                <img class="lazyload model-image"
                                                    data-src="{{ media.preview_image | image_url }}"
                                                    src="{{ media.preview_image | image_url: width: 400 }}"
                                                    alt="3D model thumbnail"
                                                    width="{{ media.preview_image.width }}"
                                                    height="{{ media.preview_image.height }}">
                                                {{ media | model_viewer_tag }}
                                        {% endcase %}
                                    </div>
                                </div>
                            {%- endfor -%}
                        </div>
                        <div class="swiper-button-prev nav-swiper arrow-1 nav-prev-cls single-slide-prev"></div>
                        <div class="swiper-button-next nav-swiper arrow-1 nav-next-cls single-slide-next"></div>
                    </div>
                </div>
                <div class="tf-product-info-wrap">
                    <div class="tf-product-info-inner">
                        <div class="tf-product-info-heading">
                            <h6 class="product-info-name">{{ product.title }}</h6>
                            <div class="product-info-price">
                                {%- if product.compare_at_price > product.price -%}
                                    <h6 class="price-new price-on-sale">{{ product.price | money }}</h6>
                                    <h6 class="price-old">{{ product.compare_at_price | money }}</h6>
                                {%- else -%}
                                    <h6 class="price-new">{{ product.price | money }}</h6>
                                {%- endif -%}
                                {%- if product.compare_at_price > product.price -%}
                                  {%- assign discount_percentage = product.compare_at_price | minus: product.price | times: 100.0 | divided_by: product.compare_at_price | round -%}
                                  <span class="badge-sale">{{ discount_percentage }}% Off</span>
                                {%- endif -%}
                            </div>
                            <p class="text">{{ product.description | strip_html | truncatewords: 30 }}</p>
                        </div>
                        <div class="tf-product-info-variant">
                            {%- unless product.has_only_default_variant -%}
                                <div class="info-variant">
                                    <select class="text-xs" data-variant-id="{{ product.selected_or_first_available_variant.id }}">
                                        {%- for variant in product.variants -%}
                                            <option value="{{ variant.id }}" {% if variant.id == product.selected_or_first_available_variant.id %}selected{% endif %}>
                                                {{ variant.title }}
                                            </option>
                                        {%- endfor -%}
                                    </select>
                                    <i class="icon-pen edit"></i>
                                </div>
                            {%- endunless -%}
                        </div>
                        <div class="tf-product-total-quantity">
                            <div class="group-btn">
                                <div class="wg-quantity">
                                    <button class="btn-quantity btn-minus" data-variant-id="{{ product.selected_or_first_available_variant.id }}">-</button>
                                    <input class="quantity-product font-4" type="text" name="quantity" value="1" min="1" data-variant-id="{{ product.selected_or_first_available_variant.id }}">
                                    <button class="btn-quantity btn-plus" data-variant-id="{{ product.selected_or_first_available_variant.id }}">+</button>
                                </div>
                                <button type="button" class="tf-btn hover-primary add-to-cart" data-product-id="{{ product.id }}" data-variant-id="{{ product.variants.first.id }}">
                                    {{ 'snippets.quickview_modal.add_to_cart' | t }}
                                </button>
                            </div>
                            <button type="button" class="tf-btn w-100 animate-btn buy-now-btn btn-primary" data-product-id="{{ product.id }}">
                                {{ 'snippets.quickview_modal.buy_it_now' | t }}
                            </button>
                            <a href="{{ product.url }}" style="font-size: 14px;" class="more-choose-payment link">{{ 'snippets.quickview_modal.more_payment_options' | t }}</a>
                        </div>
                        <a href="{{ product.url }}" class="view-details link">{{ 'snippets.quickview_modal.view_full_details' | t }} <i class="icon icon-arrow-right"></i></a>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <script>
      window.cartProductVariants = {};
      {% for item in cart.items %}
        window.cartProductVariants["{{ item.handle }}"] = {{ all_products[item.handle].variants | json }};
      {% endfor %}
    </script>
    <script>
    let quickviewSwiper = null;
    document.addEventListener('DOMContentLoaded', function() {
      let selectedVariant = null;
      let currentProduct = null;
      let productCache = new Map(); // Cache for product data
      let isUpdatingVariant = false; // Flag to prevent slideChange interference
      
      // Check if we're on the cart page
      function isCartPage() {
        return window.location.pathname === '/cart';
      }
      
      // Add product row to cart table (similar to gift wrap functionality)
      function addProductToCartTable(cartData, addedItem) {
        if (!isCartPage()) return;

        const cartTableBody = document.querySelector('.table-page-cart tbody');
        if (!cartTableBody) return;

        // Check if item already exists in table
        const existingRow = cartTableBody.querySelector(`[data-variant-id="${addedItem.variant_id}"]`);
        if (existingRow) {
          // Update quantity of existing row
          const quantityInput = existingRow.querySelector('.quantity-product');
          if (quantityInput) {
            const currentQuantity = parseInt(quantityInput.value) || 0;
            const newQuantity = currentQuantity + 1;
            quantityInput.value = newQuantity;
            
            // Update the item's total price
            const itemTotal = existingRow.querySelector('.cart-total');
            if (itemTotal) {
              const linePrice = (addedItem.final_price * newQuantity);
              itemTotal.textContent = formatMoney(linePrice);
            }
          }
          return;
        }

        // Create new row for the added item
        const newRow = document.createElement('tr');
        newRow.className = 'tf-cart-item';
        newRow.setAttribute('data-item-id', addedItem.key);
        newRow.setAttribute('data-variant-id', addedItem.variant_id);
        
        newRow.innerHTML = `
          <td class="tf-cart-item_product">
            <a href="${addedItem.url}" class="img-box">
              <img src="${addedItem.image}" alt="${addedItem.title}" width="150" height="150">
            </a>
            <div class="cart-info">
              <a href="${addedItem.url}" class="name text-md link fw-medium">${addedItem.product_title}</a>
              ${addedItem.variant_title ? `<div class="variants">${addedItem.variant_title}</div>` : ''}
              <div></div>
              <span class="remove-cart link remove" data-item-id="${addedItem.key}" data-variant-id="${addedItem.variant_id}">{{ 'snippets.quickview_modal.remove' | t }}</span>
            </div>
          </td>
          <td class="tf-cart-item_price text-center" data-cart-title="Price">
            <span class="cart-price price-on-sale text-md fw-medium">${formatMoney(addedItem.final_price)}</span>
          </td>
          <td class="tf-cart-item_quantity" data-cart-title="Quantity">
            <div class="wg-quantity">
              <button type="button" class="btn-quantity minus" data-variant-id="${addedItem.variant_id}" data-item-id="${addedItem.key}">-</button>
              <input class="quantity-product" type="text" name="updates[]" value="${addedItem.quantity || 1}" min="0" data-variant-id="${addedItem.variant_id}" data-item-id="${addedItem.key}">
              <button type="button" class="btn-quantity plus" data-variant-id="${addedItem.variant_id}" data-item-id="${addedItem.key}">+</button>
            </div>
          </td>
          <td class="tf-cart-item_total text-center" data-cart-title="Total">
            <div class="cart-total total-price text-md fw-medium">${formatMoney(addedItem.final_line_price)}</div>
          </td>
        `;
        
        // Add the new row to the table
        cartTableBody.appendChild(newRow);
        
        // Re-bind event listeners for the new item
        bindCartItemEventListeners(newRow);
      }

      // Bind event listeners for cart item row
      function bindCartItemEventListeners(itemRow) {
        // Remove button
        const removeButton = itemRow.querySelector('.remove-cart');
        if (removeButton) {
          removeButton.addEventListener('click', async function(e) {
            e.preventDefault();
            const variantId = this.dataset.variantId;
            if (!variantId) return;

            try {
              const response = await fetch('{{ routes.cart_change_url }}.js', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                  'X-Requested-With': 'XMLHttpRequest'
                },
                body: JSON.stringify({
                  id: variantId,
                  quantity: 0
                })
              });

              if (!response.ok) throw new Error('Failed to remove item');

              // Remove the item row from the table
              const itemRow = this.closest('.tf-cart-item');
              if (itemRow) {
                itemRow.remove();
              }

              // Fetch updated cart data
              const cartResponse = await fetch('{{ routes.cart_url }}.js');
              if (!cartResponse.ok) throw new Error('Failed to fetch cart data');
              const cartData = await cartResponse.json();

              // Update cart total and count
              const cartTotal = document.querySelector('.total');
              if (cartTotal) {
                cartTotal.textContent = formatMoney(cartData.total_price);
              }

              // Update cart count
              const cartCountElements = document.querySelectorAll('.cart-count');
              cartCountElements.forEach(element => {
                element.textContent = cartData.item_count;
              });

              // Update shipping progress only if cart still has items
              if (cartData.item_count > 0 && typeof updateShippingProgress === 'function') {
                updateShippingProgress();
              }

              // Check if cart is now empty
              if (cartData.item_count === 0) {
                if (typeof handleEmptyCart === 'function') {
                  handleEmptyCart();
                }
              }
            } catch (error) {
              console.error('Error removing item:', error);
              alert('Failed to remove item. Please try again.');
            }
          });
        }

        // Quantity buttons
        const quantityButtons = itemRow.querySelectorAll('.btn-quantity');
        quantityButtons.forEach(button => {
          button.addEventListener('click', async function() {
            const variantId = this.dataset.variantId;
            const input = this.parentElement.querySelector('.quantity-product');
            const currentValue = parseInt(input.value);
            
            if (!variantId) return;

            try {
              let newQuantity;
              if (this.classList.contains('minus')) {
                newQuantity = currentValue > 1 ? currentValue - 1 : 0;
              } else if (this.classList.contains('plus')) {
                newQuantity = currentValue + 1;
              }

              // Update input value immediately
              input.value = newQuantity;

              // Update cart via API
              const response = await fetch('{{ routes.cart_change_url }}.js', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                  'X-Requested-With': 'XMLHttpRequest'
                },
                body: JSON.stringify({
                  id: variantId,
                  quantity: newQuantity
                })
              });

              if (!response.ok) {
                // Revert input value if API call fails
                input.value = currentValue;
                throw new Error('Failed to update quantity. Product out of stock.');
              }

              const cartData = await response.json();

              // Update the item's total price
              const itemRow = this.closest('.tf-cart-item');
              if (itemRow) {
                const itemTotal = itemRow.querySelector('.cart-total');
                if (itemTotal) {
                  const updatedItem = cartData.items.find(item => item.variant_id == variantId);
                  if (updatedItem) {
                    itemTotal.textContent = formatMoney(updatedItem.final_line_price);
                  }
                }
              }

              // Update cart total
              const cartTotal = document.querySelector('.total');
              if (cartTotal) {
                cartTotal.textContent = formatMoney(cartData.total_price);
              }

              // Update cart count
              const cartCountElements = document.querySelectorAll('.cart-count');
              cartCountElements.forEach(element => {
                element.textContent = cartData.item_count;
              });

              // Update shipping progress only if cart still has items
              if (cartData.item_count > 0 && typeof updateShippingProgress === 'function') {
                updateShippingProgress();
              }

              // If quantity is 0, remove the item row
              if (newQuantity === 0) {
                const itemRow = this.closest('.tf-cart-item');
                if (itemRow) {
                  itemRow.remove();
                }

                // Check if cart is now empty
                if (cartData.item_count === 0) {
                  if (typeof handleEmptyCart === 'function') {
                    handleEmptyCart();
                  }
                }
              }
            } catch (error) {
              console.error('Error updating quantity:', error);
              alert('Failed to update quantity. Product out of stock.');
            }
          });
        });

        // Quantity input
        const quantityInput = itemRow.querySelector('.quantity-product');
        if (quantityInput) {
          quantityInput.addEventListener('change', async function() {
            const variantId = this.dataset.variantId;
            if (!variantId) return;
            
            const newValue = parseInt(this.value);
            
            if (isNaN(newValue) || newValue < 1) {
              if (newValue <= 0) {
                const response = await fetch('{{ routes.cart_change_url }}.js', {
                  method: 'POST',
                  headers: {
                    'Content-Type': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest'
                  },
                  body: JSON.stringify({
                    id: variantId,
                    quantity: 0
                  })
                });
                if (!response.ok) {
                  throw new Error('Failed to remove item');
                }
              } else {
                this.value = 1;
                const response = await fetch('{{ routes.cart_change_url }}.js', {
                  method: 'POST',
                  headers: {
                    'Content-Type': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest'
                  },
                  body: JSON.stringify({
                    id: variantId,
                    quantity: 1
                  })
                });
                if (!response.ok) {
                  throw new Error('Failed to update quantity');
                }
              }
            } else {
              const response = await fetch('{{ routes.cart_change_url }}.js', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                  'X-Requested-With': 'XMLHttpRequest'
                },
                body: JSON.stringify({
                  id: variantId,
                  quantity: newValue
                })
              });
              if (!response.ok) {
                throw new Error('Failed to update quantity');
              }
            }

            // Fetch updated cart data and update UI
            const cartResponse = await fetch('{{ routes.cart_url }}.js');
            if (!cartResponse.ok) throw new Error('Failed to fetch cart data');
            const cartData = await cartResponse.json();
            
            // Update cart total
            const cartTotal = document.querySelector('.total');
            if (cartTotal) {
              cartTotal.textContent = formatMoney(cartData.total_price);
            }

            // Update cart count
            const cartCountElements = document.querySelectorAll('.cart-count');
            cartCountElements.forEach(element => {
              element.textContent = cartData.item_count;
            });

            // Update shipping progress only if cart still has items
            if (cartData.item_count > 0 && typeof updateShippingProgress === 'function') {
              updateShippingProgress();
            }

            // Check if cart is now empty
            if (cartData.item_count === 0) {
              if (typeof handleEmptyCart === 'function') {
                handleEmptyCart();
              }
            }
          });
        }
      }
    
      // Function to update product image
      function updateProductImage(imageSrc) {
        const modal = document.getElementById('quickView');
        if (!modal) return;
        
        const swiperWrapper = modal.querySelector('.swiper-wrapper');
        if (swiperWrapper) {
          // Find the slide with this image and make it active
          const slides = swiperWrapper.querySelectorAll('.swiper-slide');
          slides.forEach((slide, index) => {
            const img = slide.querySelector('img');
            if (img && (img.src === imageSrc || img.getAttribute('data-src') === imageSrc)) {
              if (quickviewSwiper) {
                isUpdatingVariant = true; // Set flag to prevent slideChange interference
                quickviewSwiper.slideTo(index);
                // Reset flag after a short delay
                setTimeout(() => {
                  isUpdatingVariant = false;
                }, 100);
              }
            }
          });
        }
      }
    
      // Initialize quickview functionality
      function initQuickview() {
        const quickviewButtons = document.querySelectorAll('.quickview');
    
        // Preload product data for all quickview buttons
        quickviewButtons.forEach(button => {
          const productHandle = button.dataset.productHandle;
          if (productHandle && !productCache.has(productHandle)) {
            preloadProductData(productHandle);
          }
        });
    
        quickviewButtons.forEach(button => {
          button.addEventListener('click', handleQuickviewClick);
        });
      }
      
      // Make initQuickview globally available
      window.initQuickview = initQuickview;
    
      // Preload product data
      async function preloadProductData(productHandle) {
        try {
          const productResponse = await fetch(`/products/${productHandle}.js`);
          if (productResponse.ok) {
            const productData = await productResponse.json();
            // Cache the product data
            productCache.set(productHandle, productData);
          }
        } catch (error) {
          console.error(`Error fetching product data for ${productHandle}:`, error);
        }
      }
    
      // Handle quickview button click
      async function handleQuickviewClick(e) {
        e.preventDefault();
        
        const productHandle = this.dataset.productHandle;
        const productId = this.dataset.productId;
        
        // Show modal immediately
        const modal = document.getElementById('quickView');
        if (!modal) {
          console.error('Quickview modal not found');
          return;
        }
    
        try {
          // Get product data from cache or fetch it
          if (!productCache.has(productHandle)) {
            modal.classList.add('loading');
            await preloadProductData(productHandle);
          }
          
          currentProduct = productCache.get(productHandle);
          if (!currentProduct) {
            throw new Error('Failed to load product data');
          }
    
          // Set initial selected variant
          selectedVariant = currentProduct.variants[0];
          
          // Update modal content
          updateModalContent(modal);
          
          // Initialize variant selection
          initVariantSelection(modal);
          
        } catch (error) {
          console.error('Error loading product data:', error);
        } finally {
          modal.classList.remove('loading');
        }
      }
    
      // Update modal content
      function updateModalContent(modal) {
        // Update product title
        modal.querySelector('.product-info-name').textContent = currentProduct.title;
        
        // Update price
        const priceContainer = modal.querySelector('.product-info-price');
        if (selectedVariant.compare_at_price > selectedVariant.price) {
          const discountPercentage = Math.round(((selectedVariant.compare_at_price - selectedVariant.price) / selectedVariant.compare_at_price) * 100);
          priceContainer.innerHTML = `
            <h6 class="price-new price-on-sale">${formatMoney(selectedVariant.price)}</h6>
            <h6 class="price-old">${formatMoney(selectedVariant.compare_at_price)}</h6>
            <span class="badge-sale">${discountPercentage}% Off</span>
          `;
        } else {
          priceContainer.innerHTML = `
            <h6 class="price-new">${formatMoney(selectedVariant.price)}</h6>
          `;
        }
        
        // Update description
        modal.querySelector('.text').textContent = currentProduct.description.replace(/<[^>]*>/g, '').split(' ').slice(0, 30).join(' ') + '...';
        
        // Update media gallery
        const swiperWrapper = modal.querySelector('.swiper-wrapper');
        swiperWrapper.innerHTML = currentProduct.media.map(media => {
          let mediaHtml = '';
          if (media.media_type === 'image') {
            mediaHtml = `<img class="lazyload" data-src="${media.src}" src="${media.src}" alt="${media.alt || currentProduct.title}">`;
          } else if (media.media_type === 'video') {
            mediaHtml = `
              <div class="wrap-btn-viewer style-video">
                <i class="icon icon-video"></i>
              </div>
              <img class="lazyload video-image" 
                data-src="${media.preview_image.src}" 
                src="${media.preview_image.src}" 
                alt="Video thumbnail">
              <div class="video-container" style="display: none;">
                <video controls>
                  <source src="${media.sources[0].url}" type="video/mp4">
                </video>
              </div>
            `;
          } else if (media.media_type === 'model') {
            mediaHtml = `
              <div class="wrap-btn-viewer">
                <i class="icon icon-btn3d"></i>
              </div>
              <img class="lazyload model-image" 
                data-src="${media.preview_image.src}" 
                src="${media.preview_image.src}" 
                alt="3D model thumbnail">
              <div class="model-container" style="display: none;">
                <model-viewer 
                  src="${media.sources[0].url}"
                  alt="${media.alt || '3D model'}"
                  camera-controls
                  auto-rotate>
                </model-viewer>
              </div>
            `;
          }
          return `
            <div class="swiper-slide" data-media-id="${media.id}">
              <div class="item">
                ${mediaHtml}
              </div>
            </div>
          `;
        }).join('');
        
        // (Re-)initialize Swiper for the quickview modal
        if (quickviewSwiper) {
          quickviewSwiper.destroy(true, true);
        }
        quickviewSwiper = new Swiper('.tf-single-slide', {
          slidesPerView: 1,
          spaceBetween: 0,
          loop: false,
          navigation: {
            nextEl: '.single-slide-next',
            prevEl: '.single-slide-prev',
          }
        });
        quickviewSwiper.on('slideChange', function () {
          // Skip if we're programmatically updating the variant
          if (isUpdatingVariant) return;
          
          const modal = document.getElementById('quickView');
          const activeSlide = modal.querySelector('.swiper-slide.swiper-slide-active');
          if (!activeSlide) return;
          const mediaId = parseInt(activeSlide.getAttribute('data-media-id'));
          // Try to match by id first, then by src
          let matchingVariant = currentProduct.variants.find(v => v.featured_image && v.featured_image.id == mediaId);
          if (!matchingVariant) {
            // Fallback: match by image src
            const activeSlideImg = activeSlide.querySelector('img');
            if (activeSlideImg) {
              const slideSrc = activeSlideImg.getAttribute('src');
              matchingVariant = currentProduct.variants.find(
                v => v.featured_image && v.featured_image.src === slideSrc
              );
              if (matchingVariant) {
                console.log('Found matching variant by src:', matchingVariant);
              }
            }
          }
          if (!matchingVariant) {
            console.log('No matching variant for mediaId:', mediaId);
          }
          if (matchingVariant) {
            selectedVariant = matchingVariant;
            // Update only the color/image option in the variant picker UI
            const variantContainer = modal.querySelector('.tf-product-info-variant');
            if (variantContainer) {
              // Find the color option index
              const colorOptionIndex = currentProduct.options.findIndex(
                o => o.name.toLowerCase() === 'color' || o.name.toLowerCase() === 'colour'
              );
              if (colorOptionIndex !== -1) {
                const colorOption = currentProduct.options[colorOptionIndex];
                const colorValue = matchingVariant[`option${colorOptionIndex + 1}`];
                variantContainer.querySelectorAll(`[data-option-name="${colorOption.name}"]`).forEach(btn => {
                  if (
                    btn.dataset.optionValue &&
                    btn.dataset.optionValue.toLowerCase().trim() === String(colorValue).toLowerCase().trim()
                  ) {
                    btn.classList.add('active');
                    const label = variantContainer.querySelector(`.value-current${colorOption.name.toLowerCase().replace(/\s+/g, '-')}`);
                    if (label) label.textContent = colorValue;
                  } else {
                    btn.classList.remove('active');
                  }
                });
              }
            }
            // Update price and add-to-cart button
            const priceContainer = modal.querySelector('.product-info-price');
            if (priceContainer) {
              if (selectedVariant.compare_at_price > selectedVariant.price) {
                const discountPercentage = Math.round(((selectedVariant.compare_at_price - selectedVariant.price) / selectedVariant.compare_at_price) * 100);
                priceContainer.innerHTML = `
                  <h6 class="price-new price-on-sale">${formatMoney(selectedVariant.price)}</h6>
                  <h6 class="price-old">${formatMoney(selectedVariant.compare_at_price)}</h6>
                  <span class="badge-sale">${discountPercentage}% Off</span>
                `;
              } else {
                priceContainer.innerHTML = `
                  <h6 class="price-new">${formatMoney(selectedVariant.price)}</h6>
                `;
              }
            }
            const addToCartBtn = modal.querySelector('.add-to-cart');
            if (addToCartBtn) {
              addToCartBtn.dataset.variantId = selectedVariant.id;
            }
          }
        });
        
        // Update variant options
        const variantContainer = modal.querySelector('.tf-product-info-variant');
        if (!variantContainer) {
          console.error('Variant container not found');
          return;
        }
    
        if (currentProduct.variants.length > 1) {
          variantContainer.innerHTML = currentProduct.options.map(option => {
            const isCaseType = option.name.toLowerCase() === 'case type';
            return `
            <div class="variant-picker-item variant-${option.name.toLowerCase()}">
              <div class="variant-picker-label">
                <div>
                  ${option.name}:<span class="variant-picker-label-value value-current${option.name.toLowerCase().replace(/\s+/g, '-')}">${selectedVariant ? selectedVariant[`option${currentProduct.options.findIndex(o => o.name === option.name) + 1}`] : option.values[0]}</span>
                </div>
              </div>
              <div class="variant-picker-values">
                ${isCaseType ? '<div class="type-btn-container">' : ''}
                ${option.values.map(value => {
                  const isSelected = selectedVariant ? selectedVariant[`option${currentProduct.options.findIndex(o => o.name === option.name) + 1}`] === value : value === option.values[0];
                  return option.name.toLowerCase() === 'color' || option.name.toLowerCase() === 'colour'
                    ? `<div class="hover-tooltip color-btn${isSelected ? ' active' : ''}" data-option-name="${option.name}" data-option-value="${value}">
                        <span class="check-color bg-${value.toLowerCase()}"></span>
                        <span class="tooltip">${value}</span>
                      </div>`
                    : option.name.toLowerCase() === 'case type'
                    ? `<div class="hover-tooltip type-btn${isSelected ? ' active' : ''}" data-option-name="${option.name}" data-option-value="${value}">
                          <span class="type-btn-text font-2">${value}</span>
                          <span class="tooltip">${value}</span>
                    </div>`
                    : `<span class="size-btn${isSelected ? ' active' : ''}" data-option-name="${option.name}" data-option-value="${value}">${value}</span>`;
                }).join('')}
                ${isCaseType ? '</div>' : ''}
              </div>
            </div>
          `;
          }).join('');

          // Add click handlers for variant buttons
          variantContainer.querySelectorAll('.color-btn, .type-btn, .size-btn').forEach(button => {
            button.addEventListener('click', function() {
              const optionName = this.dataset.optionName;
              const optionValue = this.dataset.optionValue;
              
              // Remove active class from other buttons in the same option group
              variantContainer.querySelectorAll(`[data-option-name="${optionName}"]`).forEach(btn => {
                btn.classList.remove('active');
              });
              
              // Add active class to clicked button
              this.classList.add('active');
              
              // Update the label value
              const label = variantContainer.querySelector(`.value-current${optionName.toLowerCase().replace(/\s+/g, '-')}`);
              if (label) label.textContent = optionValue;
              
              // Find the matching variant based on all selected options
              const selectedOptions = {};
              variantContainer.querySelectorAll('.active').forEach(activeBtn => {
                selectedOptions[activeBtn.dataset.optionName] = activeBtn.dataset.optionValue;
              });
              
              const matchingVariant = currentProduct.variants.find(variant => {
                return Object.entries(selectedOptions).every(([name, value]) => {
                  const optionIndex = currentProduct.options.findIndex(o => o.name === name);
                  return variant[`option${optionIndex + 1}`] === value;
                });
              });
              
              if (matchingVariant) {
                selectedVariant = matchingVariant;
                
                // Update price
                const priceContainer = modal.querySelector('.product-info-price');
                if (priceContainer) {
                  if (selectedVariant.compare_at_price > selectedVariant.price) {
                    const discountPercentage = Math.round(((selectedVariant.compare_at_price - selectedVariant.price) / selectedVariant.compare_at_price) * 100);
                    priceContainer.innerHTML = `
                      <h6 class="price-new price-on-sale">${formatMoney(selectedVariant.price)}</h6>
                      <h6 class="price-old">${formatMoney(selectedVariant.compare_at_price)}</h6>
                      <span class="badge-sale">${discountPercentage}% Off</span>
                    `;
                  } else {
                    priceContainer.innerHTML = `
                      <h6 class="price-new">${formatMoney(selectedVariant.price)}</h6>
                    `;
                  }
                }
                
                // Update add to cart button
                const addToCartBtn = modal.querySelector('.add-to-cart');
                if (addToCartBtn) {
                  addToCartBtn.dataset.variantId = selectedVariant.id;
                  addToCartBtn.disabled = !selectedVariant.available;
                  addToCartBtn.textContent = selectedVariant.available ? 
                    {{ 'products.product.add_to_cart' | t | json }} : 
                    {{ 'products.product.sold_out' | t | json }};
                }
                
                // Update variant image if it exists
                if (selectedVariant.featured_image) {
                  updateProductImage(selectedVariant.featured_image.src);
                }
              }
            });
          });
        } else {
          variantContainer.innerHTML = '';
        }
    
        // Add-to-cart button logic (like card-product)
        const addToCartBtn = modal.querySelector('.add-to-cart');
        if (addToCartBtn) {
          // Remove previous event listeners by cloning
          const newBtn = addToCartBtn.cloneNode(true);
          addToCartBtn.parentNode.replaceChild(newBtn, addToCartBtn);
          newBtn.addEventListener('click', async function(e) {
            e.preventDefault();
            e.stopPropagation();
            if (this.classList.contains('loading')) return;
            // Use selectedVariant if available, else fallback to data-variant-id
            const variantId = (selectedVariant && selectedVariant.id) || this.dataset.variantId;
            const quantityInput = modal.querySelector('.quantity-product');
            const quantity = parseInt(quantityInput ? quantityInput.value : 1);
    
            try {
              this.classList.add('loading');
              if (window.cart) {
                await window.cart.updateQuantity(variantId, quantity, 'add');
                // Close the modal properly
                const modal = document.getElementById('quickView');
                if (modal) {
                  modal.classList.remove('show');
                  modal.classList.add('modal');
                  modal.removeAttribute('style');
                  modal.removeAttribute('aria-modal');
                  modal.removeAttribute('role');
                  document.body.classList.remove('modal-open');
                  const backdrop = document.querySelector('.modal-backdrop');
                  if (backdrop) {
                    backdrop.remove();
                  }
                }
                // Fetch updated cart data
                const response = await fetch('{{ routes.cart_url }}.js');
                const cartData = await response.json();
                
                // If we're on the cart page, add the item to the cart table
                if (isCartPage()) {
                  // Find the added item in the cart data
                  const addedItem = cartData.items.find(item => item.variant_id === parseInt(variantId));
                  if (addedItem) {
                    addProductToCartTable(cartData, addedItem);
                  }
                  
                  // Update cart total
                  const cartTotal = document.querySelector('.total');
                  if (cartTotal) {
                    cartTotal.textContent = formatMoney(cartData.total_price);
                  }
                  
                  // Update cart count
                  const cartCountElements = document.querySelectorAll('.cart-count');
                  cartCountElements.forEach(element => {
                    element.textContent = cartData.item_count;
                  });
                  
                  // Update shipping progress only if cart has items
                  if (cartData.item_count > 0 && typeof updateShippingProgress === 'function') {
                    updateShippingProgress();
                  }

                  // Show cart with items if it was empty
                  if (typeof handleCartWithItems === 'function') {
                    handleCartWithItems();
                  }
                }
                // Update cart drawer with all items
                const cartDrawer = document.getElementById('shoppingCart');
                if (cartDrawer) {
                  const itemsContainer = cartDrawer.querySelector('.tf-mini-cart-items');
                  if (itemsContainer) {
                    itemsContainer.innerHTML = '';
                    cartData.items.forEach(item => {
                      const itemElement = document.createElement('div');
                      itemElement.className = 'tf-mini-cart-item';
                      itemElement.style.border = 'none';
                      itemElement.style.borderBottom = 'none';
                      itemElement.innerHTML = `
                        <div class="tf-mini-cart-image">
                          <a href="${item.url}">
                            <img class="lazyload" data-src="${item.image}" src="${item.image}" alt="${item.title}" loading="lazy">
                          </a>
                        </div>
                        <div class="tf-mini-cart-info">
                          <div class="d-flex justify-content-between">
                            <a class="title link text-md fw-medium" href="${item.url}">${item.title}</a>
                            <i class="icon icon-close remove fs-12" data-variant-id="${item.variant_id}" aria-label="Remove item"></i>
                          </div>
                          <div class="d-flex gap-10">
                            ${currentProduct.variants.length > 1 ? `
                            <div class="info-variant">
                              <select class="text-xs" data-variant-id="${item.variant_id}">
                                ${currentProduct.variants.map(variant => 
                                  `<option value="${variant.id}" ${variant.id === item.variant_id ? 'selected' : ''}>
                                    ${variant.title === 'Default Title' ? '{{ 'snippets.quickview_modal.default' | t }}' : variant.title}
                                  </option>`
                                ).join('')}
                              </select>
                              <i class="icon-pen edit"></i>
                            </div>
                            ` : ''}  
                          </div>
                          <div class="tf-mini-cart-item_price">
                            <p class="price-wrap text-sm fw-medium">
                              <span class="new-price text-primary">${formatMoney(item.final_price)}</span>
                            </p>
                          </div>
                          <div class="tf-mini-cart-item_quantity">
                            <div class="wg-quantity small">
                              <button class="btn-quantity btn-decrease" data-variant-id="${item.variant_id}">-</button>
                              <input type="text" class="quantity-product" value="${item.quantity}" min="0" data-variant-id="${item.variant_id}">
                              <button class="btn-quantity btn-increase" data-variant-id="${item.variant_id}">+</button>
                            </div>
                          </div>
                        </div>
                      `;
                      itemsContainer.appendChild(itemElement);
                    });
                    // Add event listeners for quantity buttons
                    itemsContainer.querySelectorAll('.btn-decrease').forEach(button => {
                      button.addEventListener('click', async function() {
                        const variantId = this.dataset.variantId;
                        const input = this.nextElementSibling;
                        const currentValue = parseInt(input.value);
                        if (currentValue > 1) {
                          await window.cart.updateQuantity(variantId, currentValue - 1, 'update');
                        } else {
                          await window.cart.removeItem(variantId);
                        }
                      });
                    });
                    itemsContainer.querySelectorAll('.btn-increase').forEach(button => {
                      button.addEventListener('click', async function() {
                        const variantId = this.dataset.variantId;
                        const input = this.previousElementSibling;
                        const currentValue = parseInt(input.value);
                        await window.cart.updateQuantity(variantId, currentValue + 1, 'update');
                      });
                    });
                    itemsContainer.querySelectorAll('.quantity-product').forEach(input => {
                      input.addEventListener('change', async function() {
                        const variantId = this.dataset.variantId;
                        const newValue = parseInt(this.value);
                        if (isNaN(newValue) || newValue < 1) {
                          if (newValue <= 0) {
                            await window.cart.removeItem(variantId);
                          } else {
                            this.value = 1;
                            await window.cart.updateQuantity(variantId, 1, 'update');
                          }
                        } else {
                          await window.cart.updateQuantity(variantId, newValue, 'update');
                        }
                      });
                    });
                    // Add event listeners for remove buttons
                    itemsContainer.querySelectorAll('.remove').forEach(button => {
                      button.addEventListener('click', async function() {
                        const variantId = this.dataset.variantId;
                        await window.cart.removeItem(variantId);
                      });
                    });
                    // Update cart total
                    const totalElement = cartDrawer.querySelector('.cart-total-price');
                    if (totalElement) {
                      totalElement.textContent = formatMoney(cartData.total_price);
                    }
                    // Update header cart count
                    if (window.cart && typeof window.cart.updateHeaderCartCount === 'function') {
                      window.cart.updateHeaderCartCount(cartData.item_count);
                    }
                    // Update shipping threshold progress bar
                    const progressBar = cartDrawer.querySelector('.tf-progress-bar .value');
                    if (progressBar) {
                      const threshold = window.theme?.settings?.free_shipping_threshold || 10000; // Default to $100 if not set
                      const progress = Math.min(100, (cartData.total_price / threshold) * 100);
                      progressBar.style.width = `${progress}%`;
                      progressBar.setAttribute('data-progress', progress);
                    }
                    // Update shipping threshold text
                    const thresholdText = cartDrawer.querySelector('.tf-mini-cart-threshold .text');
                    if (thresholdText) {
                      const threshold = window.theme?.settings?.free_shipping_threshold || 10000; // Default to $100 if not set
                      const remaining = Math.max(0, threshold - cartData.total_price) / 100;
                      if (cartData.total_price >= threshold) {
                        thresholdText.innerHTML = window.theme?.settings?.free_shipping_message || 'Congratulations! You\'ve unlocked <span class="fw-medium">Free Shipping</span>';
                      } else {
                        const progressMessage = window.theme?.settings?.progress_message || 'Spend <span class="fw-medium">[amount]</span> more to get <span class="fw-medium">Free Shipping</span>';
                        thresholdText.innerHTML = progressMessage.replace('[amount]', `$${remaining.toFixed(2)}`);
                      }
                    }
                  }
                }
              }
            } catch (error) {
              console.error('Error adding item to cart:', error);
              if (window.cartNotifications) {
                window.cartNotifications.show(error.message || '{{ 'snippets.quickview_modal.add_to_cart_error' | t }}', 'error');
              } else {
                alert('Failed to add item to cart. Please try again.');
              }
            } finally {
              this.classList.remove('loading');
            }
          });
        }
    
        // Buy Now button logic
        const buyNowBtn = modal.querySelector('.buy-now-btn');
        if (buyNowBtn) {
          // Remove previous event listeners by cloning
          const newBuyNowBtn = buyNowBtn.cloneNode(true);
          buyNowBtn.parentNode.replaceChild(newBuyNowBtn, buyNowBtn);
          newBuyNowBtn.addEventListener('click', async function(e) {
            e.preventDefault();
            e.stopPropagation();
            if (this.classList.contains('loading')) return;
            const variantId = (selectedVariant && selectedVariant.id) || this.dataset.variantId;
            const quantityInput = modal.querySelector('.quantity-product');
            const quantity = parseInt(quantityInput ? quantityInput.value : 1);
            try {
              this.classList.add('loading');
              // Optionally clear the cart for a true "Buy It Now" experience
              await fetch('{{ routes.cart_clear_url }}.js', { method: 'POST' });
              // Add the selected variant to the cart
              await fetch('{{ routes.cart_add_url }}.js', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                  'X-Requested-With': 'XMLHttpRequest'
                },
                body: JSON.stringify({ id: variantId, quantity: quantity })
              });
              // Redirect to checkout
              window.location.href = '/checkout';
            } catch (error) {
              console.error('Error with Buy It Now:', error);
              if (window.cartNotifications) {
                window.cartNotifications.show(error.message || '{{ 'snippets.quickview_modal.buy_now_error' | t }}', 'error');
              } else {
                alert('Failed to process Buy It Now. Please try again.');
              }
            } finally {
              this.classList.remove('loading');
            }
          });
        }
    
        // More payment options link logic
        const morePaymentBtn = modal.querySelector('.more-choose-payment');
        if (morePaymentBtn) {
          // Remove previous event listeners by cloning
          const newMorePaymentBtn = morePaymentBtn.cloneNode(true);
          morePaymentBtn.parentNode.replaceChild(newMorePaymentBtn, morePaymentBtn);
          newMorePaymentBtn.addEventListener('click', function(e) {
            e.preventDefault();
            window.location.href = '/checkout';
          });
        }
    
        // Update 'View full details' link to product detail page
        const viewDetailsBtn = modal.querySelector('.view-details');
        if (viewDetailsBtn && currentProduct && currentProduct.url) {
          viewDetailsBtn.setAttribute('href', currentProduct.url);
        }
      }
    
      // Initialize variant selection
      function initVariantSelection(modal) {
        try {
          const variantContainer = modal.querySelector('.tf-product-info-variant');
          if (!variantContainer) {
            console.warn('Variant container not found in quickview modal');
            return;
          }
          
          // Handle select element changes
          const variantSelect = modal.querySelector('select[data-variant-id]');
          if (variantSelect) {
            variantSelect.addEventListener('change', async (e) => {
              try {
                if (!e.target.value) {
                  console.warn('No variant selected in quickview modal');
                  return;
                }

                const oldVariantId = variantSelect.dataset.variantId;
                const newVariantId = e.target.value;
                
                // Update the data-variant-id attribute on the select
                variantSelect.dataset.variantId = newVariantId;
                
                // Update all elements with data-variant-id in this modal
                modal.querySelectorAll('[data-variant-id]').forEach(el => {
                  if (el) el.dataset.variantId = newVariantId;
                });

                // Update add to cart button
                const addToCartBtn = modal.querySelector('.add-to-cart');
                if (addToCartBtn) {
                  addToCartBtn.dataset.variantId = newVariantId;
                  
                  // Update button state based on variant availability
                  const selectedVariant = currentProduct.variants.find(v => v.id === parseInt(newVariantId));
                  if (selectedVariant) {
                    addToCartBtn.disabled = !selectedVariant.available;
                    addToCartBtn.textContent = selectedVariant.available ? 
                      {{ 'products.product.add_to_cart' | t | json }} : 
                      {{ 'products.product.sold_out' | t | json }};
                  }
                }

                // Update wishlist button if it exists
                const wishlistBtn = modal.querySelector('[data-wishlist]');
                if (wishlistBtn) {
                  wishlistBtn.dataset.id = newVariantId;
                }

                // Update compare button if it exists
                const compareBtn = modal.querySelector('[data-compare]');
                if (compareBtn) {
                  compareBtn.dataset.id = newVariantId;
                }

                // Find the selected variant
                const selectedVariant = currentProduct.variants.find(v => v.id === parseInt(newVariantId));
                if (selectedVariant) {
                  // Update price
                  const priceElement = modal.querySelector('.price-new');
                  const oldPriceElement = modal.querySelector('.price-old');
                  
                  if (priceElement && typeof selectedVariant.price === 'number') {
                    priceElement.textContent = formatMoney(selectedVariant.price);
                  }
                  
                  if (oldPriceElement && typeof selectedVariant.compare_at_price === 'number') {
                    if (selectedVariant.compare_at_price > selectedVariant.price) {
                      oldPriceElement.textContent = formatMoney(selectedVariant.compare_at_price);
                      oldPriceElement.style.display = 'inline';
                    } else {
                      oldPriceElement.style.display = 'none';
                    }
                  }

                  // Update variant image if it exists
                  if (selectedVariant.featured_image) {
                    const modalImage = modal.querySelector('.quickview-image img');
                    if (modalImage) {
                      modalImage.src = selectedVariant.featured_image.src;
                      modalImage.setAttribute('data-src', selectedVariant.featured_image.src);
                    }
                  }
                } else {
                  console.warn('Selected variant not found:', newVariantId);
                }
              } catch (error) {
                console.error('Error updating variant in quickview:', error);
                // Revert to old variant if there's an error
                if (oldVariantId) {
                  e.target.value = oldVariantId;
                }
                alert({{ 'products.product.variant_error' | t | json }});
              }
            });
          }
        } catch (error) {
          console.error('Error initializing variant selection in quickview:', error);
        }
      }
    
      // Initialize everything
      initQuickview();
    
      // Add quantity button handlers
      document.addEventListener('click', function(e) {
        const modal = document.getElementById('quickView');
        if (!modal) return;
    
        if (e.target.classList.contains('btn-plus')) {
          e.preventDefault();
          e.stopPropagation();
          const input = e.target.previousElementSibling;
          const currentValue = parseInt(input.value) || 1;
          input.value = currentValue + 1;
        } else if (e.target.classList.contains('btn-minus')) {
          e.preventDefault();
          e.stopPropagation();
          const input = e.target.nextElementSibling;
          const currentValue = parseInt(input.value) || 1;
          if (currentValue > 1) {
            input.value = currentValue - 1;
          }
        }
      }, true);

      // Handle video and 3D model viewer interaction
      document.addEventListener('click', function(e) {
        if (e.target.classList.contains('icon-video')) {
          const item = e.target.closest('.item');
          if (!item) return;
          
          const videoContainer = item.querySelector('.video-container');
          const videoImage = item.querySelector('.video-image');
          const video = item.querySelector('video');
          
          if (videoContainer && videoImage) {
            videoContainer.style.display = 'block';
            videoImage.style.display = 'none';
          }
          
          if (video) {
            video.play();
          }
          
          const iconButton = e.target.closest('.wrap-btn-viewer');
          if (iconButton) {
            iconButton.style.display = 'none';
          }
          
          // Disable swiper drag when video is playing
          let swiperEl = item.closest('.swiper');
          if (swiperEl && quickviewSwiper) {
            quickviewSwiper.allowTouchMove = false;
          }
        } else if (e.target.classList.contains('icon-btn3d')) {
          const item = e.target.closest('.item');
          if (!item) return;
          
          const modelContainer = item.querySelector('.model-container');
          const modelImage = item.querySelector('.model-image');
          if (modelContainer && modelImage) {
            modelContainer.style.display = 'block';
            modelImage.style.display = 'none';
          }
          
          const iconButton = e.target.closest('.wrap-btn-viewer');
          if (iconButton) {
            iconButton.style.display = 'none';
          }
          
          // Disable swiper drag when 3D is enabled
          let swiperEl = item.closest('.swiper');
          if (swiperEl && quickviewSwiper) {
            quickviewSwiper.allowTouchMove = false;
          }
        }
      });
    });
    
    // Helper function to format money
    function formatMoney(cents) {
      return new Intl.NumberFormat('en-US', {
        style: 'currency',
        currency: '{{ shop.currency }}'
      }).format(cents / 100);
    }
    </script>