{%- comment -%}
  Filter Content Snippet
  Contains the common filter elements used by all filter layouts
{%- endcomment -%}

{%- comment -%} Configuration Options {%- endcomment -%}
{%- assign show_banner = show_banner  -%}
{%- assign banner_title = banner_title  -%}
{%- assign banner_button_text = banner_button_text  -%}
{%- assign banner_button_url = banner_button_url  -%}
{%- assign categories_mode = categories_mode -%}
{%- assign categories_link_list = categories_link_list -%}
{%- assign categories_show_count = categories_show_count -%}
{%- assign show_on_sale = show_on_sale -%}
{%- assign on_sale_title = on_sale_title -%}
{%- assign on_sale_source = on_sale_source -%}
{%- assign on_sale_products = on_sale_products -%}
{%- assign form_id = form_id | default: 'collection-filters-form-sidebar' -%}

{%- comment -%} Debug: Log the variables {%- endcomment -%}
<!-- Debug: show_on_sale={{ show_on_sale }}, on_sale_title={{ on_sale_title }}, on_sale_source={{ on_sale_source }} -->

<form id="{{ form_id }}" method="GET" action="{{ collection.url }}" class="filter-form">
  <!-- Categories -->
{%- if collections_title != blank -%}
  <div class="widget-facet">
    <div class="facet-title text-xl fw-medium" data-bs-target="#collections" role="button" data-bs-toggle="collapse" aria-expanded="true" aria-controls="collections">
      <span>{{ collections_title | default: 'Collections' }}</span>
      <span class="icon icon-arrow-up"></span>
    </div>
    <div id="collections" class="collapse show">
        <ul class="list-categories current-scrollbar collapse-body">
          {%- if categories_mode == 'all' or categories_mode == blank -%}
            {%- assign unique_collections = collections | uniq: 'title' -%}
            {%- for collection in unique_collections -%}
              <li class="cate-item">
                <a class="text-sm link" href="{{ collection.url }}">
                  <span>{{ collection.title }}</span>
                  {%- if categories_show_count -%}
                    <span class="count">({{ collection.products_count }})</span>
                  {%- endif -%}
                </a>
              </li>
            {%- endfor -%}
          {%- elsif categories_mode == 'link_list' and categories_link_list != blank and linklists[categories_link_list] -%}
            {%- assign unique_links = linklists[categories_link_list].links | uniq: 'title' -%}
            {%- for link in unique_links -%}
              <li class="cate-item">
                <a class="text-sm link" href="{{ link.url }}">
                  <span>{{ link.title }}</span>
                  {%- comment -%} Optionally, show count if link.title matches a collection {%- endcomment -%}
                  {%- if categories_show_count -%}
                    {%- assign linked_collection = collections | where: "title", link.title | first -%}
                    {%- if linked_collection -%}
                      <span class="count">({{ linked_collection.products_count }})</span>
                    {%- endif -%}
                  {%- endif -%}
                </a>
              </li>
            {%- endfor -%}
          {%- endif -%}
        </ul>
    </div>
  </div>
  {%- endif -%}

  <!-- Availability -->
  <!-- Note: Counts are updated dynamically via JavaScript to reflect current filtered products -->
  <div class="widget-facet">
    <div class="facet-title text-xl fw-medium" data-bs-target="#availability" role="button" data-bs-toggle="collapse" aria-expanded="true" aria-controls="availability">
      <span>Availability</span>
      <span class="icon icon-arrow-up"></span>
    </div>
    <div id="availability" class="collapse show">
      <ul class="collapse-body filter-group-check current-scrollbar">
        <li class="list-item">
          <input type="checkbox"
            name="filter.v.availability"
            value="1"
            id="Filter-availability-1"
            {% if current_tags contains 'filter.v.availability:1' or request.query_string contains 'filter.v.availability=1' %}checked{% endif %}
            class="filter-checkbox tf-check">
          <label for="Filter-availability-1" class="label">
            <span>In stock</span>
            <span class="count">({{ collection.products | where: "available", true | size }})</span>
          </label>
        </li>
        <li class="list-item">
          <input type="checkbox"
            name="filter.v.availability"
            value="0"
            id="Filter-availability-2"
            {% if current_tags contains 'filter.v.availability:0' or request.query_string contains 'filter.v.availability=0' %}checked{% endif %}
            class="filter-checkbox tf-check">
          <label for="Filter-availability-2" class="label">
            <span>Out of stock</span>
            <span class="count">({{ collection.products | where: "available", false | size }})</span>
          </label>
        </li>
      </ul>
    </div>
  </div>

  <!-- Shopify Search & Discovery Filters -->
  {%- for filter in collection.filters -%}
    {%- if filter.label != 'Availability' -%}
      <div class="widget-facet">
        <div class="facet-title text-xl fw-medium" data-bs-target="#filter-{{ filter.label | handle }}" role="button" data-bs-toggle="collapse" aria-expanded="true" aria-controls="filter-{{ filter.label | handle }}">
          <span>{{ filter.label }}</span>
          <span class="icon icon-arrow-up"></span>
        </div>
        <div id="filter-{{ filter.label | handle }}" class="collapse show">
          {%- case filter.type -%}
            {%- when 'boolean' or 'list' -%}
              <ul class="collapse-body filter-group-check current-scrollbar">
                {%- for filter_value in filter.values -%}
                  <li class="list-item">
                    <input type="checkbox"
                      name="{{ filter_value.param_name }}"
                      value="{{ filter_value.value }}"
                      id="Filter-{{ filter.label | escape }}-{{ forloop.index }}"
                      {% if filter_value.active -%}checked{%- endif %}
                      {% if filter_value.count == 0 and filter_value.active == false -%}disabled{%- endif %}
                      class="filter-checkbox tf-check">
                    <label for="Filter-{{ filter.label | escape }}-{{ forloop.index }}" class="label">
                      <span>{{ filter_value.label }}</span>
                      <span class="count">({{ filter_value.count }})</span>
                    </label>
                  </li>
                {%- endfor -%}
              </ul>
            {%- when 'price_range' -%}
              {%- assign current_min = filter.min_value.value | default: 0 | money_without_currency | round -%}
              {%- assign current_max = filter.max_value.value | default: filter.range_max | money_without_currency | round -%}
              {%- assign range_min = filter.range_min | money_without_currency | round -%}
              {%- assign range_max = filter.range_max | money_without_currency | round -%}
              {%- assign is_price_filtered = false -%}
              {%- if current_min != range_min or current_max != range_max -%}
                {%- assign is_price_filtered = true -%}
              {%- endif -%}
              
              <div class="collapse-body widget-price filter-price">
                <span class="reset-price">Reset</span>
                <div class="price-val-range" id="price-value-range-{{ form_id | replace: 'collection-filters-form-', '' }}" 
                  data-min="{{ current_min }}"
                  data-max="{{ current_max }}"
                  data-range-min="{{ range_min }}"
                  data-range-max="{{ range_max }}"></div>
                <div class="box-value-price">
                  <span class="text-sm">Price:</span>
                  <div class="price-box">
                    <div class="price-val" id="price-min-value-{{ form_id | replace: 'collection-filters-form-', '' }}" data-currency="{{ shop.currency.symbol }}">
                      {{ current_min }}
                    </div>
                    <span>-</span>
                    <div class="price-val" id="price-max-value-{{ form_id | replace: 'collection-filters-form-', '' }}" data-currency="{{ shop.currency.symbol }}">
                      {{ current_max }}
                    </div>
                  </div>
                </div>
                {%- if is_price_filtered -%}
                  <input type="hidden" name="filter.v.price.gte" id="price-min-input" value="{{ current_min }}">
                  <input type="hidden" name="filter.v.price.lte" id="price-max-input" value="{{ current_max }}">
                {%- endif -%}
              </div>
          {%- endcase -%}
        </div>
      </div>
    {%- endif -%}
  {%- endfor -%}

  <!-- On Sale -->
  <!-- Debug: Checking on sale section - title: {{ on_sale_title }}, show: {{ show_on_sale }} -->
  {% if on_sale_title != blank and show_on_sale %}
  <div class="widget-facet">
    <div class="facet-title text-xl fw-medium"><span>{{ on_sale_title }}</span></div>
    <ul class="collapse-body list-recent">
      {%- if on_sale_source == "product_list" and on_sale_products != blank -%}
        <!-- Debug: Using product list source, products: {{ on_sale_products | size }}, on_sale_products: {{ on_sale_products }} -->
        {%- for product in on_sale_products -%}
          <!-- Debug: Product {{ product.title }} - compare: {{ product.compare_at_price }}, price: {{ product.price }} -->
          {%- if product.compare_at_price > product.price -%}
                          <li>
                <div class="recent-blog-item">
                  <a href="{{ product.url }}" class="img-product">
                    <img src="{{ product.featured_image | image_url: width: 100, height: 100 }}" alt="{{ product.title | escape }}" loading="lazy" width="100" height="100">
                  </a>
                  <div class="content">
                    <a href="{{ product.url }}" class="title text-md link fw-medium">{{ product.title }}</a>
                    <div class="price text-md fw-medium">
                      <span class="new-price">{{ product.price | money }}</span>
                      <span class="old-price">{{ product.compare_at_price | money }}</span>
                    </div>
                  </div>
                </div>
              </li>
          {%- endif -%}
        {%- endfor -%}
      {%- else -%}
        <!-- Debug: Using collection source, checking {{ collection.products.size }} products -->
        {%- for product in collection.products -%}
          <!-- Debug: Product {{ product.title }} - compare: {{ product.compare_at_price }}, price: {{ product.price }} -->
          {%- if product.compare_at_price > product.price -%}
            <li>
              <div class="recent-blog-item">
                <a href="{{ product.url }}" class="img-product">
                  <img src="{{ product.featured_image | image_url: width: 100, height: 100 }}" alt="{{ product.title | escape }}" loading="lazy" width="100" height="100">
                </a>
                <div class="content">
                  <a href="{{ product.url }}" class="title text-md link fw-medium">{{ product.title }}</a>
                  <div class="price text-md fw-medium">
                    <span class="new-price">{{ product.price | money }}</span>
                    <span class="old-price">{{ product.compare_at_price | money }}</span>
                  </div>
                </div>
              </div>
            </li>
          {%- endif -%}
        {%- endfor -%}
      {%- endif -%}
    </ul>
  </div>
  {% endif %}

  <!-- Banner -->
  {% if show_banner and filter_banner != blank %}
  <div class="widget-facet">
    <div class="sb-banner hover-img">
      <div class="image img-style">
        <img src="{{ filter_banner | image_url }}" 
             data-src="{{ filter_banner | image_url }}" 
             alt="{{ filter_banner.alt | escape }}" 
             class="lazyload"
             loading="lazy"
             width="{{ filter_banner.width }}"
             height="{{ filter_banner.height }}">
      </div>
      <div class="banner-content">
        <p class="title">
          {{ banner_title | newline_to_br }}
        </p>
        {% if banner_button_url != blank %}
          <a href="{{ banner_button_url }}" class="tf-btn btn-white hover-primary">{{ banner_button_text }}</a>
        {% endif %}
      </div>
    </div>
  </div>
  {% endif %}
</form> 

<script>
  // Initialize price range slider if it exists and hasn't been initialized
  document.addEventListener('DOMContentLoaded', function() {
    const formId = '{{ form_id }}';
    const sliderSuffix = formId.replace('collection-filters-form-', '');
    const priceRange = document.getElementById('price-value-range-' + sliderSuffix);
    if (priceRange && !priceRange.noUiSlider && typeof noUiSlider !== 'undefined') {
      const minValue = document.getElementById('price-min-value-' + sliderSuffix);
      const maxValue = document.getElementById('price-max-value-' + sliderSuffix);
      const minInput = document.getElementById('price-min-input');
      const maxInput = document.getElementById('price-max-input');
      const resetButton = priceRange.closest('.widget-price').querySelector('.reset-price');
      
      if (minValue && maxValue) {
        const currency = minValue.dataset.currency || '$';
        const rangeMin = parseInt(priceRange.dataset.rangeMin) || 0;
        const rangeMax = parseInt(priceRange.dataset.rangeMax) || 1000;
        const currentMin = parseInt(priceRange.dataset.min) || rangeMin;
        const currentMax = parseInt(priceRange.dataset.max) || rangeMax;

        try {
          noUiSlider.create(priceRange, {
            start: [currentMin, currentMax],
            connect: true,
            range: {
              'min': rangeMin,
              'max': rangeMax
            },
            step: 1
          });

          // Update display values and form inputs
          priceRange.noUiSlider.on('update', function(values) {
            if (minValue) minValue.textContent = currency + Math.round(values[0]);
            if (maxValue) maxValue.textContent = currency + Math.round(values[1]);
            if (minInput) minInput.value = Math.round(values[0]);
            if (maxInput) maxInput.value = Math.round(values[1]);
          });

          // Handle form submission when price range changes
          priceRange.noUiSlider.on('change', function(values) {
            const form = document.getElementById('collection-filters-form') || document.getElementById('collection-filters-form-sidebar') || document.getElementById('collection-filters-form-drawer');
            if (form) {
              // Remove existing price inputs if they exist
              const existingMinInput = form.querySelector('input[name="filter.v.price.gte"]');
              const existingMaxInput = form.querySelector('input[name="filter.v.price.lte"]');
              
              if (existingMinInput) existingMinInput.remove();
              if (existingMaxInput) existingMaxInput.remove();
              
              // Only add price inputs if the range is not at default
              const rangeMin = parseInt(priceRange.dataset.rangeMin) || 0;
              const rangeMax = parseInt(priceRange.dataset.rangeMax) || 1000;
              
              if (Math.round(values[0]) !== rangeMin || Math.round(values[1]) !== rangeMax) {
                // Create new hidden inputs with correct Shopify filter parameter names
                const newMinInput = document.createElement('input');
                newMinInput.type = 'hidden';
                newMinInput.name = 'filter.v.price.gte';
                newMinInput.value = Math.round(values[0]);
                form.appendChild(newMinInput);
                
                const newMaxInput = document.createElement('input');
                newMaxInput.type = 'hidden';
                newMaxInput.name = 'filter.v.price.lte';
                newMaxInput.value = Math.round(values[1]);
                form.appendChild(newMaxInput);
              }
              
              // Submit the form to update URL parameters
              form.submit();
            }
          });

          // Handle reset button
          if (resetButton) {
            resetButton.addEventListener('click', function(e) {
              e.preventDefault();
              priceRange.noUiSlider.set([rangeMin, rangeMax]);
              
              // Submit the form after reset
              const form = document.getElementById('collection-filters-form') || document.getElementById('collection-filters-form-sidebar') || document.getElementById('collection-filters-form-drawer');
              if (form) {
                form.submit();
              }
            });
          }

        } catch (error) {
          console.error('Error initializing price range slider in filter content:', error);
        }
      }
    }
  });
</script>