{% comment %}
  Collection Section
  - Includes filter controls, sorting options, layout switching
  - Responsive product grid with list view option
  - Product cards with hover effects and quick actions
{% endcomment %}

{% paginate collection.products by section.settings.products_per_page %}
<section class="flat-spacing-24" style="padding-top: {{ section.settings.padding_top }}px; padding-bottom: {{ section.settings.padding_bottom }}px;">
  {% if section.settings.width == 'boxed' %}
    <div class="container">
  {% endif %}
    
    <!-- Filter Drawer - Always present for mobile/tablet responsive behavior -->
    <div class="offcanvas offcanvas-start canvas-sidebar canvas-filter" id="filterShop">
      <div class="canvas-wrapper">
        <div class="canvas-header">
          <span class="title">Filter</span>
          <button class="icon-close icon-close-popup" data-bs-dismiss="offcanvas" aria-label="Close"></button>
        </div>
        <div class="canvas-body">
          {% render 'filter-content', 
            show_banner: section.settings.show_banner,
            banner_title: section.settings.banner_title,
            banner_button_text: section.settings.banner_button_text,
            banner_button_url: section.settings.banner_button_url,
            collections_title: section.settings.collections_title,
            categories_mode: section.settings.categories_mode,
            categories_link_list: section.settings.categories_link_list,
            categories_show_count: section.settings.categories_show_count,
            show_on_sale: section.settings.show_on_sale,
            on_sale_title: section.settings.on_sale_title,
            on_sale_source: section.settings.on_sale_source,
            on_sale_products: section.settings.on_sale_products,
            filter_banner: section.settings.filter_banner
          %}
        </div>
      </div>
    </div>

    {%- case section.settings.filter_type -%}
      {%- when 'drawer' -%}
        <!-- Drawer filter type - no additional sidebar needed -->
      {%- when 'left' -%}
        <!-- Left Sidebar - visible on desktop, hidden on mobile/tablet -->
        <div class="row">
          <div class="col-lg-3 d-none d-lg-block">
            <div class="filter-sidebar filter-left">
              <div class="filter-content">
                {% render 'filter-content', 
                  show_banner: section.settings.show_banner,
                  banner_title: section.settings.banner_title,
                  banner_button_text: section.settings.banner_button_text,
                  banner_button_url: section.settings.banner_button_url,
                  collections_title: section.settings.collections_title,
                  categories_mode: section.settings.categories_mode,
                  categories_link_list: section.settings.categories_link_list,
                  categories_show_count: section.settings.categories_show_count,
                  show_on_sale: section.settings.show_on_sale,
                  on_sale_title: section.settings.on_sale_title,
                  on_sale_source: section.settings.on_sale_source,
                  on_sale_products: section.settings.on_sale_products,
                  filter_banner: section.settings.filter_banner
                %}
              </div>
            </div>
          </div>
          <div class="col-lg-9 col-12">
      {%- when 'right' -%}
        <!-- Right Sidebar - visible on desktop, hidden on mobile/tablet -->
        <div class="row">
          <div class="col-lg-9 col-12">
      {%- when 'horizontal' -%}
        <!-- Horizontal filter type - no additional sidebar needed -->
    {%- endcase -%}

    {%- if section.settings.filter_type == 'drawer' or section.settings.filter_type == 'left' or section.settings.filter_type == 'right' -%}
      {% if collection.products.size > 0 %}
        <div class="tf-shop-control">
          {%- if section.settings.filter_type == 'drawer' -%}
            <div class="tf-group-filter">
              <a href="#filterShop" data-bs-toggle="offcanvas" aria-controls="filterShop" class="tf-btn-filter">
                <span class="icon icon-filter"></span>
                <span class="text">Filter</span>
              </a>
              <div class="tf-dropdown-sort" data-bs-toggle="dropdown">
                <div class="btn-select">
                  <span class="text-sort-value">{{ collection.sort_by | default: 'best-selling' | replace: '-', ' ' | capitalize }}</span>
                  <span class="icon icon-arr-down"></span>
                </div>
                <div class="dropdown-menu">
                  <div class="select-item{% if collection.sort_by == 'best-selling' %} active{% endif %}" data-sort-value="best-selling">
                    <span class="text-value-item">Best selling</span>
                  </div>
                  <div class="select-item{% if collection.sort_by == 'title-ascending' %} active{% endif %}" data-sort-value="title-ascending">
                    <span class="text-value-item">Title ascending</span>
                  </div>
                  <div class="select-item{% if collection.sort_by == 'title-descending' %} active{% endif %}" data-sort-value="title-descending">
                    <span class="text-value-item">Title descending</span>
                  </div>
                  <div class="select-item{% if collection.sort_by == 'price-ascending' %} active{% endif %}" data-sort-value="price-ascending">
                    <span class="text-value-item">Price ascending</span>
                  </div>
                  <div class="select-item{% if collection.sort_by == 'price-descending' %} active{% endif %}" data-sort-value="price-descending">
                    <span class="text-value-item">Price descending</span>
                  </div>
                </div>
              </div>
            </div>
          {%- elsif section.settings.filter_type == 'left' or section.settings.filter_type == 'right' -%}
            <div class="tf-group-filter">
              <a href="#filterShop" data-bs-toggle="offcanvas" aria-controls="filterShop" class="tf-btn-filter d-lg-none">
                <span class="icon icon-filter"></span>
                <span class="text">Filter</span>
              </a>
              <div class="tf-dropdown-sort" data-bs-toggle="dropdown">
                <div class="btn-select">
                  <span class="text-sort-value">{{ collection.sort_by | default: 'best-selling' | replace: '-', ' ' | capitalize }}</span>
                  <span class="icon icon-arr-down"></span>
                </div>
                <div class="dropdown-menu">
                  <div class="select-item{% if collection.sort_by == 'best-selling' %} active{% endif %}" data-sort-value="best-selling">
                    <span class="text-value-item">Best selling</span>
                  </div>
                  <div class="select-item{% if collection.sort_by == 'title-ascending' %} active{% endif %}" data-sort-value="title-ascending">
                    <span class="text-value-item">Title ascending</span>
                  </div>
                  <div class="select-item{% if collection.sort_by == 'title-descending' %} active{% endif %}" data-sort-value="title-descending">
                    <span class="text-value-item">Title descending</span>
                  </div>
                  <div class="select-item{% if collection.sort_by == 'price-ascending' %} active{% endif %}" data-sort-value="price-ascending">
                    <span class="text-value-item">Price ascending</span>
                  </div>
                  <div class="select-item{% if collection.sort_by == 'price-descending' %} active{% endif %}" data-sort-value="price-descending">
                    <span class="text-value-item">Price descending</span>
                  </div>
                </div>
              </div>
            </div>
          {%- endif -%}
          {%- if section.settings.filter_type != 'horizontal' -%}
            <ul class="tf-control-layout">
              {% comment %} <li class="tf-view-layout-switch sw-layout-list list-layout" data-value-layout="list">
                <div class="item icon-list">
                  <span></span>
                  <span></span>
                </div>
              </li> {% endcomment %}
              <li class="tf-view-layout-switch sw-layout-2" data-value-layout="tf-col-2">
                <div class="item icon-grid-2">
                  <span></span>
                  <span></span>
                </div>
              </li>
              <li class="tf-view-layout-switch sw-layout-3" data-value-layout="tf-col-3">
                <div class="item icon-grid-3">
                  <span></span>
                  <span></span>
                  <span></span>
                </div>
              </li>
              <li class="tf-view-layout-switch sw-layout-4{% if section.settings.default_grid_columns == '4' %} active{% endif %}" data-value-layout="tf-col-4">
                <div class="item icon-grid-4">
                  <span></span>
                  <span></span>
                  <span></span>
                  <span></span>
                </div>
              </li>
            </ul>
          {%- endif -%}
        </div>
      {% endif %}
    {%- endif -%}

    {%- if section.settings.filter_type == 'horizontal' -%}
      {% if collection.products.size > 0 %}
        <div class="tf-shop-control mb1">
          <div class="tf-group-filter">
            <div class="tf-dropdown-sort" data-bs-toggle="dropdown">
              <div class="btn-select">
                <span class="text-sort-value">{{ collection.sort_by | default: 'best-selling' | replace: '-', ' ' | capitalize }}</span>
                <span class="icon icon-arr-down"></span>
              </div>
              <div class="dropdown-menu">
                <div class="select-item{% if collection.sort_by == 'best-selling' %} active{% endif %}" data-sort-value="best-selling">
                  <span class="text-value-item">Best selling</span>
                </div>
                <div class="select-item{% if collection.sort_by == 'title-ascending' %} active{% endif %}" data-sort-value="title-ascending">
                  <span class="text-value-item">Title ascending</span>
                </div>
                <div class="select-item{% if collection.sort_by == 'title-descending' %} active{% endif %}" data-sort-value="title-descending">
                  <span class="text-value-item">Title descending</span>
                </div>
                <div class="select-item{% if collection.sort_by == 'price-ascending' %} active{% endif %}" data-sort-value="price-ascending">
                  <span class="text-value-item">Price ascending</span>
                </div>
                <div class="select-item{% if collection.sort_by == 'price-descending' %} active{% endif %}" data-sort-value="price-descending">
                  <span class="text-value-item">Price descending</span>
                </div>
              </div>
            </div>
          </div>
          <ul class="tf-control-layout">
          {% comment %} <li class="tf-view-layout-switch sw-layout-list list-layout" data-value-layout="list">
            <div class="item icon-list">
              <span></span>
              <span></span>
            </div>
          </li> {% endcomment %}
          <li class="tf-view-layout-switch sw-layout-2" data-value-layout="tf-col-2">
            <div class="item icon-grid-2">
              <span></span>
              <span></span>
            </div>
          </li>
          <li class="tf-view-layout-switch sw-layout-3" data-value-layout="tf-col-3">
            <div class="item icon-grid-3">
              <span></span>
              <span></span>
              <span></span>
            </div>
          </li>
          <li class="tf-view-layout-switch sw-layout-4{% if section.settings.default_grid_columns == '4' %} active{% endif %}" data-value-layout="tf-col-4">
            <div class="item icon-grid-4">
              <span></span>
              <span></span>
              <span></span>
              <span></span>
            </div>
          </li>
        </ul>
        </div>
        <form id="collection-filters-form" method="GET" action="{{ collection.url }}" class="filter-form">
          <div class="tf-filter-dropdown">
            <span class="title-filter">Filter:</span>
            <div class="meta-dropdown-filter">
              <!-- Availability Filter -->
              <div class="dropdown dropdown-filter">
                <div class="dropdown-toggle" id="availability" data-bs-toggle="dropdown" aria-expanded="false" data-bs-auto-close="outside">
                  <span class="text-value">Availability</span>
                  <span class="icon icon-arr-down"></span>
                </div>
                <div class="dropdown-menu" aria-labelledby="availability">
                  <ul class="collapse-body filter-group-check current-scrollbar">
                    <li class="list-item">
                      <input type="checkbox"
                        name="filter.v.availability"
                        value="1"
                        id="Filter-availability-1"
                        {% if current_tags contains 'filter.v.availability:1' %}checked{% endif %}
                        class="filter-checkbox tf-check">
                      <label for="Filter-availability-1" class="label">
                        <span>In stock</span>
                        <span class="count">({{ collection.products | where: "available", true | size }})</span>
                      </label>
                    </li>
                    <li class="list-item">
                      <input type="checkbox"
                        name="filter.v.availability"
                        value="0"
                        id="Filter-availability-2"
                        {% if current_tags contains 'filter.v.availability:0' %}checked{% endif %}
                        class="filter-checkbox tf-check">
                      <label for="Filter-availability-2" class="label">
                        <span>Out of stock</span>
                        <span class="count">({{ collection.products | where: "available", false | size }})</span>
                      </label>
                    </li>
                  </ul>
                </div>
              </div>

              <!-- Dynamic Shopify Filters -->
              {%- for filter in collection.filters -%}
                {%- if filter.label != 'Availability' -%}
                  <div class="dropdown dropdown-filter">
                    <div class="dropdown-toggle" id="filter-{{ filter.label | handle }}" data-bs-toggle="dropdown" aria-expanded="false" data-bs-auto-close="outside">
                      <span class="text-value">{{ filter.label }}</span>
                      <span class="icon icon-arr-down"></span>
                    </div>
                    <div class="dropdown-menu" aria-labelledby="filter-{{ filter.label | handle }}">
                      {%- case filter.type -%}
                        {%- when 'boolean' or 'list' -%}
                          <ul class="filter-group-check">
                            {%- for filter_value in filter.values -%}
                              <li class="list-item">
                                <input type="checkbox"
                                  name="{{ filter_value.param_name }}"
                                  value="{{ filter_value.value }}"
                                  id="Filter-{{ filter.label | escape }}-{{ forloop.index }}"
                                  {% if filter_value.active -%}checked{%- endif %}
                                  {% if filter_value.count == 0 and filter_value.active == false -%}disabled{%- endif %}
                                  class="filter-checkbox tf-check">
                                <label for="Filter-{{ filter.label | escape }}-{{ forloop.index }}" class="label">
                                  <span>{{ filter_value.label }}</span>
                                  <span class="count">({{ filter_value.count }})</span>
                                </label>
                              </li>
                            {%- endfor -%}
                          </ul>
                        {%- when 'price_range' -%}
                          <div class="collapse-body widget-price filter-price">
                            <span class="reset-price">Reset</span>
                            <div class="price-val-range" id="price-value-range-horizontal" 
                              data-min="{{ filter.min_value.value | default: 0 | money_without_currency | round }}"
                              data-max="{{ filter.max_value.value | default: filter.range_max | money_without_currency | round }}"
                              data-range-min="{{ filter.range_min | money_without_currency | round }}"
                              data-range-max="{{ filter.range_max | money_without_currency | round }}"></div>
                            <div class="box-value-price">
                              <span class="text-sm">Price:</span>
                              <div class="price-box">
                                <div class="price-val" id="price-min-value-horizontal" data-currency="{{ shop.currency.symbol }}">
                                  {{ filter.min_value.value | default: 0 | money_without_currency | round }}
                                </div>
                                <span>-</span>
                                <div class="price-val" id="price-max-value-horizontal" data-currency="{{ shop.currency.symbol }}">
                                  {{ filter.max_value.value | default: filter.range_max | money_without_currency | round }}
                                </div>
                              </div>
                            </div>
                            <input type="hidden" name="filter.v.price.gte" id="price-min-input-horizontal" value="{{ filter.min_value.value | default: 0 | money_without_currency | round }}">
                            <input type="hidden" name="filter.v.price.lte" id="price-max-input-horizontal" value="{{ filter.max_value.value | default: filter.range_max | money_without_currency | round }}">
                          </div>
                      {%- endcase -%}
                    </div>
                  </div>
                {%- endif -%}
              {%- endfor -%}

              <!-- Color Filter -->
              {%- assign unique_colors = '' | split: '' -%}
              {%- for product in collection.products -%}
                {%- for option in product.options_with_values -%}
                  {%- if option.name == 'Color' or option.name == 'Colour' -%}
                    {%- for value in option.values -%}
                      {%- unless unique_colors contains value -%}
                        {%- assign unique_colors = unique_colors | concat: value | uniq -%}
                      {%- endunless -%}
                    {%- endfor -%}
                  {%- endif -%}
                {%- endfor -%}
              {%- endfor -%}
              
              {%- if unique_colors.size > 0 -%}
                <div class="dropdown dropdown-filter">
                  <div class="dropdown-toggle" id="color-filter" data-bs-toggle="dropdown" aria-expanded="false" data-bs-auto-close="outside">
                    <span class="text-value">Color</span>
                    <span class="icon icon-arr-down"></span>
                  </div>
                  <div class="dropdown-menu" aria-labelledby="color-filter">
                    <div class="filter-color-box">
                      {%- for color in unique_colors -%}
                        {%- assign color_count = 0 -%}
                        {%- for product in collection.products -%}
                          {%- for option in product.options_with_values -%}
                            {%- if option.name == 'Color' or option.name == 'Colour' -%}
                              {%- if option.values contains color -%}
                                {%- assign color_count = color_count | plus: 1 -%}
                                {%- break -%}
                              {%- endif -%}
                            {%- endif -%}
                          {%- endfor -%}
                        {%- endfor -%}
                        <div class="color-item color-check" data-color="{{ color | escape }}">
                          <span class="color bg-{{ color | handleize }}"></span>
                          <span class="color-text">{{ color }}</span>
                          <input type="checkbox"
                            name="filter.v.option.color"
                            value="{{ color | escape }}"
                            id="Filter-color-{{ forloop.index }}"
                            {% if current_tags contains color %}checked{% endif %}
                            class="filter-checkbox tf-check"
                            style="display: none;">
                          <span class="count">({{ color_count }})</span>
                        </div>
                      {%- endfor -%}
                    </div>
                  </div>
                </div>
              {%- endif -%}

              <!-- Size Filter -->
              {%- assign unique_sizes = '' | split: '' -%}
              {%- for product in collection.products -%}
                {%- for option in product.options_with_values -%}
                  {%- if option.name == 'Size' -%}
                    {%- for value in option.values -%}
                      {%- unless unique_sizes contains value -%}
                        {%- assign unique_sizes = unique_sizes | concat: value | uniq -%}
                      {%- endunless -%}
                    {%- endfor -%}
                  {%- endif -%}
                {%- endfor -%}
              {%- endfor -%}
              
              {%- if unique_sizes.size > 0 -%}
                <div class="dropdown dropdown-filter">
                  <div class="dropdown-toggle" id="size-filter" data-bs-toggle="dropdown" aria-expanded="false" data-bs-auto-close="outside">
                    <span class="text-value">Size</span>
                    <span class="icon icon-arr-down"></span>
                  </div>
                  <div class="dropdown-menu" aria-labelledby="size-filter">
                    <div class="filter-size-box">
                      {%- for size in unique_sizes -%}
                        {%- assign size_count = 0 -%}
                        {%- for product in collection.products -%}
                          {%- for option in product.options_with_values -%}
                            {%- if option.name == 'Size' -%}
                              {%- if option.values contains size -%}
                                {%- assign size_count = size_count | plus: 1 -%}
                                {%- break -%}
                              {%- endif -%}
                            {%- endif -%}
                          {%- endfor -%}
                        {%- endfor -%}
                        <div class="size-item size-check" data-size="{{ size | escape }}">
                          <span class="size">{{ size }}</span>
                          <input type="checkbox"
                            name="filter.v.option.size"
                            value="{{ size | escape }}"
                            id="Filter-size-{{ forloop.index }}"
                            {% if current_tags contains size %}checked{% endif %}
                            class="filter-checkbox tf-check"
                            style="display: none;">
                          <span class="count">({{ size_count }})</span>
                        </div>
                      {%- endfor -%}
                    </div>
                  </div>
                </div>
              {%- endif -%}
            </div>
          </div>
        </form>
      {% endif %}
    {%- endif -%}

    <div class="wrapper-control-shop" data-pagination-type="{{ section.settings.pagination_type }}">
      <div class="meta-filter-shop" style="display: {% if current_tags.size > 0 or request.search != blank %}block{% else %}none{% endif %};">
          <div id="product-count-grid" class="count-text"><span class="count">{{ collection.products.size }}</span> Products found</div>
          <div id="product-count-list" class="count-text"><span class="count">{{ collection.products.size }}</span> Products found</div>
          <div id="applied-filters">
            {% comment %} Show current tags as applied filters {% endcomment %}
            {% if current_tags.size > 0 %}
              {% for tag in current_tags %}
                <span class="filter-tag">
                  <i class="icon icon-close" data-filter-tag="{{ tag | escape }}"></i>
                  {{ tag }}
                </span>
              {% endfor %}
            {% endif %}
            
            {% comment %} Show URL parameters as applied filters {% endcomment %}
            {% assign url_params = request.search | remove: '?' | split: '&' %}
            {% for param in url_params %}
              {% assign key_value = param | split: '=' %}
              {% assign param_key = key_value[0] %}
              {% assign param_value = key_value[1] %}
              
              {% if param_key == 'filter.v.availability' %}
                {% assign availability_label = 'Out of stock' %}
                {% if param_value == '1' %}
                  {% assign availability_label = 'In stock' %}
                {% endif %}
                <span class="filter-tag">
                  <i class="icon icon-close" data-filter-type="availability" data-param="filter.v.availability" data-value="{{ param_value }}"></i>
                  Availability: {{ availability_label }}
                </span>
              {% elsif param_key == 'filter.v.price.gte' %}
                {% assign min_price = param_value %}
                {% assign max_price = '' %}
                {% for param2 in url_params %}
                  {% assign key_value2 = param2 | split: '=' %}
                  {% if key_value2[0] == 'filter.v.price.lte' %}
                    {% assign max_price = key_value2[1] %}
                    {% break %}
                  {% endif %}
                {% endfor %}
                {% if max_price != '' %}
                  <span class="filter-tag">
                    <i class="icon icon-close" data-filter-type="price" data-param="price" data-value="{{ min_price }}-{{ max_price }}"></i>
                    Price: {{ shop.currency.symbol }}{{ min_price }} - {{ shop.currency.symbol }}{{ max_price }}
                  </span>
                {% endif %}
              {% elsif param_key == 'filter.v.option.color' %}
                <span class="filter-tag">
                  <i class="icon icon-close" data-filter-type="filter.v.option.color" data-param="filter.v.option.color" data-value="{{ param_value }}"></i>
                  Color: {{ param_value }}
                </span>
              {% elsif param_key == 'filter.v.option.size' %}
                <span class="filter-tag">
                  <i class="icon icon-close" data-filter-type="filter.v.option.size" data-param="filter.v.option.size" data-value="{{ param_value }}"></i>
                  Size: {{ param_value }}
                </span>
              {% elsif param_key contains 'filter.v.' and param_key != 'filter.v.price.lte' %}
                {% comment %} Handle other filter parameters by finding the checkbox label {% endcomment %}
                {% assign checkbox_found = false %}
                {% assign param_key_clean = param_key | remove: 'filter.v.' %}
                {% assign param_key_capitalized = param_key_clean | capitalize %}
                {% for product in collection.products %}
                  {% for option in product.options_with_values %}
                    {% if option.name == param_key_capitalized %}
                      {% for value in option.values %}
                        {% if value == param_value %}
                          <span class="filter-tag">
                            <i class="icon icon-close" data-filter-type="{{ param_key }}" data-param="{{ param_key }}" data-value="{{ param_value }}"></i>
                            {{ option.name }}: {{ value }}
                          </span>
                          {% assign checkbox_found = true %}
                          {% break %}
                        {% endif %}
                      {% endfor %}
                      {% if checkbox_found %}{% break %}{% endif %}
                    {% endif %}
                  {% endfor %}
                  {% if checkbox_found %}{% break %}{% endif %}
                {% endfor %}
              {% endif %}
            {% endfor %}
          </div>
          {% assign has_filters = false %}
          {% if current_tags.size > 0 %}
            {% assign has_filters = true %}
          {% endif %}
          {% if request.search contains 'filter.v.' %}
            {% assign has_filters = true %}
          {% endif %}
          {% if has_filters %}
            <button id="remove-all" class="remove-all-filters">
              <i class="icon icon-close"></i> Clear all filter
            </button>
          {% endif %}
      </div>

      <!-- List View Layout -->
      <div class="tf-list-layout wrapper-shop" id="listLayout" style="display: none;">
        {% if collection.products.size > 0 %}
          {% for product in collection.products %}
            <div class="loadItem card-product style-list" data-availability="{{ product.available | default: 'In stock' }}" data-brand="{{ product.vendor }}">
              {% render 'card-product', product: product, show_color_swatches: true, size_swatches: true %}
            </div>
          {% endfor %}
        {% else %}
          <div class="no-products-found">
            <div class="no-products-content">
              <div class="no-products-icon">
                <svg width="64" height="64" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <path d="M9 22H15C20 22 22 20 22 15V9C22 4 20 2 15 2H9C4 2 2 4 2 9V15C2 20 4 22 9 22Z" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                  <path d="M9.5 8.96997C9.5 8.96997 10.5 8.96997 11.5 9.96997C12.5 10.97 12.5 12.97 12.5 12.97" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                  <path d="M14.5 8.96997C14.5 8.96997 13.5 8.96997 12.5 9.96997C11.5 10.97 11.5 12.97 11.5 12.97" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                  <path d="M9.5 15.03C9.5 15.03 10.5 15.03 11.5 16.03C12.5 17.03 12.5 19.03 12.5 19.03" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                  <path d="M14.5 15.03C14.5 15.03 13.5 15.03 12.5 16.03C11.5 17.03 11.5 19.03 11.5 19.03" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                </svg>
              </div>
              <h3 class="no-products-title">No products found</h3>
              <p class="no-products-description">We couldn't find any products matching your criteria. Try adjusting your filters or browse our other collections.</p>
              <div class="no-products-actions">
                <a href="/collections" class="tf-btn btn-out-line-dark2">Browse all collections</a>
              </div>
            </div>
          </div>
        {% endif %}

        {% if section.settings.pagination_type == 'load_more' %}
          {% if paginate.next %}
            <div class="wd-load">
              <button id="loadMoreListBtn" class="tf-btn btn-out-line-dark2 tf-loading loadmore">
                <span class="text">Load more</span>
                <div class="spinner-circle">
                  <span class="spinner-circle1 spinner-child"></span>
                  <span class="spinner-circle2 spinner-child"></span>
                  <span class="spinner-circle3 spinner-child"></span>
                  <span class="spinner-circle4 spinner-child"></span>
                  <span class="spinner-circle5 spinner-child"></span>
                  <span class="spinner-circle6 spinner-child"></span>
                  <span class="spinner-circle7 spinner-child"></span>
                  <span class="spinner-circle8 spinner-child"></span>
                  <span class="spinner-circle9 spinner-child"></span>
                </div>
              </button>
            </div>
          {% endif %}
        {% else %}
          {% if paginate.pages > 1 %}
            <ul class="wg-pagination">
              {% if paginate.previous %}
                <li>
                  <a href="{{ paginate.previous.url }}" class="pagination-item"><i class="icon-arr-left"></i></a>
                </li>
              {% endif %}
              
              {% for part in paginate.parts %}
                {% if part.is_link %}
                  <li>
                    <a href="{{ part.url }}" class="pagination-item">{{ part.title }}</a>
                  </li>
                {% else %}
                  <li class="{% if part.title == paginate.current_page %}active{% endif %}">
                    <div class="pagination-item">{{ part.title }}</div>
                  </li>
                {% endif %}
              {% endfor %}

              {% if paginate.next %}
                <li>
                  <a href="{{ paginate.next.url }}" class="pagination-item"><i class="icon-arr-right2"></i></a>
                </li>
              {% endif %}
            </ul>
          {% endif %}
        {% endif %}
      </div>

      <!-- Grid View Layout -->
      <div class="wrapper-shop{% if collection.products.size > 0 %} tf-grid-layout tf-col-{{ section.settings.default_grid_columns }}{% endif %}" id="gridLayout" data-default-columns="{{ section.settings.default_grid_columns }}">
        {% if collection.products.size > 0 %}
          {% for product in collection.products %}
            <div class="loadItem card-product grid style-1{% if product.options contains 'Size' %} card-product-size{% endif %}" 
                 data-availability="{{ product.available | default: 'In stock' }}" 
                 data-brand="{{ product.vendor }}">
              {% render 'card-product', product: product, show_color_swatches: true, show_size_swatches: true,  size_swatches: true %}
            </div>
          {% endfor %}
        {% else %}
          <div class="no-products-found">
            <div class="no-products-content">
              <div class="no-products-icon">
                <svg width="64" height="64" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <path d="M9 22H15C20 22 22 20 22 15V9C22 4 20 2 15 2H9C4 2 2 4 2 9V15C2 20 4 22 9 22Z" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                  <path d="M9.5 8.96997C9.5 8.96997 10.5 8.96997 11.5 9.96997C12.5 10.97 12.5 12.97 12.5 12.97" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                  <path d="M14.5 8.96997C14.5 8.96997 13.5 8.96997 12.5 9.96997C11.5 10.97 11.5 12.97 11.5 12.97" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                  <path d="M9.5 15.03C9.5 15.03 10.5 15.03 11.5 16.03C12.5 17.03 12.5 19.03 12.5 19.03" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                  <path d="M14.5 15.03C14.5 15.03 13.5 15.03 12.5 16.03C11.5 17.03 11.5 19.03 11.5 19.03" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                </svg>
              </div>
              <h3 class="no-products-title">No products found</h3>
              <p class="no-products-description">We couldn't find any products matching your criteria. Try adjusting your filters or browse our other collections.</p>
              <div class="no-products-actions">
                <a href="/collections" class="tf-btn btn-out-line-dark2">Browse all collections</a>
              </div>
            </div>
          </div>
        {% endif %}

        {% if section.settings.pagination_type == 'load_more' %}
          {% if paginate.next %}
            <div class="wd-load d-flex justify-content-center">
              <button id="loadMoreGridBtn" class="tf-btn btn-out-line-dark2 tf-loading loadmore">
                <span class="text">Load more</span>
                <div class="spinner-circle">
                  <span class="spinner-circle1 spinner-child"></span>
                  <span class="spinner-circle2 spinner-child"></span>
                  <span class="spinner-circle3 spinner-child"></span>
                  <span class="spinner-circle4 spinner-child"></span>
                  <span class="spinner-circle5 spinner-child"></span>
                  <span class="spinner-circle6 spinner-child"></span>
                  <span class="spinner-circle7 spinner-child"></span>
                  <span class="spinner-circle8 spinner-child"></span>
                  <span class="spinner-circle9 spinner-child"></span>
                </div>
              </button>
            </div>
          {% endif %}
        {% elsif section.settings.pagination_type == 'pagination' %}
          {% if paginate.pages > 1 %}
            <ul class="wg-pagination">
              {% if paginate.previous %}
                <li>
                  <a href="{{ paginate.previous.url }}" class="pagination-item"><i class="icon-arr-left"></i></a>
                </li>
              {% endif %}
              
              {% for part in paginate.parts %}
                {% if part.is_link %}
                  <li>
                    <a href="{{ part.url }}" class="pagination-item">{{ part.title }}</a>
                  </li>
                {% else %}
                  <li class="{% if part.title == paginate.current_page %}active{% endif %}">
                    <div class="pagination-item">{{ part.title }}</div>
                  </li>
                {% endif %}
              {% endfor %}

              {% if paginate.next %}
                <li>
                  <a href="{{ paginate.next.url }}" class="pagination-item"><i class="icon-arr-right2"></i></a>
                </li>
              {% endif %}
            </ul>
          {% endif %}
        {% else %}
          {% if paginate.next %}
            <div class="wd-load d-flex justify-content-center" id="infiniteScrollLoader" style="display: block;">
              <button class="tf-btn btn-dark2 tf-loading animate-btn animate-dark">
                <div class="spinner-circle">
                  <span class="spinner-circle1 spinner-child"></span>
                  <span class="spinner-circle2 spinner-child"></span>
                  <span class="spinner-circle3 spinner-child"></span>
                  <span class="spinner-circle4 spinner-child"></span>
                  <span class="spinner-circle5 spinner-child"></span>
                  <span class="spinner-circle6 spinner-child"></span>
                  <span class="spinner-circle7 spinner-child"></span>
                  <span class="spinner-circle8 spinner-child"></span>
                  <span class="spinner-circle9 spinner-child"></span>
                </div>
              </button>
            </div>
          {% endif %}
        {% endif %}
      </div>
    </div>

    {%- if section.settings.filter_type == 'left' or section.settings.filter_type == 'right' -%}
      </div>
      {%- if section.settings.filter_type == 'right' -%}
        <div class="col-lg-3">
          <div class="filter-sidebar filter-right">
            <div class="filter-content">
              {% render 'filter-content', 
                show_banner: section.settings.show_banner,
                banner_title: section.settings.banner_title,
                banner_button_text: section.settings.banner_button_text,
                banner_button_url: section.settings.banner_button_url,
                collections_title: section.settings.collections_title,
                categories_mode: section.settings.categories_mode,
                categories_link_list: section.settings.categories_link_list,
                categories_show_count: section.settings.categories_show_count,
                show_on_sale: section.settings.show_on_sale,
                on_sale_title: section.settings.on_sale_title,
                on_sale_source: section.settings.on_sale_source,
                on_sale_products: section.settings.on_sale_products,
                filter_banner: section.settings.filter_banner
              %}
            </div>
          </div>
        </div>
      {%- endif -%}
      </div>
    {%- endif -%}
  {% if section.settings.width == 'boxed' %}
    </div>
  {% endif %}
</section>
{% if section.settings.show_description %}
  <div id="description" style="padding-top: {{ section.settings.description_padding_top }}px; padding-bottom: {{ section.settings.description_padding_bottom }}px;">
    <div class="container">
      <p class="text text-md text-center">
        {{ collection.description | strip_html }}
      </p>
      {% if section.settings.related_collection_1 or section.settings.related_collection_2 %}
        <p class="mt_12 text-md text-center">
          {{ section.settings.related_collections_text }}
          {% if section.settings.related_collection_1 %}
            <a href="{{ collections[section.settings.related_collection_1].url }}" class="text-primary text-decoration-underline fw-medium">{{ collections[section.settings.related_collection_1].title | upcase }}</a>
          {% endif %}
          {% if section.settings.related_collection_1 and section.settings.related_collection_2 %} and {% endif %}
          {% if section.settings.related_collection_2 %}
            <a href="{{ collections[section.settings.related_collection_2].url }}" class="text-primary text-decoration-underline fw-medium">{{ collections[section.settings.related_collection_2].title | upcase }}</a>
          {% endif %}.
        </p>
      {% endif %}
    </div>
  </div>
{% endif %}
{% endpaginate %}

<script>
  // Add CSS styles for no products found message
  const noProductsStyles = `
    <style>
      .no-products-found {
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 400px;
        width: 100%;
        padding: 40px 20px;
      }
      
      .no-products-content {
        text-align: center;
        max-width: 500px;
      }
      
      .no-products-icon {
        margin-bottom: 24px;
        color: #6b7280;
      }
      
      .no-products-icon svg {
        width: 64px;
        height: 64px;
      }
      
      .no-products-title {
        font-size: 24px;
        font-weight: 600;
        margin-bottom: 12px;
        color: #1f2937;
      }
      
      .no-products-description {
        font-size: 16px;
        line-height: 1.5;
        color: #6b7280;
        margin-bottom: 32px;
      }
      
      .no-products-actions {
        display: flex;
        gap: 12px;
        justify-content: center;
        flex-wrap: wrap;
      }
      
      .no-products-actions .tf-btn {
        min-width: 140px;
      }
      
      @media (max-width: 768px) {
        .no-products-found {
          min-height: 300px;
          padding: 20px;
        }
        
        .no-products-title {
          font-size: 20px;
        }
        
        .no-products-description {
          font-size: 14px;
        }
        
        .no-products-actions {
          flex-direction: column;
          align-items: center;
        }
        
        .no-products-actions .tf-btn {
          width: 100%;
          max-width: 200px;
        }
      }
    </style>
  `;
  
  // Inject styles into head
  document.head.insertAdjacentHTML('beforeend', noProductsStyles);

  document.addEventListener('DOMContentLoaded', function() {
    // Global variables for state management
    let isLoading = false;
    let currentPage = 1;
    let currentSort = '{{ collection.sort_by | default: "best-selling" }}';
    let currentFilters = new URLSearchParams(window.location.search);
    
    // Cache DOM elements
    const productGrid = document.querySelector('.tf-grid-layout');
    const productList = document.querySelector('.tf-list-layout');
    const sortDropdown = document.querySelector('.tf-dropdown-sort');
    const sortValueDisplay = document.querySelector('.text-sort-value');
    const filterForm = document.getElementById('collection-filters-form');
    const appliedFiltersContainer = document.getElementById('applied-filters');
    const productCountGrid = document.getElementById('product-count-grid');
    const productCountList = document.getElementById('product-count-list');
    const metaFilterShop = document.querySelector('.meta-filter-shop');

    // Initialize filter state from URL parameters
    function initializeFilterState() {
      const urlParams = new URLSearchParams(window.location.search);
      
      // Debug: Log URL parameters
      console.log('Initializing filter state with URL params:', urlParams.toString());
      
      // Set checkboxes based on URL parameters
      const checkboxes = document.querySelectorAll('.filter-checkbox');
      checkboxes.forEach(checkbox => {
        const paramName = checkbox.name;
        const paramValue = checkbox.value;
        
        if (urlParams.has(paramName)) {
          const urlValue = urlParams.get(paramName);
          if (urlValue === paramValue || urlValue.includes(paramValue)) {
            checkbox.checked = true;
            console.log('Checked checkbox:', paramName, paramValue);
          }
        }
      });

      // Set color and size filter states
      const colorFilters = urlParams.getAll('filter.v.option.color');
      const sizeFilters = urlParams.getAll('filter.v.option.size');
      
      colorFilters.forEach(color => {
        const colorItem = document.querySelector(`[data-color="${color}"]`);
        if (colorItem) {
          const checkbox = colorItem.querySelector('.filter-checkbox');
          if (checkbox) {
            checkbox.checked = true;
            colorItem.classList.add('active');
            console.log('Activated color filter:', color);
          }
        }
      });
      
      sizeFilters.forEach(size => {
        const sizeItem = document.querySelector(`[data-size="${size}"]`);
        if (sizeItem) {
          const checkbox = sizeItem.querySelector('.filter-checkbox');
          if (checkbox) {
            checkbox.checked = true;
            sizeItem.classList.add('active');
            console.log('Activated size filter:', size);
          }
        }
      });

      // Set price range if exists - check both sidebar and horizontal filters
      const priceRangeSidebar = document.getElementById('price-value-range');
      const priceRangeHorizontal = document.getElementById('price-value-range-horizontal');
      const minPrice = urlParams.get('filter.v.price.gte');
      const maxPrice = urlParams.get('filter.v.price.lte');
      
      if (minPrice && maxPrice) {
        console.log('Setting price range:', minPrice, '-', maxPrice);
        // Update sidebar price range
        if (priceRangeSidebar && priceRangeSidebar.noUiSlider) {
          priceRangeSidebar.noUiSlider.set([parseInt(minPrice), parseInt(maxPrice)]);
        } else if (priceRangeSidebar) {
          // Wait for noUiSlider to be initialized
          const checkSlider = setInterval(() => {
            if (priceRangeSidebar.noUiSlider) {
              priceRangeSidebar.noUiSlider.set([parseInt(minPrice), parseInt(maxPrice)]);
              clearInterval(checkSlider);
            }
          }, 100);
        }
        
        // Update horizontal price range
        if (priceRangeHorizontal && priceRangeHorizontal.noUiSlider) {
          priceRangeHorizontal.noUiSlider.set([parseInt(minPrice), parseInt(maxPrice)]);
        } else if (priceRangeHorizontal) {
          // Wait for noUiSlider to be initialized
          const checkSlider = setInterval(() => {
            if (priceRangeHorizontal.noUiSlider) {
              priceRangeHorizontal.noUiSlider.set([parseInt(minPrice), parseInt(maxPrice)]);
              clearInterval(checkSlider);
            }
          }, 100);
        }
      }

      // Update applied filters display
      updateAppliedFiltersDisplay();
      
      // Fallback: Ensure meta-filter-shop is visible if there are URL parameters
      const hasUrlParams = urlParams.toString().length > 0;
      if (hasUrlParams && metaFilterShop) {
        metaFilterShop.style.display = 'flex';
        console.log('Ensured meta-filter-shop is visible due to URL parameters');
      }
      
      // Debug: Log final state
      const appliedFilters = document.querySelectorAll('.filter-tag');
      console.log('Applied filters count:', appliedFilters.length);
    }

    // Initialize price range slider
    function initializePriceRangeSlider() {
      // Check for both sidebar and horizontal price range sliders
      const priceRangeSidebar = document.getElementById('price-value-range');
      const priceRangeHorizontal = document.getElementById('price-value-range-horizontal');
      
      // Initialize sidebar price range slider
      if (priceRangeSidebar && !priceRangeSidebar.noUiSlider) {
        initializeSinglePriceSlider(priceRangeSidebar, 'price-min-value', 'price-max-value', 'price-min-input', 'price-max-input');
      }
      
      // Initialize horizontal price range slider
      if (priceRangeHorizontal && !priceRangeHorizontal.noUiSlider) {
        initializeSinglePriceSlider(priceRangeHorizontal, 'price-min-value-horizontal', 'price-max-value-horizontal', 'price-min-input-horizontal', 'price-max-input-horizontal');
      }
    }

    // Helper function to initialize a single price slider
    function initializeSinglePriceSlider(priceRange, minValueId, maxValueId, minInputId, maxInputId) {
      // Check if noUiSlider is available
      if (typeof noUiSlider === 'undefined') {
        console.warn('noUiSlider not available, retrying in 500ms...');
        setTimeout(() => initializePriceRangeSlider(), 500);
        return;
      }

      const minValue = document.getElementById(minValueId);
      const maxValue = document.getElementById(maxValueId);
      const minInput = document.getElementById(minInputId);
      const maxInput = document.getElementById(maxInputId);
      
      if (!minValue || !maxValue) return;

      const currency = minValue.dataset.currency || '$';
      const rangeMin = parseInt(priceRange.dataset.rangeMin) || 0;
      const rangeMax = parseInt(priceRange.dataset.rangeMax) || 1000;
      const currentMin = parseInt(priceRange.dataset.min) || rangeMin;
      const currentMax = parseInt(priceRange.dataset.max) || rangeMax;

      try {
        noUiSlider.create(priceRange, {
          start: [currentMin, currentMax],
          connect: true,
          range: {
            'min': rangeMin,
            'max': rangeMax
          },
          step: 1
        });

        // Update display values
        priceRange.noUiSlider.on('update', function(values) {
          if (minValue) minValue.textContent = currency + Math.round(values[0]);
          if (maxValue) maxValue.textContent = currency + Math.round(values[1]);
          if (minInput) minInput.value = Math.round(values[0]);
          if (maxInput) maxInput.value = Math.round(values[1]);
        });

        // Handle change event
        priceRange.noUiSlider.on('change', function(values) {
          // Update the hidden inputs
          if (minInput) minInput.value = Math.round(values[0]);
          if (maxInput) maxInput.value = Math.round(values[1]);
          
          // Submit the form instead of using JavaScript URL manipulation
          const form = document.getElementById('collection-filters-form');
          if (form) {
            form.submit();
          }
        });

      } catch (error) {
        console.error('Error initializing price range slider:', error);
      }
    }

    // Update applied filters display
    function updateAppliedFiltersDisplay() {
      if (!appliedFiltersContainer) return;
      
      // Check if applied filters were already rendered by Liquid
      const existingFilters = appliedFiltersContainer.querySelectorAll('.filter-tag');
      const hasLiquidRenderedFilters = existingFilters.length > 0;
      
      console.log('updateAppliedFiltersDisplay - existing filters:', existingFilters.length, 'hasLiquidRendered:', hasLiquidRenderedFilters);
      
      // Only clear and rebuild if no filters were rendered by Liquid
      if (!hasLiquidRenderedFilters) {
        console.log('No Liquid-rendered filters found, building from JavaScript');
        appliedFiltersContainer.innerHTML = '';
        const urlParams = new URLSearchParams(window.location.search);
        const appliedFilters = [];

        // Check availability filters
        const availability = urlParams.get('filter.v.availability');
        if (availability) {
          const label = availability === '1' ? 'In stock' : 'Out of stock';
          appliedFilters.push({
            type: 'availability',
            label: `Availability: ${label}`,
            param: 'filter.v.availability',
            value: availability
          });
        }

        // Check other filters
        for (const [param, value] of urlParams.entries()) {
          if (param.startsWith('filter.v.') && param !== 'filter.v.availability' && param !== 'filter.v.price.gte' && param !== 'filter.v.price.lte') {
            const checkbox = document.querySelector(`input[name="${param}"][value="${value}"]`);
            if (checkbox) {
              const labelElement = checkbox.closest('label');
              const labelText = labelElement ? labelElement.querySelector('span').textContent : value;
              appliedFilters.push({
                type: param,
                label: labelText,
                param: param,
                value: value
              });
            }
          }
        }

        // Check color and size filters specifically
        const colorFilters = urlParams.getAll('filter.v.option.color');
        const sizeFilters = urlParams.getAll('filter.v.option.size');
        
        colorFilters.forEach(color => {
          const colorItem = document.querySelector(`[data-color="${color}"]`);
          if (colorItem) {
            const colorText = colorItem.querySelector('.color-text')?.textContent || color;
            appliedFilters.push({
              type: 'filter.v.option.color',
              label: `Color: ${colorText}`,
              param: 'filter.v.option.color',
              value: color
            });
          }
        });
        
        sizeFilters.forEach(size => {
          const sizeItem = document.querySelector(`[data-size="${size}"]`);
          if (sizeItem) {
            const sizeText = sizeItem.querySelector('.size')?.textContent || size;
            appliedFilters.push({
              type: 'filter.v.option.size',
              label: `Size: ${sizeText}`,
              param: 'filter.v.option.size',
              value: size
            });
          }
        });

        // Check price range
        const minPrice = urlParams.get('filter.v.price.gte');
        const maxPrice = urlParams.get('filter.v.price.lte');
        if (minPrice && maxPrice) {
          const currencySidebar = document.querySelector('#price-min-value')?.dataset.currency;
          const currencyHorizontal = document.querySelector('#price-min-value-horizontal')?.dataset.currency;
          const currency = currencyHorizontal || currencySidebar || '$';
          appliedFilters.push({
            type: 'price',
            label: `Price: ${currency}${minPrice} - ${currency}${maxPrice}`,
            param: 'price',
            value: `${minPrice}-${maxPrice}`
          });
        }

        // Render applied filters
        appliedFilters.forEach(filter => {
          const filterTag = document.createElement('span');
          filterTag.className = 'filter-tag';
          filterTag.innerHTML = `
            <i class="icon icon-close" data-filter-type="${filter.type}" data-param="${filter.param}" data-value="${filter.value}"></i>
            ${filter.label}
          `;
          appliedFiltersContainer.appendChild(filterTag);
        });
      } else {
        // Ensure existing Liquid-rendered filters have proper data attributes for JavaScript functionality
        existingFilters.forEach(filterTag => {
          const closeIcon = filterTag.querySelector('.icon-close');
          if (closeIcon && !closeIcon.dataset.filterType) {
            // Add missing data attributes if they don't exist
            const filterText = filterTag.textContent.trim();
            if (filterText.includes('Availability:')) {
              const isInStock = filterText.includes('In stock');
              closeIcon.dataset.filterType = 'availability';
              closeIcon.dataset.param = 'filter.v.availability';
              closeIcon.dataset.value = isInStock ? '1' : '0';
            } else if (filterText.includes('Price:')) {
              closeIcon.dataset.filterType = 'price';
              closeIcon.dataset.param = 'price';
              // Extract price range from text
              const priceMatch = filterText.match(/\$(\d+)\s*-\s*\$(\d+)/);
              if (priceMatch) {
                closeIcon.dataset.value = `${priceMatch[1]}-${priceMatch[2]}`;
              }
            } else if (filterText.includes('Color:')) {
              const colorValue = filterText.replace('Color:', '').trim();
              closeIcon.dataset.filterType = 'filter.v.option.color';
              closeIcon.dataset.param = 'filter.v.option.color';
              closeIcon.dataset.value = colorValue;
            } else if (filterText.includes('Size:')) {
              const sizeValue = filterText.replace('Size:', '').trim();
              closeIcon.dataset.filterType = 'filter.v.option.size';
              closeIcon.dataset.param = 'filter.v.option.size';
              closeIcon.dataset.value = sizeValue;
            }
          }
        });
      }

      // Count total applied filters (both Liquid-rendered and JavaScript-rendered)
      const totalFilters = appliedFiltersContainer.querySelectorAll('.filter-tag').length;

      // Show/hide clear all button
      const clearAllBtn = document.getElementById('remove-all');
      if (clearAllBtn) {
        clearAllBtn.style.display = totalFilters > 0 ? 'block' : 'none';
      }
      
      // Show/hide meta-filter-shop container
      if (metaFilterShop) {
        metaFilterShop.style.display = totalFilters > 0 ? 'flex' : 'none';
      }
      
      console.log('updateAppliedFiltersDisplay - final total filters:', totalFilters, 'meta-filter-shop display:', metaFilterShop ? metaFilterShop.style.display : 'N/A');
    }

    // Main function to update products with filters and sort
    async function updateProducts(filters = null, sort = null, page = 1, skipFilterDisplayUpdate = false) {
      console.log('updateProducts called with:', { filters, sort, page, isLoading });
      if (isLoading) {
        console.log('Already loading, returning early');
        return;
      }
      isLoading = true;

      try {
        // Show loading state
        if (productGrid) {
          productGrid.style.opacity = '0.6';
          productGrid.style.pointerEvents = 'none';
        }
        if (productList) {
          productList.style.opacity = '0.6';
          productList.style.pointerEvents = 'none';
        }

        // Add loading indicator
        const loadingIndicator = document.createElement('div');
        loadingIndicator.className = 'loading-indicator';
        loadingIndicator.innerHTML = `
          <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
          </div>
        `;
        loadingIndicator.style.cssText = `
          position: fixed;
          top: 50%;
          left: 50%;
          transform: translate(-50%, -50%);
          z-index: 9999;
          background: rgba(255, 255, 255, 0.9);
          padding: 20px;
          border-radius: 8px;
          box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        `;
        document.body.appendChild(loadingIndicator);

        const url = new URL(window.location.href);
        console.log('Original URL:', url.toString());
        
        // Update filters
        if (filters) {
          console.log('Updating filters:', filters);
          // Clear existing filter parameters
          for (const param of url.searchParams.keys()) {
            if (param.startsWith('filter.v.')) {
              url.searchParams.delete(param);
            }
          }
          
          // Add new filter parameters
          for (const [key, value] of Object.entries(filters)) {
            if (value !== null && value !== undefined && value !== '') {
              url.searchParams.set(key, value);
            }
          }
        }

        // Update sort
        if (sort) {
          url.searchParams.set('sort_by', sort);
          currentSort = sort;
        }

        // Update page - add page parameter for AJAX request but handle URL differently
        if (page > 1) {
          url.searchParams.set('page', page);
        } else {
          url.searchParams.delete('page');
        }
        
        console.log('Final URL for AJAX request:', url.toString());

        // Fetch updated content
        console.log('Making fetch request to:', url.toString());
        const response = await fetch(url.toString());
        console.log('Fetch response status:', response.status, response.ok);
        if (!response.ok) throw new Error('Network response was not ok');
        
        const html = await response.text();
        console.log('Response HTML length:', html.length);
        const parser = new DOMParser();
        const doc = parser.parseFromString(html, 'text/html');

        // Update product grids
        const newGrid = doc.querySelector('.tf-grid-layout');
        const newList = doc.querySelector('.tf-list-layout');
        
        console.log('Found new grid:', !!newGrid, 'Found new list:', !!newList);
        console.log('New grid products count:', newGrid ? newGrid.querySelectorAll('.loadItem').length : 0);
        console.log('New list products count:', newList ? newList.querySelectorAll('.loadItem').length : 0);
        
        if (newGrid && productGrid) {
          if (page > 1) {
            console.log('Appending products for page:', page);
            // Append for pagination
            const loadMoreContainer = productGrid.querySelector('.wd-load');
            if (loadMoreContainer) {
              const newProducts = newGrid.querySelectorAll('.loadItem');
              console.log('Appending', newProducts.length, 'new products');
              newProducts.forEach(product => {
                productGrid.insertBefore(product, loadMoreContainer);
              });
            } else {
              console.log('No load more container found, appending to end');
              const newProducts = newGrid.querySelectorAll('.loadItem');
              newProducts.forEach(product => {
                productGrid.appendChild(product);
              });
            }
          } else {
            console.log('Replacing products for first page');
            // Replace for filtering/sorting
            productGrid.innerHTML = newGrid.innerHTML;
          }
        }
        
        if (newList && productList) {
          if (page > 1) {
            // Append for pagination
            const loadMoreContainer = productList.querySelector('.wd-load');
            if (loadMoreContainer) {
              const newProducts = newList.querySelectorAll('.loadItem');
              newProducts.forEach(product => {
                productList.insertBefore(product, loadMoreContainer);
              });
            }
          } else {
            // Replace for filtering/sorting
            productList.innerHTML = newList.innerHTML;
          }
        }

        // Check if no products were found and show appropriate message
        const gridProducts = productGrid ? productGrid.querySelectorAll('.loadItem') : [];
        const listProducts = productList ? productList.querySelectorAll('.loadItem') : [];
        
        if (gridProducts.length === 0 && listProducts.length === 0 && page === 1) {
          // No products found - show no products message
          const noProductsHTML = `
            <div class="no-products-found">
              <div class="no-products-content">
                <div class="no-products-icon">
                  <svg width="64" height="64" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M9 22H15C20 22 22 20 22 15V9C22 4 20 2 15 2H9C4 2 2 4 2 9V15C2 20 4 22 9 22Z" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                    <path d="M9.5 8.96997C9.5 8.96997 10.5 8.96997 11.5 9.96997C12.5 10.97 12.5 12.97 12.5 12.97" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                    <path d="M14.5 8.96997C14.5 8.96997 13.5 8.96997 12.5 9.96997C11.5 10.97 11.5 12.97 11.5 12.97" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                    <path d="M9.5 15.03C9.5 15.03 10.5 15.03 11.5 16.03C12.5 17.03 12.5 19.03 12.5 19.03" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                    <path d="M14.5 15.03C14.5 15.03 13.5 15.03 12.5 16.03C11.5 17.03 11.5 19.03 11.5 19.03" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                  </svg>
                </div>
                <h3 class="no-products-title">No products found</h3>
                <p class="no-products-description">We couldn't find any products matching your criteria. Try adjusting your filters or browse our other collections.</p>
                <div class="no-products-actions">
                  <a href="/collections" class="tf-btn btn-out-line-dark2">Browse all collections</a>
                </div>
              </div>
            </div>
          `;
          
          if (productGrid) {
            productGrid.innerHTML = noProductsHTML;
            // Remove grid layout classes when no products
            productGrid.className = 'wrapper-shop';
          }
          if (productList) {
            productList.innerHTML = noProductsHTML;
          }
          
          // Hide shop controls when no products found
          const shopControl = document.querySelector('.tf-shop-control');
          const metaFilterShop = document.querySelector('.meta-filter-shop');
          if (shopControl) shopControl.style.display = 'none';
          if (metaFilterShop) metaFilterShop.style.display = 'none';
        } else {
          // Show shop controls when products are found
          const shopControl = document.querySelector('.tf-shop-control');
          const metaFilterShop = document.querySelector('.meta-filter-shop');
          if (shopControl) shopControl.style.display = '';
          if (metaFilterShop) metaFilterShop.style.display = '';
          
          // Restore grid layout classes when products are found
          if (productGrid && !productGrid.classList.contains('tf-grid-layout')) {
            const defaultColumns = productGrid.dataset.defaultColumns || '4';
            productGrid.className = `wrapper-shop tf-grid-layout tf-col-${defaultColumns}`;
          }
        }

        // Update product counts
        const newCountGrid = doc.getElementById('product-count-grid');
        const newCountList = doc.getElementById('product-count-list');
        
        // Calculate actual product counts from the new content
        const newGridProducts = newGrid ? newGrid.querySelectorAll('.loadItem') : [];
        const newListProducts = newList ? newList.querySelectorAll('.loadItem') : [];
        
        // Update product count displays based on current layout
        if (productCountGrid) {
          const countSpan = productCountGrid.querySelector('.count');
          if (countSpan) {
            countSpan.textContent = newGridProducts.length;
          }
          // Show/hide based on current layout
          const isGridActive = !productList || productList.style.display === 'none';
          productCountGrid.style.display = isGridActive ? 'block' : 'none';
        }
        
        if (productCountList) {
          const countSpan = productCountList.querySelector('.count');
          if (countSpan) {
            countSpan.textContent = newListProducts.length;
          }
          // Show/hide based on current layout
          const isListActive = productList && productList.style.display === 'block';
          productCountList.style.display = isListActive ? 'block' : 'none';
        }

        // Show/hide meta-filter-shop based on whether there are applied filters
        if (metaFilterShop) {
          const hasFilters = Object.keys(filters || {}).length > 0 || url.searchParams.toString().length > 0;
          metaFilterShop.style.display = hasFilters ? 'flex' : 'none';
        }

        // Update URL without reload - but not for infinite scroll page changes
        const currentPaginationType = document.querySelector('.wrapper-control-shop')?.dataset.paginationType;
        if (currentPaginationType !== 'infinite_scroll' || page === 1) {
          // Only update URL for non-infinite scroll or first page
          window.history.pushState({}, '', url.toString());
        }
        
        // Always update current filters
        currentFilters = new URLSearchParams(url.search);
        
        // Update applied filters display - but only if we're not skipping it
        if (!skipFilterDisplayUpdate) {
          updateAppliedFiltersDisplay();
        }
        
        // Update sort display
        if (sortValueDisplay && sort) {
          sortValueDisplay.textContent = sort.replace(/-/g, ' ').replace(/\b\w/g, l => l.toUpperCase());
        }

        // Reinitialize event listeners
        initializeProductEvents();
        
        // Ensure pagination is visible
        ensurePaginationVisibility();
        
        // Check if there are more pages and update pagination/load more buttons
        const hasNextPage = doc.querySelector('.wd-load');
        const newPagination = doc.querySelector('.wg-pagination');
        
        if (page > 1) {
          // For pagination, update the pagination element if it exists
          if (newPagination) {
            const currentPagination = productGrid ? productGrid.querySelector('.wg-pagination') : null;
            if (currentPagination) {
              currentPagination.innerHTML = newPagination.innerHTML;
            }
          }
          
          // Remove load more buttons if no more products
          if (!hasNextPage) {
            const loadMoreBtns = document.querySelectorAll('.wd-load');
            loadMoreBtns.forEach(btn => btn.remove());
          }
        } else {
          // For first page, replace pagination/load more elements
          if (newPagination) {
            const currentPagination = productGrid ? productGrid.querySelector('.wg-pagination') : null;
            if (currentPagination) {
              currentPagination.innerHTML = newPagination.innerHTML;
            } else {
              // Create new pagination if it doesn't exist
              if (productGrid) {
                productGrid.appendChild(newPagination.cloneNode(true));
              }
            }
          }
          
          // Update load more buttons
          const newLoadMore = doc.querySelector('.wd-load');
          const currentLoadMore = productGrid ? productGrid.querySelector('.wd-load') : null;
          if (newLoadMore && currentLoadMore) {
            currentLoadMore.innerHTML = newLoadMore.innerHTML;
          } else if (newLoadMore && !currentLoadMore) {
            // Add new load more button if it doesn't exist
            if (productGrid) {
              productGrid.appendChild(newLoadMore);
            }
          } else if (!newLoadMore && currentLoadMore) {
            // Remove load more button if no more pages
            currentLoadMore.remove();
          }
        }

        // Handle infinite scroll specific logic
        const infiniteScrollType = document.querySelector('.wrapper-control-shop')?.dataset.paginationType;
        if (infiniteScrollType === 'infinite_scroll') {
          // For infinite scroll, we need to handle the sentinel element differently
          if (page > 1) {
            // Move the sentinel element to the end of the new products
            const sentinelElement = document.getElementById('infiniteScrollLoader');
            if (sentinelElement) {
              const targetLayout = listLayout && listLayout.style.display === 'block' ? listLayout : gridLayout;
              if (targetLayout) {
                targetLayout.appendChild(sentinelElement);
              }
            }
          }
          
          // If no more pages, remove the sentinel element and disconnect observer
          if (!hasNextPage) {
            const sentinelElement = document.getElementById('infiniteScrollLoader');
            if (sentinelElement) {
              sentinelElement.remove();
            }
            if (window.infiniteScrollObserver) {
              window.infiniteScrollObserver.disconnect();
              console.log('Infinite scroll observer disconnected - no more pages');
            }
          } else {
            // Reinitialize infinite scroll observer for the new sentinel element
            setTimeout(() => {
              initializeInfiniteScroll();
            }, 100);
          }
        }

              } catch (error) {
          console.error('Error updating products:', error);
          // Show error message to user
          const errorMessage = document.createElement('div');
          errorMessage.className = 'alert alert-danger';
          errorMessage.textContent = 'An error occurred while updating the products. Please try again.';
          errorMessage.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 9999;
            max-width: 300px;
          `;
          document.body.appendChild(errorMessage);
          setTimeout(() => errorMessage.remove(), 5000);
        } finally {
          console.log('updateProducts finally block - setting isLoading to false');
          isLoading = false;
          // Restore opacity and pointer events
          if (productGrid) {
            productGrid.style.opacity = '1';
            productGrid.style.pointerEvents = 'auto';
          }
          if (productList) {
            productList.style.opacity = '1';
            productList.style.pointerEvents = 'auto';
          }
          // Remove loading indicator
          const loadingIndicator = document.querySelector('.loading-indicator');
          if (loadingIndicator) {
            loadingIndicator.remove();
          }
        }
    }

    // Handle sort selection
    const sortItems = document.querySelectorAll('.select-item');
    sortItems.forEach(item => {
      item.addEventListener('click', function() {
        const sortValue = this.dataset.sortValue;
        
        // Update active state
        sortItems.forEach(s => s.classList.remove('active'));
        this.classList.add('active');
        
        // Update products
        updateProducts(null, sortValue);
        
        // Close dropdown
        if (sortDropdown) {
          const dropdown = bootstrap.Dropdown.getInstance(sortDropdown);
          if (dropdown) dropdown.hide();
        }
      });
    });

    // Handle layout switching
    const layoutSwitches = document.querySelectorAll('.tf-view-layout-switch');
    const listLayout = document.getElementById('listLayout');
    const gridLayout = document.getElementById('gridLayout');

    layoutSwitches.forEach(switchEl => {
      switchEl.addEventListener('click', function() {
        const layout = this.dataset.valueLayout;
        
        // Update active state
        layoutSwitches.forEach(s => s.classList.remove('active'));
        this.classList.add('active');

        // Show/hide layouts
        if (listLayout && gridLayout) {
          const hasProducts = gridLayout.querySelector('.card-product');

          listLayout.style.display = layout === 'list' ? 'block' : 'none';
          gridLayout.style.display = layout === 'list' ? 'none' : '';
          
          if (layout !== 'list' && hasProducts) {
            gridLayout.classList.remove('tf-col-2', 'tf-col-3', 'tf-col-4');
            if (!gridLayout.classList.contains('tf-grid-layout')) {
              gridLayout.classList.add('tf-grid-layout');
            }
            gridLayout.classList.add(layout);
          }
          
          // Update product count visibility based on layout
          if (productCountGrid) {
            productCountGrid.style.display = layout === 'list' ? 'none' : 'block';
          }
          if (productCountList) {
            productCountList.style.display = layout === 'list' ? 'block' : 'none';
          }
        }
      });
    });

    // Handle filter checkbox changes
    const filterCheckboxes = document.querySelectorAll('.filter-checkbox');
    filterCheckboxes.forEach(checkbox => {
      checkbox.addEventListener('change', function() {
        // Handle availability filters - make them mutually exclusive
        if (this.name === 'filter.v.availability') {
          const availabilityCheckboxes = document.querySelectorAll('input[name="filter.v.availability"]');
          availabilityCheckboxes.forEach(cb => {
            if (cb !== this) {
              cb.checked = false;
            }
          });
        }
        
        // Submit the form instead of using JavaScript URL manipulation
        const form = document.getElementById('collection-filters-form');
        if (form) {
          form.submit();
        }
      });
    });

    // Handle color filter clicks in horizontal filter
    document.addEventListener('click', function(e) {
      if (e.target.closest('.color-check')) {
        const colorItem = e.target.closest('.color-check');
        const checkbox = colorItem.querySelector('.filter-checkbox');
        const colorValue = colorItem.dataset.color;
        
        // Toggle the checkbox
        checkbox.checked = !checkbox.checked;
        
        // Toggle active class
        colorItem.classList.toggle('active', checkbox.checked);
        
        // Submit the form instead of using JavaScript URL manipulation
        const form = document.getElementById('collection-filters-form');
        if (form) {
          form.submit();
        }
      }
      
      if (e.target.closest('.size-check')) {
        const sizeItem = e.target.closest('.size-check');
        const checkbox = sizeItem.querySelector('.filter-checkbox');
        const sizeValue = sizeItem.dataset.size;
        
        // Toggle the checkbox
        checkbox.checked = !checkbox.checked;
        
        // Toggle active class
        sizeItem.classList.toggle('active', checkbox.checked);
        
        // Submit the form instead of using JavaScript URL manipulation
        const form = document.getElementById('collection-filters-form');
        if (form) {
          form.submit();
        }
      }
    });

    // Handle reset price button
    document.querySelectorAll('.reset-price').forEach(resetPriceBtn => {
      resetPriceBtn.addEventListener('click', function() {
        // Reset sidebar price range
        const priceRangeSidebar = document.getElementById('price-value-range');
        if (priceRangeSidebar && priceRangeSidebar.noUiSlider) {
          const minPrice = parseInt(priceRangeSidebar.dataset.rangeMin);
          const maxPrice = parseInt(priceRangeSidebar.dataset.rangeMax);
          priceRangeSidebar.noUiSlider.set([minPrice, maxPrice]);
        }
        // Reset horizontal price range
        const priceRangeHorizontal = document.getElementById('price-value-range-horizontal');
        if (priceRangeHorizontal && priceRangeHorizontal.noUiSlider) {
          const minPrice = parseInt(priceRangeHorizontal.dataset.rangeMin);
          const maxPrice = parseInt(priceRangeHorizontal.dataset.rangeMax);
          priceRangeHorizontal.noUiSlider.set([minPrice, maxPrice]);
        }
        // Submit the form
        const form = document.getElementById('collection-filters-form');
        if (form) {
          form.submit();
        }
      });
    });

    // Handle individual filter tag removal
    document.addEventListener('click', function(e) {
      if (e.target.classList.contains('icon-close') || e.target.closest('.icon-close')) {
        const closeIcon = e.target.classList.contains('icon-close') ? e.target : e.target.closest('.icon-close');
        const filterTag = closeIcon.closest('.filter-tag');
        
        if (filterTag) {
          const filterType = closeIcon.dataset.filterType;
          const filterParam = closeIcon.dataset.param;
          const filterValue = closeIcon.dataset.value;
          
          console.log('Removing filter:', { filterType, filterParam, filterValue });
          
          // Remove specific filter
          if (filterType === 'availability') {
            const availabilityCheckboxes = document.querySelectorAll('input[name="filter.v.availability"]');
            availabilityCheckboxes.forEach(cb => {
              cb.checked = false;
            });
          } else if (filterType === 'price') {
            // Reset price range - both sidebar and horizontal
            const priceRangeSidebar = document.getElementById('price-value-range');
            if (priceRangeSidebar && priceRangeSidebar.noUiSlider) {
              const minPrice = parseInt(priceRangeSidebar.dataset.rangeMin);
              const maxPrice = parseInt(priceRangeSidebar.dataset.rangeMax);
              priceRangeSidebar.noUiSlider.set([minPrice, maxPrice]);
            }
            
            const priceRangeHorizontal = document.getElementById('price-value-range-horizontal');
            if (priceRangeHorizontal && priceRangeHorizontal.noUiSlider) {
              const minPrice = parseInt(priceRangeHorizontal.dataset.rangeMin);
              const maxPrice = parseInt(priceRangeHorizontal.dataset.rangeMax);
              priceRangeHorizontal.noUiSlider.set([minPrice, maxPrice]);
            }
          } else if (filterType === 'filter.v.option.color') {
            // Remove color filter
            const colorItem = document.querySelector(`[data-color="${filterValue}"]`);
            if (colorItem) {
              const checkbox = colorItem.querySelector('.filter-checkbox');
              if (checkbox) {
                checkbox.checked = false;
              }
              colorItem.classList.remove('active');
            }
          } else if (filterType === 'filter.v.option.size') {
            // Remove size filter
            const sizeItem = document.querySelector(`[data-size="${filterValue}"]`);
            if (sizeItem) {
              const checkbox = sizeItem.querySelector('.filter-checkbox');
              if (checkbox) {
                checkbox.checked = false;
              }
              sizeItem.classList.remove('active');
            }
          } else {
            // Remove specific checkbox filter
            const checkbox = document.querySelector(`input[name="${filterParam}"][value="${filterValue}"]`);
            if (checkbox) {
              checkbox.checked = false;
            }
          }
          
          // Remove the filter tag from DOM immediately
          filterTag.remove();
          
          // Update the display to show/hide meta-filter-shop and clear all button
          const remainingFilters = document.querySelectorAll('.filter-tag');
          const clearAllBtn = document.getElementById('remove-all');
          
          if (clearAllBtn) {
            clearAllBtn.style.display = remainingFilters.length > 0 ? 'block' : 'none';
          }
          
          if (metaFilterShop) {
            metaFilterShop.style.display = remainingFilters.length > 0 ? 'flex' : 'none';
          }
          
          // Collect remaining filters and update products
          const filters = {};
          const checkboxes = document.querySelectorAll('.filter-checkbox');
          checkboxes.forEach(cb => {
            if (cb.checked) {
              filters[cb.name] = cb.value;
            }
          });
          
          // Add price filters if they exist
          const minPriceSidebar = document.getElementById('price-min-input')?.value;
          const maxPriceSidebar = document.getElementById('price-max-input')?.value;
          const minPriceHorizontal = document.getElementById('price-min-input-horizontal')?.value;
          const maxPriceHorizontal = document.getElementById('price-max-input-horizontal')?.value;
          
          // Use whichever price range is available
          const minPrice = minPriceHorizontal || minPriceSidebar;
          const maxPrice = maxPriceHorizontal || maxPriceSidebar;
          
          if (minPrice && maxPrice) {
            const rangeMinSidebar = parseInt(document.getElementById('price-value-range')?.dataset.rangeMin);
            const rangeMaxSidebar = parseInt(document.getElementById('price-value-range')?.dataset.rangeMax);
            const rangeMinHorizontal = parseInt(document.getElementById('price-value-range-horizontal')?.dataset.rangeMin);
            const rangeMaxHorizontal = parseInt(document.getElementById('price-value-range-horizontal')?.dataset.rangeMax);
            
            const rangeMin = rangeMinHorizontal || rangeMinSidebar;
            const rangeMax = rangeMaxHorizontal || rangeMaxSidebar;
            
            if (parseInt(minPrice) > rangeMin || parseInt(maxPrice) < rangeMax) {
              filters['filter.v.price.gte'] = minPrice;
              filters['filter.v.price.lte'] = maxPrice;
            }
          }
          
          console.log('Remaining filters after removal:', filters);
          
          // Update URL and products with remaining filters
          const url = new URL(window.location.href);
          
          // Clear existing filter parameters
          for (const param of url.searchParams.keys()) {
            if (param.startsWith('filter.v.')) {
              url.searchParams.delete(param);
            }
          }
          
          // Add remaining filter parameters
          for (const [key, value] of Object.entries(filters)) {
            if (value !== null && value !== undefined && value !== '') {
              url.searchParams.set(key, value);
            }
          }
          
          // Update URL without triggering updateAppliedFiltersDisplay
          window.history.pushState({}, '', url.toString());
          currentFilters = new URLSearchParams(url.search);
          
          // Update products with remaining filters
          updateProducts(filters, currentSort, 1, true); // Pass true to skip filter display update
        }
      }
    });

    // Handle clear all filters
    const clearAllBtn = document.getElementById('remove-all');
    if (clearAllBtn) {
      clearAllBtn.addEventListener('click', function() {
        // Uncheck all checkboxes
        const checkboxes = document.querySelectorAll('.filter-checkbox');
        checkboxes.forEach(cb => {
          cb.checked = false;
        });
        
        // Reset color and size filters
        const colorItems = document.querySelectorAll('.color-check');
        colorItems.forEach(item => {
          item.classList.remove('active');
          const checkbox = item.querySelector('.filter-checkbox');
          if (checkbox) {
            checkbox.checked = false;
          }
        });
        
        const sizeItems = document.querySelectorAll('.size-check');
        sizeItems.forEach(item => {
          item.classList.remove('active');
          const checkbox = item.querySelector('.filter-checkbox');
          if (checkbox) {
            checkbox.checked = false;
          }
        });
        
        // Reset price range - both sidebar and horizontal
        const priceRangeSidebar = document.getElementById('price-value-range');
        if (priceRangeSidebar && priceRangeSidebar.noUiSlider) {
          const minPrice = parseInt(priceRangeSidebar.dataset.rangeMin);
          const maxPrice = parseInt(priceRangeSidebar.dataset.rangeMax);
          priceRangeSidebar.noUiSlider.set([minPrice, maxPrice]);
        }
        
        const priceRangeHorizontal = document.getElementById('price-value-range-horizontal');
        if (priceRangeHorizontal && priceRangeHorizontal.noUiSlider) {
          const minPrice = parseInt(priceRangeHorizontal.dataset.rangeMin);
          const maxPrice = parseInt(priceRangeHorizontal.dataset.rangeMax);
          priceRangeHorizontal.noUiSlider.set([minPrice, maxPrice]);
        }
        
        // Remove all filter tags from DOM
        const filterTags = document.querySelectorAll('.filter-tag');
        filterTags.forEach(tag => tag.remove());
        
        // Hide meta-filter-shop and clear all button
        if (metaFilterShop) {
          metaFilterShop.style.display = 'none';
        }
        if (clearAllBtn) {
          clearAllBtn.style.display = 'none';
        }
        
        // Update URL and products
        const url = new URL(window.location.href);
        
        // Clear all filter parameters
        for (const param of url.searchParams.keys()) {
          if (param.startsWith('filter.v.')) {
            url.searchParams.delete(param);
          }
        }
        
        // Update URL without triggering updateAppliedFiltersDisplay
        window.history.pushState({}, '', url.toString());
        currentFilters = new URLSearchParams(url.search);
        
        // Update products with no filters
        updateProducts({}, currentSort, 1, true);
      });
    }

    // Handle load more functionality
    const loadMoreListBtn = document.getElementById('loadMoreListBtn');
    const loadMoreGridBtn = document.getElementById('loadMoreGridBtn');

    async function loadMoreProducts(layout) {
      console.log('loadMoreProducts called with layout:', layout, 'isLoading:', isLoading);
      if (isLoading) {
        console.log('Already loading, returning early from loadMoreProducts');
        return;
      }
      
      currentPage++;
      console.log('Loading more products, page:', currentPage);
      
      const filters = {};
      const checkboxes = document.querySelectorAll('.filter-checkbox');
      checkboxes.forEach(cb => {
        if (cb.checked) {
          filters[cb.name] = cb.value;
        }
      });
      
      console.log('Current filters:', filters);
      
      // Add price filters - check both sidebar and horizontal
      const minPriceSidebar = document.getElementById('price-min-input')?.value;
      const maxPriceSidebar = document.getElementById('price-max-input')?.value;
      const minPriceHorizontal = document.getElementById('price-min-input-horizontal')?.value;
      const maxPriceHorizontal = document.getElementById('price-max-input-horizontal')?.value;
      
      // Use whichever price range is available
      const minPrice = minPriceHorizontal || minPriceSidebar;
      const maxPrice = maxPriceHorizontal || maxPriceSidebar;
      
      if (minPrice && maxPrice) {
        filters['filter.v.price.gte'] = minPrice;
        filters['filter.v.price.lte'] = maxPrice;
      }
      
      console.log('Final filters for loadMoreProducts:', filters);
      await updateProducts(filters, currentSort, currentPage);
    }

    if (loadMoreListBtn) {
      loadMoreListBtn.addEventListener('click', () => loadMoreProducts('list'));
    }

    if (loadMoreGridBtn) {
      loadMoreGridBtn.addEventListener('click', () => loadMoreProducts('grid'));
    }

    // Initialize infinite scroll if enabled
    function initializeInfiniteScroll() {
      console.log('initializeInfiniteScroll called');
      const scrollPaginationType = document.querySelector('.wrapper-control-shop')?.dataset.paginationType;
      console.log('Pagination type:', scrollPaginationType);
      if (scrollPaginationType !== 'infinite_scroll') {
        console.log('Not infinite scroll, returning');
        return;
      }

      // Remove existing observer if any
      if (window.infiniteScrollObserver) {
        window.infiniteScrollObserver.disconnect();
      }

      const options = {
        root: null,
        rootMargin: '200px',
        threshold: 0.1
      };

      window.infiniteScrollObserver = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          console.log('Intersection observer triggered:', entry.isIntersecting, 'isLoading:', isLoading, 'target:', entry.target);
          if (entry.isIntersecting && !isLoading) {
            const layout = listLayout && listLayout.style.display === 'block' ? 'list' : 'grid';
            console.log('Loading more products via infinite scroll, layout:', layout);
            loadMoreProducts(layout);
          } else {
            console.log('Intersection observer triggered but not loading because:', {
              isIntersecting: entry.isIntersecting,
              isLoading: isLoading
            });
          }
        });
      }, options);

      // Observe the infinite scroll loader or create a sentinel element
      let sentinelElement = document.getElementById('infiniteScrollLoader');
      
      if (!sentinelElement) {
        // Create a sentinel element if it doesn't exist
        sentinelElement = document.createElement('div');
        sentinelElement.id = 'infiniteScrollLoader';
        sentinelElement.style.height = '20px';
        sentinelElement.style.width = '100%';
        sentinelElement.style.display = 'block';
        
        // Add to the appropriate layout
        const targetLayout = listLayout && listLayout.style.display === 'block' ? listLayout : gridLayout;
        if (targetLayout) {
          targetLayout.appendChild(sentinelElement);
        }
      } else {
        // Ensure the existing loader is visible
        sentinelElement.style.display = 'block';
      }

      if (sentinelElement) {
        window.infiniteScrollObserver.observe(sentinelElement);
        console.log('Infinite scroll observer initialized, observing:', sentinelElement);
        console.log('Sentinel element display style:', window.getComputedStyle(sentinelElement).display);
        console.log('Sentinel element visibility:', window.getComputedStyle(sentinelElement).visibility);
      } else {
        console.log('No sentinel element found!');
      }
    }

    // Initialize product-specific event listeners
    function initializeProductEvents() {
      // Add any product-specific event listeners here
      // For example, quick view, add to cart, etc.
      
      // Handle pagination links - ensure they work correctly
      const paginationLinks = document.querySelectorAll('.wg-pagination a');
      paginationLinks.forEach(link => {
        link.addEventListener('click', function(e) {
          // Allow normal navigation for pagination links
          // The href will handle the page change
          // No need to prevent default or use AJAX for pagination
        });
      });
      
      // Re-observe for infinite scroll
      if (document.querySelector('[data-pagination-type="infinite_scroll"]')) {
        initializeInfiniteScroll();
      }
    }

    // Function to ensure pagination is visible
    function ensurePaginationVisibility() {
      const pagination = document.querySelector('.wg-pagination');
      if (pagination) {
        // Ensure pagination is visible
        if (window.getComputedStyle(pagination).display === 'none') {
          pagination.style.display = 'flex';
          console.log('Pagination was hidden, made visible');
        }
        
        // Ensure pagination links are clickable
        const paginationLinks = pagination.querySelectorAll('a');
        paginationLinks.forEach(link => {
          if (window.getComputedStyle(link).pointerEvents === 'none') {
            link.style.pointerEvents = 'auto';
          }
        });
      }
    }

    // Initialize everything
    function initializeAll() {
      // Initialize price range slider first
      initializePriceRangeSlider();
      
      // Initialize filter state with a small delay to ensure Liquid-rendered filters are present
      setTimeout(() => {
        initializeFilterState();
      }, 50);
      
      // Initialize product events
      initializeProductEvents();
      
      // Initialize infinite scroll with a delay to ensure DOM is ready
      setTimeout(() => {
        initializeInfiniteScroll();
      }, 200);
      
      // Initialize product count visibility based on default layout
      // const defaultView = '{{ section.settings.default_view | default: "grid" }}';
      // if (productCountGrid) {
      //   productCountGrid.style.display = defaultView === 'list' ? 'none' : 'block';
      // }
      // if (productCountList) {
      //   productCountList.style.display = defaultView === 'list' ? 'block' : 'none';
      // }
      
      // Debug: Check if pagination exists and is visible
      const pagination = document.querySelector('.wg-pagination');
      if (pagination) {
        // Ensure pagination is visible
        if (window.getComputedStyle(pagination).display === 'none') {
          pagination.style.display = 'flex';
        }
      }
      
      // Check current page from URL
      const urlParams = new URLSearchParams(window.location.search);
      const currentPageParam = urlParams.get('page');
      if (currentPageParam) {
        currentPage = parseInt(currentPageParam);
        
        // If we're on page 2 or higher, ensure pagination is visible
        if (currentPage > 1) {
          setTimeout(() => {
            ensurePaginationVisibility();
          }, 200);
        }
      }
      
      // Ensure pagination is not hidden by any CSS or JavaScript
      setTimeout(() => {
        const paginationAfterDelay = document.querySelector('.wg-pagination');
        if (paginationAfterDelay && window.getComputedStyle(paginationAfterDelay).display === 'none') {
          paginationAfterDelay.style.display = 'flex';
          console.log('Pagination was hidden after delay, made visible');
        }
        ensurePaginationVisibility();
      }, 100);
    }

    // Wait for DOM and dependencies to be ready
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', initializeAll);
    } else {
      // DOM is already ready, but wait a bit for noUiSlider to be available
      setTimeout(initializeAll, 100);
    }
  });
</script>

{% schema %}
{
  "name": "Collection",
  "settings": [
    {
      "type": "select",
      "id": "width",
      "label": "Section width",
      "options": [
        {
          "value": "full",
          "label": "Full width"
        },
        {
          "value": "boxed",
          "label": "Boxed"
        }
      ],
      "default": "boxed"
    },
    {
      "type": "range",
      "id": "padding_top",
      "label": "Padding top",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "default": 36
    },
    {
      "type": "range",
      "id": "padding_bottom",
      "label": "Padding bottom",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "default": 36
    },
    {
      "type": "select",
      "id": "filter_type",
      "label": "Filter Type",
      "options": [
        {
          "value": "drawer",
          "label": "Drawer"
        },
        {
          "value": "left",
          "label": "Left Sidebar"
        },
        {
          "value": "right",
          "label": "Right Sidebar"
        },
        {
          "value": "horizontal",
          "label": "Horizontal"
        }
      ],
      "default": "drawer"
    },
    {
      "type": "select",
      "id": "default_grid_columns",
      "label": "Default Grid Columns",
      "options": [
        {
          "value": "3",
          "label": "3 Columns"
        },
        {
          "value": "4",
          "label": "4 Columns"
        }
      ],
      "default": "4"
    },
    {
      "type": "range",
      "id": "products_per_page",
      "label": "Products per page",
      "min": 8,
      "max": 48,
      "step": 4,
      "default": 12
    },
    {
      "type": "select",
      "id": "pagination_type",
      "label": "Pagination Type",
      "options": [
        {
          "value": "pagination",
          "label": "Pagination"
        },
        {
          "value": "load_more",
          "label": "Load More"
        },
        {
          "value": "infinite_scroll",
          "label": "Infinite Scroll"
        }
      ],
      "default": "pagination"
    },
    {
      "type": "header",
      "content": "On Sale Section"
    },
    {
      "type": "checkbox",
      "id": "show_on_sale",
      "label": "Show On Sale Section",
      "default": true
    },
    {
      "type": "text",
      "id": "on_sale_title",
      "label": "On Sale Title",
      "default": "On sale"
    },
    {
      "type": "select",
      "id": "on_sale_source",
      "label": "On Sale Products Source",
      "options": [
        {
          "value": "collection",
          "label": "Current Collection"
        },
        {
          "value": "product_list",
          "label": "Specific Products"
        }
      ],
      "default": "collection"
    },
    {
      "type": "product_list",
      "id": "on_sale_products",
      "label": "On Sale Products",
      "info": "Select specific products to show in the on sale section"
    },
    {
      "type": "header",
      "content": "Banner Section"
    },
    {
      "type": "checkbox",
      "id": "show_banner",
      "label": "Show Banner",
      "default": true
    },
    {
      "type": "image_picker",
      "id": "filter_banner",
      "label": "Banner Image"
    },
    {
      "type": "text",
      "id": "banner_title",
      "label": "Banner Title",
      "default": "Elevate\nYour Style"
    },
    {
      "type": "text",
      "id": "banner_button_text",
      "label": "Button Text",
      "default": "Shop Now"
    },
    {
      "type": "url",
      "id": "banner_button_url",
      "label": "Button Link"
    },
    {
      "type": "header",
      "content": "Filter collections"
    },
    {
      "type": "text",
      "id": "collections_title",
      "label": "Collections Title",
      "default": "Collections",
      "info": "Not show if blank"
    },
    {
      "type": "radio",
      "id": "categories_mode",
      "label": "Show all / Show a link list",
      "options": [
        { "value": "all", "label": "Show all" },
        { "value": "link_list", "label": "Show link list" }
      ],
      "default": "all"
    },
    {
      "type": "link_list",
      "id": "categories_link_list",
      "label": "Choose link list"
    },
    {
      "type": "checkbox",
      "id": "categories_show_count",
      "label": "Show count",
      "default": false
    },
    {
      "type": "header",
      "content": "Description Section"
    },
    {
      "type": "checkbox",
      "id": "show_description",
      "label": "Show Description Section",
      "default": true
    },
    {
      "type": "range",
      "id": "description_padding_top",
      "label": "Description padding top",
      "min": 0,
      "max": 200,
      "step": 4,
      "unit": "px",
      "default": 0
    },
    {
      "type": "range",
      "id": "description_padding_bottom",
      "label": "Description padding bottom",
      "min": 0,
      "max": 200,
      "step": 4,
      "unit": "px",
      "default": 100
    },
    {
      "type": "text",
      "id": "related_collections_text",
      "label": "Related Collections Text",
      "default": "Looking for more? Don't miss out on our other exciting collections for"
    },
    {
      "type": "collection",
      "id": "related_collection_1",
      "label": "First Related Collection"
    },
    {
      "type": "collection",
      "id": "related_collection_2",
      "label": "Second Related Collection"
    }
  ],
  "presets": [
    {
      "name": "Collection",
      "category": "Collection",
      "settings": {
        "width": "boxed",
        "padding_top": 36,
        "padding_bottom": 36,
        "filter_type": "drawer",
        "default_grid_columns": "4",
        "products_per_page": 12,
        "pagination_type": "pagination",
        "collections_title": "Collections",
        "show_on_sale": true,
        "on_sale_title": "On sale",
        "show_banner": true,
        "banner_title": "Elevate\nYour Style",
        "banner_button_text": "Shop Now"
      }
    }
  ]
}
{% endschema %}