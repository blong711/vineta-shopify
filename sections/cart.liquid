{%- comment -%}Cart Section{%- endcomment -%}
<div class="flat-spacing-24">
  <div class="container">
    <div class="row justify-content-center">
      <div class="col-xl-4 col-sm-8">
        {% for block in section.blocks %}
          {% if block.type == 'shipping_progress' %}
            <div class="tf-cart-head text-center" {{ block.shopify_attributes }}>
              <p class="text-xl-3 title text-dark-4">
                {% if cart.total_price >= block.settings.free_shipping_threshold %}
                  {{ block.settings.free_shipping_message }}
                {% else %}
                  {{ block.settings.progress_message | replace: '[amount]', block.settings.free_shipping_threshold | minus: cart.total_price | money }}
                {% endif %}
          </p>
          <div class="progress-sold tf-progress-ship">
                <div class="value" style="width: {{ cart.total_price | times: 100.0 | divided_by: block.settings.free_shipping_threshold | at_most: 100 }}%;" data-progress="{{ cart.total_price | times: 100.0 | divided_by: block.settings.free_shipping_threshold | at_most: 100 }}">
              <i class="icon icon-car"></i>
            </div>
          </div>
        </div>
          {% endif %}
        {% endfor %}
      </div>
    </div>
  </div>
</div>

<div class="flat-spacing-2 pt-0"> 
  <div class="container">
    <div class="row">
      <div class="col-xl-8">
        <div class="tf-page-cart-main">
          {% if cart.item_count > 0 %}
            <form action="/cart" method="post" id="cart-form" class="form-cart">
              {% for block in section.blocks %}
                {% if block.type == 'cart_items' %}
                  <table class="table-page-cart" {{ block.shopify_attributes }}>
                <thead>
                  <tr>
                        <th>{{ block.settings.product_column_title }}</th>
                        <th>{{ block.settings.price_column_title }}</th>
                        <th>{{ block.settings.quantity_column_title }}</th>
                        <th>{{ block.settings.total_column_title }}</th>
                  </tr>
                </thead>
                <tbody>
                  {% for item in cart.items %}
                    <tr class="tf-cart-item file-delete" data-item-id="{{ item.key }}" data-variant-id="{{ item.variant.id }}">
                      <td class="tf-cart-item_product">
                        <a href="{{ item.url }}" class="img-box">
                          <img src="{{ item.image | img_url: '150x' }}" 
                               srcset="{{ item.image | img_url: '100x' }} 100w,
                                       {{ item.image | img_url: '150x' }} 150w,
                                       {{ item.image | img_url: '200x' }} 200w"
                               sizes="(max-width: 768px) 100px, 150px"
                               alt="{{ item.title | escape }}" 
                               loading="lazy" 
                               width="150" 
                               height="150">
                        </a>
                        <div class="cart-info">
                          <a href="{{ item.url }}" class="name text-md link fw-medium">{{ item.product.title }}</a>
                          {% if item.product.has_only_default_variant == false %}
                            <div class="variants">{{ item.variant.title }}</div>
                          {% endif %}
                              <span class="remove-cart link remove" data-item-id="{{ item.key }}" data-variant-id="{{ item.variant.id }}">{{ block.settings.remove_text }}</span>
                        </div>
                      </td>
                          <td class="tf-cart-item_price text-center" data-cart-title="{{ block.settings.price_column_title }}">
                        <span class="cart-price price-on-sale text-md fw-medium">{{ item.final_price | money }}</span>
                        {% if item.original_price != item.final_price %}
                          <span class="compare-price">{{ item.original_price | money }}</span>
                        {% endif %}
                      </td>
                          <td class="tf-cart-item_quantity" data-cart-title="{{ block.settings.quantity_column_title }}">
                        <div class="wg-quantity">
                          <span class="btn-quantity btn-decrease">-</span>
                          <input class="quantity-product" type="text" name="updates[]" value="{{ item.quantity }}" min="0">
                          <span class="btn-quantity btn-increase">+</span>
                        </div>
                      </td>
                          <td class="tf-cart-item_total text-center" data-cart-title="{{ block.settings.total_column_title }}">
                        <div class="cart-total total-price text-md fw-medium">{{ item.final_line_price | money }}</div>
                      </td>
                    </tr>
                  {% endfor %}
                </tbody>
              </table>
                {% endif %}
              {% endfor %}

              {% for block in section.blocks %}
                {% if block.type == 'gift_wrap' %}
                  <div class="check-gift" {{ block.shopify_attributes }}>
                    <!-- gift_wrap_product: {{ block.settings.gift_wrap_product }} -->
                    <!-- all_products: {{ all_products[block.settings.gift_wrap_product] | json }} -->
                     <!-- all_products: {{ all_products[block.settings.gift_wrap_product].variants[0].id }} -->
                    <input type="checkbox" class="tf-check" id="checkGift"
                      data-variant-id="{% if block.settings.gift_wrap_variant_id != blank %}{{ block.settings.gift_wrap_variant_id }}{% elsif all_products[block.settings.gift_wrap_product] and all_products[block.settings.gift_wrap_product].variants.size > 0 %}{{ all_products[block.settings.gift_wrap_product].variants[0].id }}{% endif %}">
                    {% assign gift_price = block.settings.gift_wrap_price | money %}
                    <label for="checkGift" class="label text-dark-4">{{ block.settings.gift_wrap_text | replace: '[price]', gift_price }}</label>
                  </div>
                {% endif %}
              {% endfor %}

              {% for block in section.blocks %}
                {% if block.type == 'discount_code' %}
                  <div class="box-ip-discount" {{ block.shopify_attributes }}>
                    <input type="text" placeholder="{{ block.settings.placeholder_text }}" name="discount_code">
                    <button type="button" class="tf-btn radius-6 btn-out-line-dark-2">{{ block.settings.button_text }}</button>
              </div>
                {% endif %}
              {% endfor %}

              {% for block in section.blocks %}
                {% if block.type == 'cart_note' %}
                  <div class="cart-note" {{ block.shopify_attributes }}>
                    <label for="note" class="text-md fw-medium">{{ block.settings.label_text }}</label>
                <textarea id="note" name="note">{{ cart.note }}</textarea>
              </div>
                {% endif %}
              {% endfor %}
            </form>

            {% for block in section.blocks %}
              {% if block.type == 'features' %}
                <div class="fl-iconbox wow fadeInUp" {{ block.shopify_attributes }}>
              <div dir="ltr" class="swiper tf-swiper sw-auto" data-swiper='{
                "slidesPerView": 1,
                "spaceBetween": 12,
                "speed": 800,
                "observer": true,
                "observeParents": true,
                "slidesPerGroup": 1,
                "pagination": { "el": ".sw-pagination-iconbox", "clickable": true },
                "breakpoints": {
                  "575": { "slidesPerView": 2, "spaceBetween": 12, "slidesPerGroup": 2},
                  "768": { "slidesPerView": 3, "spaceBetween": 24, "slidesPerGroup": 3},
                  "1200": { "slidesPerView": "auto", "spaceBetween": 24}
                }
              }'>
                <div class="swiper-wrapper">
                      {% if block.settings.feature1_title != blank %}
                  <div class="swiper-slide">
                    <div class="tf-icon-box justify-content-center justify-content-sm-start style-3">
                      <div class="box-icon">
                              <i class="icon {{ block.settings.feature1_icon }}"></i>
                      </div>
                      <div class="content">
                              <div class="title text-uppercase">{{ block.settings.feature1_title }}</div>
                      </div>
                    </div>
                  </div>
                      {% endif %}
                      {% if block.settings.feature2_title != blank %}
                  <div class="swiper-slide">
                    <div class="tf-icon-box justify-content-center justify-content-sm-start style-3">
                      <div class="box-icon">
                              <i class="icon {{ block.settings.feature2_icon }}"></i>
                      </div>
                      <div class="content">
                              <div class="title text-uppercase">{{ block.settings.feature2_title }}</div>
                      </div>
                    </div>
                  </div>
                      {% endif %}
                      {% if block.settings.feature3_title != blank %}
                  <div class="swiper-slide">
                    <div class="tf-icon-box justify-content-center justify-content-sm-start style-3">
                      <div class="box-icon">
                              <i class="icon {{ block.settings.feature3_icon }}"></i>
                      </div>
                      <div class="content">
                              <div class="title text-uppercase">{{ block.settings.feature3_title }}</div>
                      </div>
                    </div>
                  </div>
                      {% endif %}
                      {% if block.settings.feature4_title != blank %}
                  <div class="swiper-slide">
                    <div class="tf-icon-box justify-content-center justify-content-sm-start style-3">
                      <div class="box-icon">
                              <i class="icon {{ block.settings.feature4_icon }}"></i>
                      </div>
                      <div class="content">
                              <div class="title text-uppercase">{{ block.settings.feature4_title }}</div>
                      </div>
                    </div>
                  </div>
                      {% endif %}
                </div>
              </div>
              <div class="d-flex d-xl-none sw-dot-default sw-pagination-iconbox justify-content-center"></div>
            </div>
              {% endif %}
            {% endfor %}
          {% else %}
            {% for block in section.blocks %}
              {% if block.type == 'empty_cart' %}
                <div class="empty-cart text-center" {{ block.shopify_attributes }}>
                  <p class="text-lg">{{ block.settings.empty_cart_message }}</p>
                  <a href="{{ block.settings.continue_shopping_url }}" class="tf-btn btn-dark2 animate-btn">{{ block.settings.continue_shopping_text }}</a>
            </div>
              {% endif %}
            {% endfor %}
          {% endif %}
        </div>
      </div>

      <div class="col-xl-4">
        <div class="tf-page-cart-sidebar">
          {% for block in section.blocks %}
            {% if block.type == 'shipping_estimates' %}
              <form class="cart-box shipping-cart-box" {{ block.shopify_attributes }}>
                <div class="text-lg title fw-medium">{{ block.settings.title }}</div>
            <fieldset class="field">
                  <label for="country" class="text-sm">{{ block.settings.country_label }}</label>
                  <input type="text" id="country" placeholder="{{ block.settings.country_placeholder }}">
            </fieldset>
            <fieldset class="field">
                  <label for="state" class="text-sm">{{ block.settings.state_label }}</label>
                  <input type="text" id="state" placeholder="{{ block.settings.state_placeholder }}">
            </fieldset>
            <fieldset class="field">
                  <label for="code" class="text-sm">{{ block.settings.zipcode_label }}</label>
                  <input type="text" id="code" placeholder="{{ block.settings.zipcode_placeholder }}">
            </fieldset>
                <button type="button" class="tf-btn btn-dark2 animate-btn w-100">{{ block.settings.button_text }}</button>
          </form>
            {% endif %}
          {% endfor %}

          <form action="/checkout" method="post" class="cart-box checkout-cart-box" id="checkout-form">
            {% for block in section.blocks %}
              {% if block.type == 'checkout' %}
                <div class="cart-head" {{ block.shopify_attributes }}>
              <div class="total-discount text-xl fw-medium">
                    <span>{{ block.settings.total_label }}:</span>
                <span class="total">{{ cart.total_price | money }}</span>
              </div>
                  <p class="text-sm text-dark-4">{{ block.settings.tax_message }}</p>
            </div>

            <div class="check-agree">
              <input type="checkbox" class="tf-check" id="check-agree" required>
                  <label for="check-agree" class="label text-dark-4">{{ block.settings.terms_text | replace: '[terms_url]', block.settings.terms_url }}</label>
            </div>

            <div class="checkout-btn">
                  <button type="submit" class="tf-btn btn-dark2 animate-btn w-100" id="checkout-button" disabled>{{ block.settings.checkout_button_text }}</button>
            </div>
              {% endif %}
            {% endfor %}

            {% for block in section.blocks %}
              {% if block.type == 'payment_methods' %}
                <div class="cart-imgtrust" {{ block.shopify_attributes }}>
                  <p class="text-center text-sm text-dark-1">{{ block.settings.title }}</p>
              <div class="cart-list-social">
                    {% assign payment_icons = block.settings.payment_icons | split: ',' %}
                    {% if block.settings.payment_icons == blank %}
                      {% for icon in shop.enabled_payment_types %}
                <div class="payment-card">
                          <img src="{{ icon | payment_type_img_url }}"
                               alt="{{ icon | capitalize }}"
                               width="{{ block.settings.payment_icons_size }}"
                               height="{{ block.settings.payment_icons_size }}"
                               class="icon">
                </div>
                      {% endfor %}
                    {% else %}
                      {% for icon in payment_icons %}
                        {% assign icon_name = icon | strip %}
                        {% if icon_name != blank %}
                <div class="payment-card">
                            <img src="{{ icon_name | payment_type_img_url }}"
                                 alt="{{ icon_name | capitalize }}"
                                 width="{{ block.settings.payment_icons_size }}"
                                 height="{{ block.settings.payment_icons_size }}"
                                 class="icon">
                </div>
                        {% endif %}
                      {% endfor %}
                    {% endif %}
                </div>
                </div>
              {% endif %}
            {% endfor %}
          </form>

          {% for block in section.blocks %}
            {% if block.type == 'testimonial' %}
              <div class="cart-box testimonial-cart-box" {{ block.shopify_attributes }}>
            <div dir="ltr" class="swiper tf-swiper" data-swiper='{
              "slidesPerView": 1,
              "spaceBetween": 12,
              "speed": 800,
              "pagination": { "el": ".sw-pagination-iconbox", "clickable": true },
              "navigation": {
                "clickable": true,
                "nextEl": ".nav-next-tes",
                "prevEl": ".nav-prev-tes"
              }
            }'>
              <div class="swiper-wrapper">
                    {% if block.settings.testimonial1_review != blank %}
                    <div class="swiper-slide">
                      <div class="box-testimonial-main">
                        <span class="quote icon-quote5"></span>
                        <div class="content">
                          <div class="list-star-default">
                            {% for i in (1..5) %}
                              <i class="icon-star"></i>
                            {% endfor %}
                          </div>
                            <div class="text-review text-md text-main">{{ block.settings.testimonial1_review }}</div>
                          <div class="box-author">
                              {% if block.settings.testimonial1_author_image %}
                            <div class="img">
                                  <img src="{{ block.settings.testimonial1_author_image | img_url: '100x' }}" alt="{{ block.settings.testimonial1_author_name }}" width="100" height="100">
                            </div>
                              {% endif %}
                              <span class="name text-sm fw-medium">{{ block.settings.testimonial1_author_name }}</span>
                          </div>
                        </div>
                      </div>
                    </div>
                  {% endif %}
                    {% if block.settings.testimonial2_review != blank %}
                      <div class="swiper-slide">
                        <div class="box-testimonial-main">
                          <span class="quote icon-quote5"></span>
                          <div class="content">
                            <div class="list-star-default">
                              {% for i in (1..5) %}
                                <i class="icon-star"></i>
                {% endfor %}
                            </div>
                            <div class="text-review text-md text-main">{{ block.settings.testimonial2_review }}</div>
                            <div class="box-author">
                              {% if block.settings.testimonial2_author_image %}
                                <div class="img">
                                  <img src="{{ block.settings.testimonial2_author_image | img_url: '100x' }}" alt="{{ block.settings.testimonial2_author_name }}" width="100" height="100">
                                </div>
                              {% endif %}
                              <span class="name text-sm fw-medium">{{ block.settings.testimonial2_author_name }}</span>
                            </div>
                          </div>
                        </div>
                      </div>
                    {% endif %}
                    {% if block.settings.testimonial3_review != blank %}
                      <div class="swiper-slide">
                        <div class="box-testimonial-main">
                          <span class="quote icon-quote5"></span>
                          <div class="content">
                            <div class="list-star-default">
                              {% for i in (1..5) %}
                                <i class="icon-star"></i>
                              {% endfor %}
                            </div>
                            <div class="text-review text-md text-main">{{ block.settings.testimonial3_review }}</div>
                            <div class="box-author">
                              {% if block.settings.testimonial3_author_image %}
                                <div class="img">
                                  <img src="{{ block.settings.testimonial3_author_image | img_url: '100x' }}" alt="{{ block.settings.testimonial3_author_name }}" width="100" height="100">
                                </div>
                              {% endif %}
                              <span class="name text-sm fw-medium">{{ block.settings.testimonial3_author_name }}</span>
                            </div>
                          </div>
                        </div>
                      </div>
                    {% endif %}
              </div>
              <div class="box-nav-swiper">
                <div class="swiper-button-prev nav-swiper nav-prev-tes"></div>
                <div class="swiper-button-next nav-swiper nav-next-tes"></div>
              </div>
            </div>
          </div>
            {% endif %}
          {% endfor %}
        </div>
      </div>
    </div>
  </div>
</div>

{% schema %}
{
  "name": "Cart",
  "tag": "section",
  "class": "cart-section",
  "blocks": [
    {
      "type": "shipping_progress",
      "name": "Shipping Progress",
      "limit": 1,
  "settings": [
    {
          "type": "text",
          "id": "progress_message",
          "label": "Progress Message",
          "default": "Spend [amount] more to get Free Shipping"
        },
        {
          "type": "text",
          "id": "free_shipping_message",
          "label": "Free Shipping Message",
          "default": "Congratulations! You've unlocked Free Shipping"
        },
        {
          "type": "number",
          "id": "free_shipping_threshold",
          "label": "Free Shipping Threshold",
          "default": 10000
        }
      ]
    },
    {
      "type": "cart_items",
      "name": "Cart Items",
      "limit": 1,
      "settings": [
        {
          "type": "text",
          "id": "product_column_title",
          "label": "Product Column Title",
          "default": "Product"
        },
        {
          "type": "text",
          "id": "price_column_title",
          "label": "Price Column Title",
          "default": "Price"
        },
        {
          "type": "text",
          "id": "quantity_column_title",
          "label": "Quantity Column Title",
          "default": "Quantity"
        },
        {
          "type": "text",
          "id": "total_column_title",
          "label": "Total Column Title",
          "default": "Total"
        },
        {
          "type": "text",
          "id": "remove_text",
          "label": "Remove Text",
          "default": "Remove"
        }
      ]
    },
    {
      "type": "gift_wrap",
      "name": "Gift Wrap",
      "limit": 1,
      "settings": [
        {
          "type": "text",
          "id": "gift_wrap_text",
          "label": "Gift Wrap Text",
          "default": "Add gift wrap. Only [price]. (You can choose or not)"
        },
        {
          "type": "number",
          "id": "gift_wrap_price",
          "label": "Gift Wrap Price",
          "default": 1000
        },
        {
          "type": "product",
          "id": "gift_wrap_product",
          "label": "Gift Wrap Product",
          "info": "Select the product to use for gift wrapping."
        },
        {
          "type": "text",
          "id": "gift_wrap_variant_id",
          "label": "Gift Wrap Variant ID (optional)",
          "info": "If your gift wrap product has multiple variants, enter the variant ID to use. Leave blank to use the first variant."
        }
      ]
    },
    {
      "type": "discount_code",
      "name": "Discount Code",
      "limit": 1,
      "settings": [
        {
          "type": "text",
          "id": "placeholder_text",
          "label": "Placeholder Text",
          "default": "Discount code"
        },
        {
          "type": "text",
          "id": "button_text",
          "label": "Button Text",
          "default": "Apply"
        }
      ]
    },
    {
      "type": "cart_note",
      "name": "Cart Note",
      "limit": 1,
      "settings": [
        {
          "type": "text",
          "id": "label_text",
          "label": "Label Text",
          "default": "Special instructions for seller"
        }
      ]
    },
    {
      "type": "features",
      "name": "Features",
      "limit": 1,
      "settings": [
        {
          "type": "header",
          "content": "Feature 1"
        },
        {
          "type": "select",
          "id": "feature1_icon",
          "label": "Icon",
          "options": [
            {
              "value": "icon-shipping",
              "label": "Shipping"
            },
            {
              "value": "icon-gift",
              "label": "Gift"
            },
            {
              "value": "icon-return",
              "label": "Return"
            },
            {
              "value": "icon-support",
              "label": "Support"
            },
            {
              "value": "icon-shield",
              "label": "Shield"
            },
            {
              "value": "icon-truck",
              "label": "Truck"
            },
            {
              "value": "icon-box",
              "label": "Box"
            },
            {
              "value": "icon-check",
              "label": "Check"
            },
            {
              "value": "icon-star",
              "label": "Star"
            },
            {
              "value": "icon-heart",
              "label": "Heart"
            }
          ],
          "default": "icon-shipping"
        },
        {
          "type": "text",
          "id": "feature1_title",
          "label": "Title",
          "default": "Free Shipping"
        },
        {
          "type": "header",
          "content": "Feature 2"
        },
        {
          "type": "select",
          "id": "feature2_icon",
          "label": "Icon",
          "options": [
            {
              "value": "icon-shipping",
              "label": "Shipping"
            },
            {
              "value": "icon-gift",
              "label": "Gift"
            },
            {
              "value": "icon-return",
              "label": "Return"
            },
            {
              "value": "icon-support",
              "label": "Support"
            },
            {
              "value": "icon-shield",
              "label": "Shield"
            },
            {
              "value": "icon-truck",
              "label": "Truck"
            },
            {
              "value": "icon-box",
              "label": "Box"
            },
            {
              "value": "icon-check",
              "label": "Check"
            },
            {
              "value": "icon-star",
              "label": "Star"
            },
            {
              "value": "icon-heart",
              "label": "Heart"
            }
          ],
          "default": "icon-gift"
        },
        {
          "type": "text",
          "id": "feature2_title",
          "label": "Title",
          "default": "Gift Package"
        },
        {
          "type": "header",
          "content": "Feature 3"
        },
        {
          "type": "select",
          "id": "feature3_icon",
          "label": "Icon",
          "options": [
            {
              "value": "icon-shipping",
              "label": "Shipping"
            },
            {
              "value": "icon-gift",
              "label": "Gift"
            },
            {
              "value": "icon-return",
              "label": "Return"
            },
            {
              "value": "icon-support",
              "label": "Support"
            },
            {
              "value": "icon-shield",
              "label": "Shield"
            },
            {
              "value": "icon-truck",
              "label": "Truck"
            },
            {
              "value": "icon-box",
              "label": "Box"
            },
            {
              "value": "icon-check",
              "label": "Check"
            },
            {
              "value": "icon-star",
              "label": "Star"
            },
            {
              "value": "icon-heart",
              "label": "Heart"
            }
          ],
          "default": "icon-return"
        },
        {
          "type": "text",
          "id": "feature3_title",
          "label": "Title",
          "default": "Ease Returns"
        },
        {
          "type": "header",
          "content": "Feature 4"
        },
        {
          "type": "select",
          "id": "feature4_icon",
          "label": "Icon",
          "options": [
            {
              "value": "icon-shipping",
              "label": "Shipping"
            },
            {
              "value": "icon-gift",
              "label": "Gift"
            },
            {
              "value": "icon-return",
              "label": "Return"
            },
            {
              "value": "icon-support",
              "label": "Support"
            },
            {
              "value": "icon-shield",
              "label": "Shield"
            },
            {
              "value": "icon-truck",
              "label": "Truck"
            },
            {
              "value": "icon-box",
              "label": "Box"
            },
            {
              "value": "icon-check",
              "label": "Check"
            },
            {
              "value": "icon-star",
              "label": "Star"
            },
            {
              "value": "icon-heart",
              "label": "Heart"
            }
          ],
          "default": "icon-support"
        },
        {
          "type": "text",
          "id": "feature4_title",
          "label": "Title",
          "default": "ONE YEAR WARRANTY"
        }
      ]
    },
    {
      "type": "empty_cart",
      "name": "Empty Cart",
      "limit": 1,
      "settings": [
        {
          "type": "text",
          "id": "empty_cart_message",
          "label": "Empty Cart Message",
          "default": "Your cart is currently empty."
        },
        {
          "type": "text",
          "id": "continue_shopping_text",
          "label": "Continue Shopping Text",
          "default": "Continue shopping"
        },
        {
          "type": "url",
          "id": "continue_shopping_url",
          "label": "Continue Shopping URL",
          "default": "/collections/all"
        }
      ]
    },
    {
      "type": "shipping_estimates",
      "name": "Shipping Estimates",
      "limit": 1,
      "settings": [
        {
          "type": "text",
          "id": "title",
          "label": "Title",
          "default": "Shipping estimates"
        },
        {
          "type": "text",
          "id": "country_label",
          "label": "Country Label",
          "default": "Country"
        },
        {
          "type": "text",
          "id": "country_placeholder",
          "label": "Country Placeholder",
          "default": "United State"
        },
        {
          "type": "text",
          "id": "state_label",
          "label": "State Label",
          "default": "State/Province"
        },
        {
          "type": "text",
          "id": "state_placeholder",
          "label": "State Placeholder",
          "default": "State/Province"
        },
        {
          "type": "text",
          "id": "zipcode_label",
          "label": "Zipcode Label",
          "default": "Zipcode"
        },
        {
          "type": "text",
          "id": "zipcode_placeholder",
          "label": "Zipcode Placeholder",
          "default": "41000"
        },
        {
          "type": "text",
          "id": "button_text",
          "label": "Button Text",
          "default": "Estimate"
        }
      ]
    },
    {
      "type": "checkout",
      "name": "Checkout",
      "limit": 1,
      "settings": [
        {
          "type": "text",
          "id": "total_label",
          "label": "Total Label",
          "default": "Total"
        },
        {
          "type": "text",
          "id": "tax_message",
          "label": "Tax Message",
          "default": "Taxes and shipping calculated at checkout"
        },
        {
          "type": "text",
          "id": "terms_text",
          "label": "Terms Text",
          "default": "I agree with terms and conditions"
        },
        {
          "type": "text",
          "id": "terms_url",
          "label": "Terms URL",
          "default": "/pages/terms-and-conditions"
        },
        {
          "type": "text",
          "id": "checkout_button_text",
          "label": "Checkout Button Text",
          "default": "Checkout"
        }
      ]
    },
    {
      "type": "payment_methods",
      "name": "Payment Methods",
      "limit": 1,
      "settings": [
        {
          "type": "text",
          "id": "title",
          "label": "Title",
          "default": "We accept"
        },
        {
          "type": "text",
          "id": "payment_icons",
          "label": "Payment Icons",
          "info": "Enter payment types separated by commas (e.g., visa, mastercard, paypal)",
          "default": "visa, mastercard, paypal, stripe"
        },
        {
          "type": "range",
          "id": "payment_icons_size",
          "min": 20,
          "max": 50,
          "step": 2,
          "unit": "px",
          "label": "Payment Icons Size",
          "default": 40
        }
      ]
    },
    {
      "type": "testimonial",
      "name": "Testimonial",
      "limit": 1,
      "settings": [
        {
          "type": "header",
          "content": "Testimonial 1"
        },
        {
          "type": "richtext",
          "id": "testimonial1_review",
          "label": "Review",
          "default": "<p>Stylish, comfortable, and perfect for any occasion! My new favorite fashion destination.</p>"
        },
        {
          "type": "text",
          "id": "testimonial1_author_name",
          "label": "Author Name",
          "default": "Customer Name"
        },
        {
          "type": "image_picker",
          "id": "testimonial1_author_image",
          "label": "Author Image"
        },
        {
          "type": "header",
          "content": "Testimonial 2"
        },
        {
          "type": "richtext",
          "id": "testimonial2_review",
          "label": "Review"
        },
        {
          "type": "text",
          "id": "testimonial2_author_name",
          "label": "Author Name"
        },
        {
          "type": "image_picker",
          "id": "testimonial2_author_image",
          "label": "Author Image"
        },
        {
          "type": "header",
          "content": "Testimonial 3"
        },
        {
          "type": "richtext",
          "id": "testimonial3_review",
          "label": "Review"
        },
        {
          "type": "text",
          "id": "testimonial3_author_name",
          "label": "Author Name"
        },
        {
          "type": "image_picker",
          "id": "testimonial3_author_image",
          "label": "Author Image"
        }
      ]
    }
  ]
}
{% endschema %}

{% javascript %}
document.addEventListener('DOMContentLoaded', function() {
  // Function to update shipping progress
  // Function to update shipping threshold progress
  function updateShippingProgress() {
    const cartTotal = parseFloat(document.querySelector('.total').textContent.replace(/[^0-9.-]+/g, ''));
    const threshold = 100; // $100 threshold
    const progress = Math.min(100, (cartTotal / threshold) * 100);
    const progressBar = document.querySelector('.tf-progress-ship .value');
    const progressText = document.querySelector('.tf-cart-head .title');
    
    if (progressBar) {
      progressBar.style.width = progress + '%';
      progressBar.setAttribute('data-progress', progress);
    }
    
    if (progressText) {
      if (cartTotal >= threshold) {
        progressText.innerHTML = 'Congratulations! You\'ve unlocked <span class="fw-medium">Free Shipping</span>';
      } else {
        const remaining = threshold - cartTotal;
        progressText.innerHTML = `Spend <span class="fw-medium">$${remaining.toFixed(2)}</span> more to get <span class="fw-medium">Free Shipping</span>`;
      }
    }
  }

  // Update progress on page load
  updateShippingProgress();

  // Update progress when cart changes
  document.addEventListener('cart:change', function(e) {
    if (e.detail && e.detail.cart) {
      updateShippingProgress();
    }
  });

  // Function to fetch and update cart data
  async function fetchCartData() {
    try {
      const response = await fetch('/cart.js');
      const cartData = await response.json();
      
      // Update cart items with proper image data
      cartData.items.forEach(item => {
        const cartItem = document.querySelector(`[data-variant-id="${item.variant_id}"]`);
        if (cartItem) {
          const imgElement = cartItem.querySelector('.img-box img');
          if (imgElement && item.image) {
            imgElement.src = item.image;
            imgElement.alt = item.title;
          }
        }
      });

      // Update cart totals
      const cartTotal = document.querySelector('.total');
      if (cartTotal) {
        cartTotal.textContent = (cartData.total_price / 100).toFixed(2);
      }

      // Update cart count
      const cartCount = document.querySelector('.cart-count');
      if (cartCount) {
        cartCount.textContent = cartData.item_count;
      }

      // Update shipping progress immediately
      updateShippingProgress();
    } catch (error) {
      console.error('Error fetching cart data:', error);
    }
  }

  // Fetch cart data on page load
  fetchCartData();

  // Update progress when cart changes
  document.addEventListener('cart:change', function(e) {
    if (e.detail && e.detail.cart) {
      setTimeout(updateShippingProgress, 100);
    }
  });

  // Also update progress when quantity changes or items are removed
  document.addEventListener('quantity:change', function() {
    setTimeout(updateShippingProgress, 100);
  });

  document.addEventListener('item:removed', function() {
    setTimeout(updateShippingProgress, 100);
  });

  // Function to update header cart count
  function updateHeaderCartCount() {
    const headerCount = document.querySelector('.count-box');
    const cartCount = document.querySelector('.cart-count');
    if (headerCount && cartCount) {
      headerCount.textContent = cartCount.textContent;
    }
  }

  // Handle remove buttons in cart
  document.querySelectorAll('.remove-cart').forEach(button => {
    button.addEventListener('click', async function(e) {
      e.preventDefault();
      const variantId = this.dataset.variantId;
      const itemId = this.dataset.itemId;
      
      if (!variantId || !window.cart) return;

      try {
        // Update UI through Cart class
        await window.cart.removeItem(variantId);
        
        // Remove the item row from the table
        const itemRow = this.closest('.tf-cart-item');
        if (itemRow) {
          itemRow.remove();
        }

        // Update cart count and total
        const cartCount = document.querySelector('.cart-count');
        const cartTotal = document.querySelector('.total');
        if (cartCount) {
          const currentCount = parseInt(cartCount.textContent);
          cartCount.textContent = currentCount - 1;
        }
        if (cartTotal) {
          const itemPrice = parseFloat(itemRow.querySelector('.cart-total').textContent.replace(/[^0-9.-]+/g, ''));
          const currentTotal = parseFloat(cartTotal.textContent.replace(/[^0-9.-]+/g, ''));
          cartTotal.textContent = `$${(currentTotal - itemPrice).toFixed(2)}`;
        }

        // Update header cart count
        updateHeaderCartCount();

        // If no items left, show empty cart message
        const tbody = document.querySelector('.table-page-cart tbody');
        if (tbody && tbody.children.length === 0) {
          const emptyCart = document.querySelector('.empty-cart');
          if (emptyCart) {
            emptyCart.style.display = 'block';
          }
        }
      } catch (error) {
        console.error('Error removing item:', error);
        alert('Failed to remove item. Please try again.');
      }
    });
  });

  // Handle quantity buttons in cart
  document.querySelectorAll('.btn-quantity').forEach(button => {
    button.addEventListener('click', async function() {
      const input = this.parentElement.querySelector('.quantity-product');
      const variantId = input.dataset.variantId;
      const itemId = this.closest('.tf-cart-item').dataset.itemId;
      const currentValue = parseInt(input.value);
      
      if (!variantId || !itemId || !window.cart) return;

      try {
        let newQuantity;
        if (this.classList.contains('btn-decrease')) {
          newQuantity = currentValue > 1 ? currentValue - 1 : 0;
        } else if (this.classList.contains('btn-increase')) {
          newQuantity = currentValue + 1;
        }

        // Update UI through Cart class
        if (newQuantity === 0) {
          await window.cart.removeItem(variantId);
          // Remove the item row from the table
          const itemRow = this.closest('.tf-cart-item');
          if (itemRow) {
            itemRow.remove();
          }
        } else {
          await window.cart.updateQuantity(variantId, newQuantity, window.cart.actions.update);
          // Update the item total
          const itemRow = this.closest('.tf-cart-item');
          if (itemRow) {
            const itemPrice = parseFloat(itemRow.querySelector('.cart-price').textContent.replace(/[^0-9.-]+/g, ''));
            const itemTotal = itemRow.querySelector('.cart-total');
            if (itemTotal) {
              itemTotal.textContent = `$${(itemPrice * newQuantity).toFixed(2)}`;
            }
          }
        }

        // Update cart count
        const cartCount = document.querySelector('.cart-count');
        if (cartCount) {
          const currentCount = parseInt(cartCount.textContent);
          cartCount.textContent = newQuantity === 0 ? currentCount - 1 : currentCount;
        }

        // Update header cart count
        updateHeaderCartCount();

        // Update cart total
        const cartTotal = document.querySelector('.total');
        if (cartTotal) {
          const itemRow = this.closest('.tf-cart-item');
          if (itemRow) {
            const itemPrice = parseFloat(itemRow.querySelector('.cart-price').textContent.replace(/[^0-9.-]+/g, ''));
            const currentTotal = parseFloat(cartTotal.textContent.replace(/[^0-9.-]+/g, ''));
            if (newQuantity === 0) {
              cartTotal.textContent = `$${(currentTotal - itemPrice).toFixed(2)}`;
            } else {
              cartTotal.textContent = `$${(currentTotal + itemPrice).toFixed(2)}`;
            }
          }
        }

        // If no items left, show empty cart message
        const tbody = document.querySelector('.table-page-cart tbody');
        if (tbody && tbody.children.length === 0) {
          const emptyCart = document.querySelector('.empty-cart');
          if (emptyCart) {
            emptyCart.style.display = 'block';
          }
        }
      } catch (error) {
        console.error('Error updating quantity:', error);
        alert('Failed to update quantity. Please try again.');
      }
    });
  });

  // Handle terms checkbox and checkout button
  const termsCheckbox = document.getElementById('check-agree');
  const checkoutButton = document.getElementById('checkout-button');
  const checkoutForm = document.getElementById('checkout-form');
  
  if (termsCheckbox && checkoutButton && checkoutForm) {
    // Initial state
    checkoutButton.disabled = true;
    
    // Handle checkbox change
    termsCheckbox.addEventListener('change', function() {
      checkoutButton.disabled = !this.checked;
    });
    
    // Handle form submission
    checkoutForm.addEventListener('submit', function(e) {
      if (!termsCheckbox.checked) {
        e.preventDefault();
        alert('Please agree to the terms and conditions before proceeding to checkout.');
      }
    });
  }

  // Handle shipping estimates
  const shippingForm = document.querySelector('.shipping-cart-box');
  const estimateButton = shippingForm?.querySelector('button[type="button"]');
  
  if (estimateButton) {
    estimateButton.addEventListener('click', async function() {
      const country = document.getElementById('country').value;
      const state = document.getElementById('state').value;
      const zipcode = document.getElementById('code').value;
      
      if (!country || !state || !zipcode) {
        alert('Please fill in all shipping fields');
        return;
      }

      try {
        const response = await fetch('/cart/shipping_rates.json', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            shipping_address: {
              country: country,
              province: state,
              zip: zipcode
            }
          })
        });

        const data = await response.json();
        if (data.shipping_rates && data.shipping_rates.length > 0) {
          // Display shipping rates
          const shippingRates = data.shipping_rates.map(rate => 
            `${rate.name}: ${rate.price}`
          ).join('\n');
          alert('Available shipping rates:\n' + shippingRates);
        } else {
          alert('No shipping rates available for this location');
        }
      } catch (error) {
        console.error('Error fetching shipping rates:', error);
        alert('Failed to calculate shipping rates. Please try again.');
      }
    });
  }

  // Handle gift wrap
  const giftWrapCheckbox = document.getElementById('checkGift');
  if (giftWrapCheckbox) {
    giftWrapCheckbox.addEventListener('change', async function() {
      const variantId = this.dataset.variantId;
      if (!variantId) return;
      try {
        if (this.checked) {
          await fetch('/cart/add.js', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              items: [{ id: variantId, quantity: 1 }]
            })
          });
        } else {
          // Remove all gift wrap items from cart
          const cartItems = await fetch('/cart.js').then(res => res.json());
          const giftWrapItem = cartItems.items.find(item => item.variant_id == variantId);
          if (giftWrapItem) {
            await fetch('/cart/change.js', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({
                id: giftWrapItem.key,
                quantity: 0
              })
            });
          }
        }
        // Fetch updated cart and update DOM
        const updatedCart = await fetch('/cart.js').then(res => res.json());
        // Update cart total
        const cartTotal = document.querySelector('.total');
        if (cartTotal) {
          if (window.Shopify && Shopify.formatMoney) {
            cartTotal.textContent = Shopify.formatMoney(updatedCart.total_price, window.theme && window.theme.moneyFormat ? window.theme.moneyFormat : "${{amount}}" );
          } else {
            cartTotal.textContent = (updatedCart.total_price / 100).toLocaleString(undefined, { style: 'currency', currency: 'USD' });
          }
        }
        // Update cart items table
        const cartTableBody = document.querySelector('.table-page-cart tbody');
        if (cartTableBody) {
          cartTableBody.innerHTML = '';
          updatedCart.items.forEach(item => {
            cartTableBody.innerHTML += `
              <tr class="tf-cart-item" data-item-id="${item.key}" data-variant-id="${item.variant_id}">
                <td class="tf-cart-item_product">
                  <a href="${item.url}" class="img-box">
                    <img src="${item.image}" alt="${item.title}" width="150" height="150">
                  </a>
                  <div class="cart-info">
                    <a href="${item.url}" class="name text-md link fw-medium">${item.product_title}</a>
                    <span class="remove-cart link remove" data-item-id="${item.key}" data-variant-id="${item.variant_id}">Remove</span>
                  </div>
                </td>
                <td class="tf-cart-item_price text-center"><span class="cart-price price-on-sale text-md fw-medium">${window.Shopify && Shopify.formatMoney ? Shopify.formatMoney(item.final_price, window.theme && window.theme.moneyFormat ? window.theme.moneyFormat : "${{amount}}") : (item.final_price / 100).toLocaleString(undefined, { style: 'currency', currency: 'USD' })}</span></td>
                <td class="tf-cart-item_quantity">
                  <div class="wg-quantity">
                    <span class="btn-quantity btn-decrease">-</span>
                    <input class="quantity-product" type="text" name="updates[]" value="${item.quantity}" min="0">
                    <span class="btn-quantity btn-increase">+</span>
                  </div>
                </td>
                <td class="tf-cart-item_total text-center"><div class="cart-total total-price text-md fw-medium">${window.Shopify && Shopify.formatMoney ? Shopify.formatMoney(item.final_line_price, window.theme && window.theme.moneyFormat ? window.theme.moneyFormat : "${{amount}}") : (item.final_line_price / 100).toLocaleString(undefined, { style: 'currency', currency: 'USD' })}</div></td>
              </tr>
            `;
          });
        }
        // Optionally, re-bind event listeners for remove/quantity buttons here
      } catch (error) {
        alert('Failed to update gift wrap. Please try again.');
      }
    });
  }

  // Handle discount code
  const discountForm = document.querySelector('.box-ip-discount');
  const discountInput = discountForm?.querySelector('input[name="discount_code"]');
  const applyButton = discountForm?.querySelector('button');
  
  if (applyButton && discountInput) {
    applyButton.addEventListener('click', async function() {
      const code = discountInput.value.trim();
      if (!code) {
        alert('Please enter a discount code');
        return;
      }

      try {
        const response = await fetch('/cart/update.js', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            discount_code: code
          })
        });

        const data = await response.json();
        if (data.token) {
          alert('Discount code applied successfully!');
          window.location.reload();
        } else {
          alert('Invalid discount code');
        }
      } catch (error) {
        console.error('Error applying discount code:', error);
        alert('Failed to apply discount code. Please try again.');
      }
    });
  }

  // Handle cart note
  const cartNote = document.getElementById('note');
  if (cartNote) {
    cartNote.addEventListener('change', async function() {
      try {
        await fetch('/cart/update.js', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            note: this.value
          })
        });
      } catch (error) {
        console.error('Error updating cart note:', error);
        alert('Failed to update cart note. Please try again.');
      }
    });
  }
});
{% endjavascript %}