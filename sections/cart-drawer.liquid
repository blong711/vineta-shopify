{%- comment -%}Cart Drawer Section{%- endcomment -%}
<div class="offcanvas offcanvas-end popup-style-1 popup-shopping-cart" id="shoppingCart">
  <div class="canvas-wrapper">
    <div class="popup-header">
      <span class="title">{{ 'cart.drawer.title' | t }}</span>
      <button class="icon-close icon-close-popup" data-bs-dismiss="offcanvas" aria-label="Close"></button>
    </div>
    <div class="wrap">
        <div class="tf-mini-cart-threshold">
          <div class="text">
          {%- assign free_shipping_threshold = section.settings.free_shipping_threshold | times: 100 -%}
          {% if cart.total_price >= free_shipping_threshold %}
            {{ section.settings.free_shipping_message }}
          {% else %}
            {{ section.settings.progress_message | replace: '[amount]', free_shipping_threshold | minus: cart.total_price | money }}
          {% endif %}
          </div>
          <div class="tf-progress-bar tf-progress-ship">
          <div class="value" style="width: {{ cart.total_price | times: 100.0 | divided_by: free_shipping_threshold | at_most: 100 }}%;" data-progress="{{ cart.total_price | times: 100.0 | divided_by: free_shipping_threshold | at_most: 100 }}">
              <i class="icon icon-car"></i>
            </div>
          </div>
        </div>
        <div class="tf-mini-cart-wrap">
          <div class="tf-mini-cart-main">
            <div class="tf-mini-cart-sroll">
              <div class="tf-mini-cart-items" style="overflow-y: auto; max-height: calc(100vh - 300px);">
                <div id="cart-items-placeholder"></div>
              </div>
            </div>
          </div>
          <div class="tf-mini-cart-bottom">
            <div class="tf-mini-cart-tool">
              {% if section.settings.enable_gift_wrap %}
              <div class="tf-mini-cart-tool-btn btn-add-gift">
                <i class="icon icon-gift2"></i>
                <div class="text-xxs">{{ 'cart.drawer.gift_wrap.title' | t }}</div>
              </div>
              {% endif %}
              {% if section.settings.enable_order_note %}
              <div class="tf-mini-cart-tool-btn btn-add-note">
                <i class="icon icon-note"></i>
                <div class="text-xxs">{{ 'cart.drawer.order_note.title' | t }}</div>
              </div>
              {% endif %}
              {% if section.settings.enable_coupon %}
              <div class="tf-mini-cart-tool-btn btn-coupon">
                <i class="icon icon-coupon"></i>
                <div class="text-xxs">{{ 'cart.drawer.coupon.title' | t }}</div>
              </div>
              {% endif %}
              {% if section.settings.enable_shipping_calculator %}
              <div class="tf-mini-cart-tool-btn btn-estimate-shipping">
                <i class="icon icon-car"></i>
                <div class="text-xxs">{{ 'cart.drawer.shipping.title' | t }}</div>
              </div>
              {% endif %}
            </div>
            <div class="tf-mini-cart-bottom-wrap">
              <div class="tf-cart-totals-discounts">
                <div class="tf-cart-total text-xl fw-medium">{{ 'cart.drawer.total' | t }}</div>
              <div class="tf-totals-total-value text-xl fw-medium cart-total-price">$0.00</div>
              </div>
              <div class="tf-cart-tax text-sm opacity-8">{{ 'cart.drawer.taxes_shipping' | t }}</div>
              <div class="tf-cart-checkbox">
                <div class="tf-checkbox-wrapp">
                  <input type="checkbox" id="CartDrawer-Form_agree" name="agree_checkbox" required>
                  <div>
                    <i class="icon-check"></i>
                  </div>
                </div>
                <label for="CartDrawer-Form_agree" class="text-sm">
                  {{ 'cart.drawer.terms_agree' | t }}
                  <a href="{{ routes.root_url }}pages/terms-and-conditions" title="Terms of Service" class="fw-medium">{{ 'cart.drawer.terms_link' | t }}</a>
                </label>
              </div>
              <div class="tf-mini-cart-view-checkout">
                <a href="{{ routes.cart_url }}" class="tf-btn animate-btn d-inline-flex bg-dark-2 w-100 justify-content-center">{{ 'cart.drawer.view_cart' | t }}</a>
                <button type="button" class="tf-btn btn-out-line-dark2 w-100 justify-content-center checkout-btn" id="checkout-button" disabled>{{ 'cart.drawer.checkout' | t }}</button>
              </div>
            </div>
          </div>
        </div>
        {% if section.settings.enable_gift_wrap %}
        <div class="tf-mini-cart-tool-openable add-gift">
          <div class="overplay tf-mini-cart-tool-close"></div>
          <form action="/cart" method="post" class="tf-mini-cart-tool-content">
            <div class="tf-mini-cart-tool-text text-sm fw-medium">{{ 'cart.drawer.gift_wrap.title' | t }}</div>
            {% assign gift_wrap_product = all_products[section.settings.gift_wrap_product] %}
            <div style="font-size: 14px;" class="tf-mini-cart-tool-text1">The product will be wrapped carefully. Fee is only 
              <span class="text fw-medium text-dark">{{ gift_wrap_product.price | money }}</span>
              . Do you want a gift wrap?
            </div>
            <input type="hidden" name="attributes[gift_wrap]" value="true">
            <div class="tf-cart-tool-btns">
              <button class="subscribe-button tf-btn animate-btn d-inline-flex bg-dark-2 w-100" type="submit">{{ 'cart.drawer.gift_wrap.save' | t }}</button>
              <div class="tf-btn btn-out-line-dark2 w-100 tf-mini-cart-tool-close">{{ 'cart.drawer.gift_wrap.close' | t }}</div>
            </div>
          </form>
        </div>
        {% endif %}
        {% if section.settings.enable_order_note %}
        <div class="tf-mini-cart-tool-openable add-note">
          <div class="overplay tf-mini-cart-tool-close"></div>
          <form action="/cart" method="post" class="tf-mini-cart-tool-content" id="cart-note-form">
            <label for="Cart-note" class="tf-mini-cart-tool-text text-sm fw-medium">{{ 'cart.drawer.order_note.title' | t }}</label>
            <textarea name="note" id="Cart-note" placeholder="{{ 'cart.drawer.order_note.placeholder' | t }}">{{ cart.note }}</textarea>
            <div class="tf-cart-tool-btns">
              <button class="subscribe-button tf-btn animate-btn d-inline-flex bg-dark-2 w-100" type="submit">{{ 'cart.drawer.order_note.save' | t }}</button>
              <div class="tf-btn btn-out-line-dark2 w-100 tf-mini-cart-tool-close">{{ 'cart.drawer.order_note.close' | t }}</div>
            </div>
          </form>
        </div>
        {% endif %}
        {% if section.settings.enable_coupon %}
        <div class="tf-mini-cart-tool-openable coupon">
          <div class="overplay tf-mini-cart-tool-close"></div>
          <form action="/cart" method="post" class="tf-mini-cart-tool-content">
            <div class="tf-mini-cart-tool-text text-sm fw-medium">{{ 'cart.drawer.coupon.title' | t }}</div>
            <div class="tf-mini-cart-tool-text1" style="font-size: 14px;">{{ 'cart.drawer.coupon.message' | t }}</div>
            <input type="text" name="discount" placeholder="{{ 'cart.drawer.coupon.placeholder' | t }}">
            <div class="tf-cart-tool-btns">
              <button class="subscribe-button tf-btn animate-btn d-inline-flex bg-dark-2 w-100" type="submit">{{ 'cart.drawer.coupon.apply' | t }}</button>
              <div class="tf-btn btn-out-line-dark2 w-100 tf-mini-cart-tool-close">{{ 'cart.drawer.coupon.cancel' | t }}</div>
            </div>
          </form>
        </div>
        {% endif %}
        {% if section.settings.enable_shipping_calculator %}
        <div class="tf-mini-cart-tool-openable estimate-shipping">
          <div class="overplay tf-mini-cart-tool-close"></div>
          <form id="shipping-form" class="tf-mini-cart-tool-content" data-shipping-calculator>
            <div class="tf-mini-cart-tool-text text-sm fw-medium">{{ 'cart.drawer.shipping.title' | t }}</div>
            <div class="field">
              <p class="text-sm">{{ 'cart.drawer.shipping.country' | t }}</p>
              <div class="tf-select">
                <select class="w-100" id="shipping-country-form" name="address[country]" data-default="{{ customer.default_address.country }}">
                  {{ country_option_tags }}
                </select>
              </div>
            </div>
            <div class="field" id="province-field-container">
              <p class="text-sm">{{ 'cart.drawer.shipping.province' | t }}</p>
              <div class="tf-select">
                <select id="shipping-province-form" name="address[province]" data-default="{{ customer.default_address.province }}"></select>
              </div>
            </div>
            <div class="field">
              <p class="text-sm">{{ 'cart.drawer.shipping.zipcode' | t }}</p>
              <input type="text" data-opend-focus id="zipcode" name="address[zip]" value="{{ customer.default_address.zip }}">
            </div>
            <div id="zipcode-message" class="error" style="display: none;"></div>
            <div id="zipcode-success" class="success" style="display: none;"></div>
            <div class="tf-cart-tool-btns">
              <button class="subscribe-button tf-btn animate-btn d-inline-flex bg-dark-2 w-100" type="submit">{{ 'cart.drawer.shipping.calculate' | t }}</button>
              <div class="tf-mini-cart-tool-primary tf-btn btn-out-line-dark2 text-center fw-6 w-100 tf-mini-cart-tool-close">{{ 'cart.drawer.shipping.cancel' | t }}</div>
            </div>
          </form>
        </div>
        {% endif %}
    </div>
  </div>
</div>

<script>
  if (Shopify.designMode) {
    document.addEventListener('shopify:section:select', function(event) {
      if (event.target.id === 'shopify-section-cart-drawer') {
        var cartDrawer = new bootstrap.Offcanvas(document.getElementById('shoppingCart'));
        cartDrawer.show();
      } else {
        // Force close the drawer by triggering the close button
        document.querySelector('#shoppingCart .icon-close-popup').click();
      }
    });
  }

  // Shipping calculator functionality
  document.addEventListener('DOMContentLoaded', function() {
    const countrySelect = document.getElementById('shipping-country-form');
    const provinceFieldContainer = document.getElementById('province-field-container');
    const provinceSelect = document.getElementById('shipping-province-form');
    const zipcodeInput = document.getElementById('zipcode');
    const zipcodeMessage = document.getElementById('zipcode-message');
    const zipcodeSuccess = document.getElementById('zipcode-success');
    const shippingForm = document.getElementById('shipping-form');
    
    // Cart note form handling
    const cartNoteForm = document.getElementById('cart-note-form');
    if (cartNoteForm) {
      cartNoteForm.addEventListener('submit', async function(event) {
        event.preventDefault();
        
        const noteTextarea = document.getElementById('Cart-note');
        const note = noteTextarea.value.trim();
        const submitButton = cartNoteForm.querySelector('button[type="submit"]');
        const originalButtonText = submitButton.textContent;
        
        // Show loading state
        submitButton.disabled = true;
        submitButton.textContent = 'Saving...';
        
        try {
          // Update cart note via AJAX
          const response = await fetch('/cart/update.js', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'X-Requested-With': 'XMLHttpRequest'
            },
            body: JSON.stringify({
              note: note
            })
          });
          
          if (!response.ok) {
            throw new Error('Failed to update cart note');
          }
          
          const cartData = await response.json();
          
          // Show success message briefly
          submitButton.textContent = 'Saved!';
          setTimeout(() => {
            submitButton.textContent = originalButtonText;
            submitButton.disabled = false;
            
            // Close the note form
            const closeButton = cartNoteForm.querySelector('.tf-mini-cart-tool-close');
            if (closeButton) {
              closeButton.click();
            }
          }, 1000);
          
        } catch (error) {
          console.error('Error updating cart note:', error);
          submitButton.textContent = 'Error - Try Again';
          setTimeout(() => {
            submitButton.textContent = originalButtonText;
            submitButton.disabled = false;
          }, 2000);
        }
      });
    }
    
    if (countrySelect && provinceFieldContainer) {
      function toggleProvinceField() {
        const selectedOption = countrySelect.options[countrySelect.selectedIndex];
        const provincesData = selectedOption.getAttribute('data-provinces');
        
        if (provincesData) {
          const provinces = JSON.parse(provincesData);
          
          if (provinces.length === 0) {
            provinceFieldContainer.style.display = 'none';
          } else {
            provinceFieldContainer.style.display = 'block';
            updateProvinceOptions(provinces);
          }
        }
      }
      
      function updateProvinceOptions(provinces) {
        provinceSelect.innerHTML = '';
        
        // Add default option
        const defaultOption = document.createElement('option');
        defaultOption.value = '';
        defaultOption.textContent = '{{ 'cart.drawer.shipping.select_province' | t }}';
        provinceSelect.appendChild(defaultOption);
        
        // Add province options
        provinces.forEach((province) => {
          const option = document.createElement('option');
          option.value = province[0];
          option.textContent = province[1];
          provinceSelect.appendChild(option);
        });
      }
      
      // Initial check
      toggleProvinceField();
      
      // Listen for country changes
      countrySelect.addEventListener('change', toggleProvinceField);
    }

    // Zipcode validation function
    function validateZipcode(zipcode, country) {
      let regex;

      switch (country) {
        case "Australia":
          regex = /^\d{4}$/;
          break;
        case "Austria":
          regex = /^\d{4}$/;
          break;
        case "Belgium":
          regex = /^\d{4}$/;
          break;
        case "Canada":
          regex = /^[A-Za-z]\d[A-Za-z][ -]?\d[A-Za-z]\d$/;
          break;
        case "Czech Republic":
          regex = /^\d{5}$/;
          break;
        case "Denmark":
          regex = /^\d{4}$/;
          break;
        case "Finland":
          regex = /^\d{5}$/;
          break;
        case "France":
          regex = /^\d{5}$/;
          break;
        case "Germany":
          regex = /^\d{5}$/;
          break;
        case "United States":
          regex = /^\d{5}(-\d{4})?$/;
          break;
        case "United Kingdom":
          regex = /^[A-Za-z]{1,2}\d[A-Za-z\d]? \d[A-Za-z]{2}$/;
          break;
        case "India":
          regex = /^\d{6}$/;
          break;
        case "Japan":
          regex = /^\d{3}-\d{4}$/;
          break;
        case "Mexico":
          regex = /^\d{5}$/;
          break;
        case "South Korea":
          regex = /^\d{5}$/;
          break;
        case "Spain":
          regex = /^\d{5}$/;
          break;
        case "Italy":
          regex = /^\d{5}$/;
          break;
        case "Vietnam":
          regex = /^\d{6}$/;
          break;
        default:
          return true;
      }

      return regex.test(zipcode);
    }

    // Format money function
    function formatMoney(cents) {
      const dollars = (cents / 100).toFixed(2);
      return `$${dollars}`;
    }

    // Handle form submission
    if (shippingForm) {
      shippingForm.addEventListener('submit', async function(event) {
        event.preventDefault();
        
        const country = countrySelect.value;
        const province = provinceSelect.value;
        const zipcode = zipcodeInput.value.trim();
        
        // Reset previous messages
        zipcodeMessage.style.display = 'none';
        zipcodeSuccess.style.display = 'none';
        zipcodeMessage.textContent = '';
        zipcodeSuccess.innerHTML = '';
        
        // Validate inputs
        if (!country) {
          zipcodeMessage.textContent = 'Please select a country.';
          zipcodeMessage.style.display = 'block';
          return;
        }
        
        if (!zipcode) {
          zipcodeMessage.textContent = 'Please enter a zipcode.';
          zipcodeMessage.style.display = 'block';
          return;
        }
        
        // Validate zipcode format
        if (!validateZipcode(zipcode, country)) {
          zipcodeMessage.textContent = 'Please enter a valid zipcode for the selected country.';
          zipcodeMessage.style.display = 'block';
          return;
        }
        
        // Show loading state
        const submitButton = shippingForm.querySelector('button[type="submit"]');
        const originalButtonText = submitButton.textContent;
        submitButton.disabled = true;
        submitButton.textContent = 'Calculating...';
        
        try {
          // Prepare shipping address
          const shippingAddress = {
            country: country,
            zip: zipcode
          };
          
          // Add province if available
          if (province) {
            shippingAddress.province = province;
          }
          
          // Fetch shipping rates from Shopify
          const response = await fetch('/cart/shipping_rates.json', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'X-Requested-With': 'XMLHttpRequest'
            },
            body: JSON.stringify({
              shipping_address: shippingAddress
            })
          });
          
          if (!response.ok) {
            throw new Error('Failed to fetch shipping rates');
          }
          
          const data = await response.json();
          
          if (data.shipping_rates && data.shipping_rates.length > 0) {
            // Display shipping rates
            let successHTML = '<p>Available shipping rates for your address:</p>';
            
            data.shipping_rates.forEach((rate, index) => {
              const price = formatMoney(rate.price);
              const deliveryTime = rate.delivery_time ? ` (${rate.delivery_time})` : '';
              successHTML += `<p class="shipping-rate">${rate.name}: <span class="price">${price}</span>${deliveryTime}</p>`;
            });
            
            zipcodeSuccess.innerHTML = successHTML;
            zipcodeSuccess.style.display = 'block';
          } else {
            zipcodeMessage.textContent = 'No shipping rates available for this address.';
            zipcodeMessage.style.display = 'block';
          }
          
        } catch (error) {
          console.error('Error fetching shipping rates:', error);
          zipcodeMessage.textContent = 'Failed to calculate shipping rates. Please try again.';
          zipcodeMessage.style.display = 'block';
        } finally {
          // Restore button state
          submitButton.disabled = false;
          submitButton.textContent = originalButtonText;
        }
      });
    }
  });
</script>

{% schema %}
{
  "name": "Cart Drawer",
  "settings": [
    {
      "type": "header",
      "content": "Free Shipping Threshold"
    },
    {
      "type": "text",
      "id": "progress_message",
      "label": "Progress Message",
      "default": "You are [amount] away from free shipping!"
    },
    {
      "type": "text",
      "id": "free_shipping_message",
      "label": "Free Shipping Message",
      "default": "You've got free shipping!"
    },
    {
      "type": "number",
      "id": "free_shipping_threshold",
      "label": "Free Shipping Threshold",
      "default": 100
    },
    {
      "type": "header",
      "content": "Cart Tools"
    },
    {
      "type": "checkbox",
      "id": "enable_gift_wrap",
      "label": "Enable Gift Wrap",
      "default": true
    },
    {
      "type": "product",
      "id": "gift_wrap_product",
      "label": "Gift Wrap Product"
    },
    {
      "type": "checkbox",
      "id": "enable_order_note",
      "label": "Enable Order Note",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "enable_coupon",
      "label": "Enable Coupon",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "enable_shipping_calculator",
      "label": "Enable Shipping Calculator",
      "default": true
    }
  ],
  "presets": [
    {
      "name": "Cart Drawer",
      "category": "Popup"
    }
  ]
}
{% endschema %}

<style>
.empty-cart {
  text-align: center;
  padding: 40px 20px;
}

.empty-cart p {
  margin-bottom: 20px;
}

.popup-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 20px;
  border-bottom: 1px solid #eee;
}

.checkout-btn {
  border: none;
  background: none;
  cursor: pointer;
  text-decoration: none;
  align-items: center;
  justify-content: center;
}

.checkout-btn:disabled {
  opacity: 0.6;
  cursor: not-allowed;
  pointer-events: none;
}

/* Prevent body padding shift when cart drawer opens */
body {
  padding-right: 0 !important;
}

/* Ensure smooth transitions without body movement */
.offcanvas {
  transition: transform 0.3s ease-in-out;
}

/* Override Bootstrap's modal-open class to prevent padding */
body.modal-open {
  padding-right: 0 !important;
}
</style>