{% schema %}
{
  "name": "Account Orders",
  "settings": [
    {
      "type": "header",
      "content": "Layout Settings"
    },
    {
      "type": "select",
      "id": "container_width",
      "label": "Container Width",
      "options": [
        {
          "value": "container",
          "label": "Default"
        },
        {
          "value": "container-fluid",
          "label": "Full Width"
        }
      ],
      "default": "container"
    },
    {
      "type": "header",
      "content": "Empty State"
    },
    {
      "type": "image_picker",
      "id": "empty_state_image",
      "label": "Empty State Image"
    },
    {
      "type": "text",
      "id": "empty_state_title",
      "label": "Empty State Title",
      "default": "You haven't placed any order yet"
    },
    {
      "type": "text",
      "id": "empty_state_text",
      "label": "Empty State Text",
      "default": "It's time to make your first order"
    },
    {
      "type": "text",
      "id": "shop_now_text",
      "label": "Shop Now Button Text",
      "default": "Shop Now"
    }
  ],
  "presets": [
    {
      "name": "Account Orders",
      "category": "Account"
    }
  ]
}
{% endschema %}

<div class="main-content-account">
    <!-- sidebar-account -->
    <div class="btn-sidebar-mb d-lg-none">
        <button data-bs-toggle="offcanvas" data-bs-target="#mbAccount">
            <i class="icon icon-sidebar"></i>
        </button>
    </div>
    <!-- /sidebar-account -->

    <!-- Section-acount -->
    <section class="s-account flat-spacing-17">
        <div class="{{ section.settings.container_width }}">
            <div class="row">
                <div class="col-lg-12">
                    <div class="my-account-container">
                        <div class="sidebar-account-wrap sidebar-content-wrap sticky-top d-lg-block d-none">
                            <ul class="my-account-nav">
                                <li>
                                    <a href="{{ routes.account_url }}" class="text-sm link fw-medium my-account-nav-item">{{ 'sections.account.dashboard' | t }}</a>
                                </li>
                                <li>
                                    <a href="/pages/orders" class="text-sm link fw-medium my-account-nav-item active">{{ 'sections.account.my_orders' | t }}</a>
                                </li>
                                <li>
                                    <a href="/pages/wishlist" class="text-sm link fw-medium my-account-nav-item">{{ 'sections.account.my_wishlist' | t }}</a>
                                </li>
                                <li>
                                    <a href="/account/addresses" class="text-sm link fw-medium my-account-nav-item">{{ 'sections.account.addresses' | t }}</a>
                                </li>
                                <li>
                                    <a href="{{ routes.account_logout_url }}" class="text-sm link fw-medium my-account-nav-item">{{ 'sections.account.log_out' | t }}</a>
                                </li>
                            </ul>
                        </div>
                        <div class="my-acount-content account-orders">
                            {% if customer.orders.size == 0 %}
                                <div class="account-no-orders-wrap">
                                    {% if section.settings.empty_state_image %}
                                        {{ section.settings.empty_state_image | image_url: width: 400 | image_tag: loading: 'lazy', class: 'lazyload' }}
                                    {% endif %}
                                    <div class="display-sm fw-medium title">{{ section.settings.empty_state_title }}</div>
                                    <div class="text text-sm">{{ section.settings.empty_state_text }}</div>
                                    <a href="/collections" class="tf-btn animate-btn d-inline-flex bg-dark-2 justify-content-center">
                                        {{ section.settings.shop_now_text }}
                                    </a>
                                </div>
                            {% else %}
                                <div class="account-orders-wrap">
                                    <h5 class="title">
                                        {{ 'sections.account.order_history' | t }}
                                    </h5>
                                    <div class="wrap-account-order">
                                        <table>
                                            <thead>
                                                <tr>
                                                    <th class="text-md fw-medium">{{ 'sections.account.order_id' | t }}</th>
                                                    <th class="text-md fw-medium">{{ 'sections.account.date' | t }}</th>
                                                    <th class="text-md fw-medium">{{ 'sections.account.status' | t }}</th>
                                                    <th class="text-md fw-medium">{{ 'sections.account.total' | t }}</th>
                                                    <th class="text-md fw-medium">{{ 'sections.account.action' | t }}</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                {% for order in customer.orders %}
                                                    <tr class="tf-order-item">
                                                        <td class="text-md">
                                                            #{{ order.name | remove: '#' }}
                                                        </td>
                                                        <td class="text-md">
                                                            {{ order.created_at | date: "%d %B %Y" }}
                                                        </td>
                                                        <td class="text-md text-{{ order.fulfillment_status | handle }}">
                                                            {{ order.fulfillment_status | capitalize }}
                                                        </td>
                                                        <td class="text-md">
                                                            {{ order.total_price | money }} / {{ order.line_items.size }} items
                                                        </td>
                                                                                                        <td>
                                                    <button type="button" class="view-detail" data-bs-toggle="modal" data-bs-target="#order_detail_{{ order.id }}">{{ 'sections.account.detail' | t }}</button>
                                                </td>
                                                    </tr>
                                                {% endfor %}
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            {% endif %}
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>
    <!-- /Account -->
    
    <!-- Order Detail Modals -->
    {% for order in customer.orders %}
        {% render 'order-detail-modal', order: order %}
    {% endfor %}
</div>
<script>
// Function to wait for Bootstrap to be available
function waitForBootstrap(callback, maxAttempts = 50) {
    let attempts = 0;
    
    function checkBootstrap() {
        attempts++;
        
        if (typeof bootstrap !== 'undefined' && bootstrap.Modal) {
            console.log('Bootstrap Modal is available');
            callback();
        } else if (attempts < maxAttempts) {
            // Check again after 100ms
            setTimeout(checkBootstrap, 100);
        } else {
            console.error('Bootstrap Modal failed to load after', maxAttempts * 100, 'ms');
            // Fallback: try to initialize modals manually
            initializeOrderModalsFallback();
        }
    }
    
    checkBootstrap();
}

// Initialize modals when DOM is ready
document.addEventListener('DOMContentLoaded', function() {
    waitForBootstrap(initializeOrderModals);
});

function initializeOrderModals() {
    console.log('Initializing order modals...');
    
    // Initialize all order detail modals
    const orderDetailModals = document.querySelectorAll('.modal-order-detail');
    console.log('Found', orderDetailModals.length, 'order detail modals');
    
    orderDetailModals.forEach((modal, index) => {
        try {
            console.log('Initializing modal', index + 1, 'with ID:', modal.id);
            
            // Initialize Bootstrap modal for this element
            const bootstrapModal = new bootstrap.Modal(modal, {
                backdrop: true,
                keyboard: true,
                focus: true
            });
            
            // Store the modal instance for later use
            modal.bootstrapModalInstance = bootstrapModal;
            
            // Add event listeners for custom close functionality
            modal.addEventListener('click', function(e) {
                if (e.target === modal) {
                    bootstrapModal.hide();
                }
            });
            
            // Handle close buttons
            const closeButtons = modal.querySelectorAll('[data-bs-dismiss="modal"]');
            closeButtons.forEach(button => {
                button.addEventListener('click', function() {
                    bootstrapModal.hide();
                });
            });
            
            console.log('Successfully initialized modal', index + 1);
            
        } catch (error) {
            console.error('Error initializing modal', index + 1, ':', error);
        }
    });
    
    // Add click handlers for detail buttons
    const detailButtons = document.querySelectorAll('.view-detail');
    console.log('Found', detailButtons.length, 'detail buttons');
    
    detailButtons.forEach((button, index) => {
        const targetId = button.getAttribute('data-bs-target');
        console.log('Button', index + 1, 'targets:', targetId);
        
        button.addEventListener('click', function(e) {
            console.log('Detail button clicked, target:', targetId);
            
            if (targetId) {
                const targetModal = document.querySelector(targetId);
                if (targetModal && targetModal.bootstrapModalInstance) {
                    console.log('Showing modal:', targetId);
                    targetModal.bootstrapModalInstance.show();
                } else {
                    console.error('Modal not found or not initialized:', targetId);
                }
            }
        });
    });
    
    console.log('Order modals initialization complete');
}

// Fallback initialization if Bootstrap fails to load
function initializeOrderModalsFallback() {
    console.warn('Using fallback modal initialization');
    
    const detailButtons = document.querySelectorAll('.view-detail');
    detailButtons.forEach(button => {
        button.addEventListener('click', function(e) {
            e.preventDefault();
            const targetId = this.getAttribute('data-bs-target');
            if (targetId) {
                const targetModal = document.querySelector(targetId);
                if (targetModal) {
                    // Show modal manually
                    targetModal.style.display = 'block';
                    targetModal.classList.add('show');
                    document.body.classList.add('modal-open');
                    
                    // Add backdrop
                    const backdrop = document.createElement('div');
                    backdrop.className = 'modal-backdrop fade show';
                    document.body.appendChild(backdrop);
                    
                    // Handle close
                    const closeModal = () => {
                        targetModal.style.display = 'none';
                        targetModal.classList.remove('show');
                        document.body.classList.remove('modal-open');
                        if (backdrop.parentNode) {
                            backdrop.parentNode.removeChild(backdrop);
                        }
                    };
                    
                    // Add close event listeners
                    const closeButtons = targetModal.querySelectorAll('[data-bs-dismiss="modal"], .icon-close');
                    closeButtons.forEach(closeBtn => {
                        closeBtn.addEventListener('click', closeModal);
                    });
                    
                    backdrop.addEventListener('click', closeModal);
                    
                    // Close on escape key
                    const handleEscape = (e) => {
                        if (e.key === 'Escape') {
                            closeModal();
                            document.removeEventListener('keydown', handleEscape);
                        }
                    };
                    document.addEventListener('keydown', handleEscape);
                }
            }
        });
    });
}
</script> 